pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):79:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):85:9
pub const __FLT16_DENORM_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):108:9
pub const __FLT16_EPSILON__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):112:9
pub const __FLT16_MAX__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):118:9
pub const __FLT16_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):121:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):183:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):205:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):213:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 16);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "16.0.6 (https://github.com/ziglang/zig-bootstrap 1dda86241204c4649f668d46b6a37feed707c7b4)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 16.0.6 (https://github.com/ziglang/zig-bootstrap 1dda86241204c4649f668d46b6a37feed707c7b4)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _ILP32 = @as(c_int, 1);
pub const __ILP32__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 32);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 32);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 32);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 32);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 4);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 4);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 4);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __PTRDIFF_TYPE__ = c_int;
pub const __PTRDIFF_FMTd__ = "d";
pub const __PTRDIFF_FMTi__ = "i";
pub const __INTPTR_TYPE__ = c_int;
pub const __INTPTR_FMTd__ = "d";
pub const __INTPTR_FMTi__ = "i";
pub const __SIZE_TYPE__ = c_uint;
pub const __SIZE_FMTo__ = "o";
pub const __SIZE_FMTu__ = "u";
pub const __SIZE_FMTx__ = "x";
pub const __SIZE_FMTX__ = "X";
pub const __WCHAR_TYPE__ = c_uint;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_uint;
pub const __UINTPTR_FMTo__ = "o";
pub const __UINTPTR_FMTu__ = "u";
pub const __UINTPTR_FMTx__ = "x";
pub const __UINTPTR_FMTX__ = "X";
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 15);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 53);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __LDBL_MAX_EXP__ = @as(c_int, 1024);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = @as(c_int, 32);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 8);
pub const __CHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __ARMEL__ = @as(c_int, 1);
pub const __arm = @as(c_int, 1);
pub const __arm__ = @as(c_int, 1);
pub const __ELF__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __ARM_ARCH_4T__ = @as(c_int, 1);
pub const __ARM_ARCH = @as(c_int, 4);
pub const __ARM_ARCH_ISA_ARM = @as(c_int, 1);
pub const __ARM_ARCH_ISA_THUMB = @as(c_int, 1);
pub const __ARM_32BIT_STATE = @as(c_int, 1);
pub const __ARM_FEATURE_UNALIGNED = @as(c_int, 1);
pub const __ARM_FP = @as(c_int, 0xc);
pub const __ARM_ACLE = @as(c_int, 200);
pub const __ARM_FP16_FORMAT_IEEE = @as(c_int, 1);
pub const __ARM_FP16_ARGS = @as(c_int, 1);
pub const __ARM_EABI__ = @as(c_int, 1);
pub const __ARM_PCS = @as(c_int, 1);
pub const __THUMBEL__ = @as(c_int, 1);
pub const __thumb__ = @as(c_int, 1);
pub const __APCS_32__ = @as(c_int, 1);
pub const __VFP_FP__ = @as(c_int, 1);
pub const __ARM_VFPV2__ = @as(c_int, 1);
pub const __ARM_VFPV3__ = @as(c_int, 1);
pub const __ARM_SIZEOF_WCHAR_T = @as(c_int, 4);
pub const __ARM_SIZEOF_MINIMAL_ENUM = @as(c_int, 4);
pub const __ARM_FEATURE_DSP = @as(c_int, 1);
pub const __ARM_FEATURE_QBIT = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 0);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const __HW_UART_H__ = "";
pub const UART_O_DR = @as(c_uint, 0x00000000);
pub const UART_O_RSR_ECR = @as(c_uint, 0x00000004);
pub const UART_O_FR = @as(c_uint, 0x00000018);
pub const UART_O_UARTILPR = @as(c_uint, 0x00000020);
pub const UART_O_IBRD = @as(c_uint, 0x00000024);
pub const UART_O_FBRD = @as(c_uint, 0x00000028);
pub const UART_O_LCRH = @as(c_uint, 0x0000002C);
pub const UART_O_CTL = @as(c_uint, 0x00000030);
pub const UART_O_IFLS = @as(c_uint, 0x00000034);
pub const UART_O_IMSC = @as(c_uint, 0x00000038);
pub const UART_O_RIS = @as(c_uint, 0x0000003C);
pub const UART_O_MIS = @as(c_uint, 0x00000040);
pub const UART_O_ICR = @as(c_uint, 0x00000044);
pub const UART_O_DMACTL = @as(c_uint, 0x00000048);
pub const UART_DR_OE = @as(c_uint, 0x00000800);
pub const UART_DR_OE_M = @as(c_uint, 0x00000800);
pub const UART_DR_OE_S = @as(c_uint, 11);
pub const UART_DR_BE = @as(c_uint, 0x00000400);
pub const UART_DR_BE_M = @as(c_uint, 0x00000400);
pub const UART_DR_BE_S = @as(c_uint, 10);
pub const UART_DR_PE = @as(c_uint, 0x00000200);
pub const UART_DR_PE_M = @as(c_uint, 0x00000200);
pub const UART_DR_PE_S = @as(c_uint, 9);
pub const UART_DR_FE = @as(c_uint, 0x00000100);
pub const UART_DR_FE_M = @as(c_uint, 0x00000100);
pub const UART_DR_FE_S = @as(c_uint, 8);
pub const UART_DR_DATA_W = @as(c_uint, 8);
pub const UART_DR_DATA_M = @as(c_uint, 0x000000FF);
pub const UART_DR_DATA_S = @as(c_uint, 0);
pub const UART_RSR_ECR_OE = @as(c_uint, 0x00000008);
pub const UART_RSR_ECR_OE_M = @as(c_uint, 0x00000008);
pub const UART_RSR_ECR_OE_S = @as(c_uint, 3);
pub const UART_RSR_ECR_OE_CLEAR_ERROR_1 = @as(c_uint, 0x00000008);
pub const UART_RSR_ECR_OE_ERROR_NOTSET = @as(c_uint, 0x00000000);
pub const UART_RSR_ECR_BE = @as(c_uint, 0x00000004);
pub const UART_RSR_ECR_BE_M = @as(c_uint, 0x00000004);
pub const UART_RSR_ECR_BE_S = @as(c_uint, 2);
pub const UART_RSR_ECR_BE_CLEAR_ERROR_1 = @as(c_uint, 0x00000004);
pub const UART_RSR_ECR_BE_ERROR_NOTSET = @as(c_uint, 0x00000000);
pub const UART_RSR_ECR_PE = @as(c_uint, 0x00000002);
pub const UART_RSR_ECR_PE_M = @as(c_uint, 0x00000002);
pub const UART_RSR_ECR_PE_S = @as(c_uint, 1);
pub const UART_RSR_ECR_PE_CLEAR_ERROR_1 = @as(c_uint, 0x00000002);
pub const UART_RSR_ECR_PE_ERROR_NOTSET = @as(c_uint, 0x00000000);
pub const UART_RSR_ECR_FE = @as(c_uint, 0x00000001);
pub const UART_RSR_ECR_FE_M = @as(c_uint, 0x00000001);
pub const UART_RSR_ECR_FE_S = @as(c_uint, 0);
pub const UART_RSR_ECR_FE_CLEAR_ERROR_1 = @as(c_uint, 0x00000001);
pub const UART_RSR_ECR_FE_ERROR_NOTSET = @as(c_uint, 0x00000000);
pub const UART_FR_TXFE = @as(c_uint, 0x00000080);
pub const UART_FR_TXFE_M = @as(c_uint, 0x00000080);
pub const UART_FR_TXFE_S = @as(c_uint, 7);
pub const UART_FR_RXFF = @as(c_uint, 0x00000040);
pub const UART_FR_RXFF_M = @as(c_uint, 0x00000040);
pub const UART_FR_RXFF_S = @as(c_uint, 6);
pub const UART_FR_TXFF = @as(c_uint, 0x00000020);
pub const UART_FR_TXFF_M = @as(c_uint, 0x00000020);
pub const UART_FR_TXFF_S = @as(c_uint, 5);
pub const UART_FR_RXFE = @as(c_uint, 0x00000010);
pub const UART_FR_RXFE_M = @as(c_uint, 0x00000010);
pub const UART_FR_RXFE_S = @as(c_uint, 4);
pub const UART_FR_BUSY = @as(c_uint, 0x00000008);
pub const UART_FR_BUSY_M = @as(c_uint, 0x00000008);
pub const UART_FR_BUSY_S = @as(c_uint, 3);
pub const UART_FR_CTS = @as(c_uint, 0x00000001);
pub const UART_FR_CTS_M = @as(c_uint, 0x00000001);
pub const UART_FR_CTS_S = @as(c_uint, 0);
pub const UART_UARTILPR_ILPDVSR_W = @as(c_uint, 8);
pub const UART_UARTILPR_ILPDVSR_M = @as(c_uint, 0x000000FF);
pub const UART_UARTILPR_ILPDVSR_S = @as(c_uint, 0);
pub const UART_IBRD_DIVINT_W = @as(c_uint, 16);
pub const UART_IBRD_DIVINT_M = @as(c_uint, 0x0000FFFF);
pub const UART_IBRD_DIVINT_S = @as(c_uint, 0);
pub const UART_FBRD_DIVFRAC_W = @as(c_uint, 6);
pub const UART_FBRD_DIVFRAC_M = @as(c_uint, 0x0000003F);
pub const UART_FBRD_DIVFRAC_S = @as(c_uint, 0);
pub const UART_LCRH_SPS = @as(c_uint, 0x00000080);
pub const UART_LCRH_SPS_M = @as(c_uint, 0x00000080);
pub const UART_LCRH_SPS_S = @as(c_uint, 7);
pub const UART_LCRH_WLEN_W = @as(c_uint, 2);
pub const UART_LCRH_WLEN_M = @as(c_uint, 0x00000060);
pub const UART_LCRH_WLEN_S = @as(c_uint, 5);
pub const UART_LCRH_WLEN_BITL8 = @as(c_uint, 0x00000060);
pub const UART_LCRH_WLEN_BITL7 = @as(c_uint, 0x00000040);
pub const UART_LCRH_WLEN_BITL6 = @as(c_uint, 0x00000020);
pub const UART_LCRH_WLEN_BITL5 = @as(c_uint, 0x00000000);
pub const UART_LCRH_FEN = @as(c_uint, 0x00000010);
pub const UART_LCRH_FEN_M = @as(c_uint, 0x00000010);
pub const UART_LCRH_FEN_S = @as(c_uint, 4);
pub const UART_LCRH_FEN_EN = @as(c_uint, 0x00000010);
pub const UART_LCRH_FEN_DIS = @as(c_uint, 0x00000000);
pub const UART_LCRH_STP2 = @as(c_uint, 0x00000008);
pub const UART_LCRH_STP2_M = @as(c_uint, 0x00000008);
pub const UART_LCRH_STP2_S = @as(c_uint, 3);
pub const UART_LCRH_EPS = @as(c_uint, 0x00000004);
pub const UART_LCRH_EPS_M = @as(c_uint, 0x00000004);
pub const UART_LCRH_EPS_S = @as(c_uint, 2);
pub const UART_LCRH_EPS_EVEN = @as(c_uint, 0x00000004);
pub const UART_LCRH_EPS_ODD = @as(c_uint, 0x00000000);
pub const UART_LCRH_PEN = @as(c_uint, 0x00000002);
pub const UART_LCRH_PEN_M = @as(c_uint, 0x00000002);
pub const UART_LCRH_PEN_S = @as(c_uint, 1);
pub const UART_LCRH_PEN_EN = @as(c_uint, 0x00000002);
pub const UART_LCRH_PEN_DIS = @as(c_uint, 0x00000000);
pub const UART_LCRH_BRK = @as(c_uint, 0x00000001);
pub const UART_LCRH_BRK_M = @as(c_uint, 0x00000001);
pub const UART_LCRH_BRK_S = @as(c_uint, 0);
pub const UART_CTL_CTSEN = @as(c_uint, 0x00008000);
pub const UART_CTL_CTSEN_M = @as(c_uint, 0x00008000);
pub const UART_CTL_CTSEN_S = @as(c_uint, 15);
pub const UART_CTL_CTSEN_EN = @as(c_uint, 0x00008000);
pub const UART_CTL_CTSEN_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_RTSEN = @as(c_uint, 0x00004000);
pub const UART_CTL_RTSEN_M = @as(c_uint, 0x00004000);
pub const UART_CTL_RTSEN_S = @as(c_uint, 14);
pub const UART_CTL_RTSEN_EN = @as(c_uint, 0x00004000);
pub const UART_CTL_RTSEN_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_RTS = @as(c_uint, 0x00000800);
pub const UART_CTL_RTS_M = @as(c_uint, 0x00000800);
pub const UART_CTL_RTS_S = @as(c_uint, 11);
pub const UART_CTL_RXE = @as(c_uint, 0x00000200);
pub const UART_CTL_RXE_M = @as(c_uint, 0x00000200);
pub const UART_CTL_RXE_S = @as(c_uint, 9);
pub const UART_CTL_RXE_EN = @as(c_uint, 0x00000200);
pub const UART_CTL_RXE_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_TXE = @as(c_uint, 0x00000100);
pub const UART_CTL_TXE_M = @as(c_uint, 0x00000100);
pub const UART_CTL_TXE_S = @as(c_uint, 8);
pub const UART_CTL_TXE_EN = @as(c_uint, 0x00000100);
pub const UART_CTL_TXE_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_LBE = @as(c_uint, 0x00000080);
pub const UART_CTL_LBE_M = @as(c_uint, 0x00000080);
pub const UART_CTL_LBE_S = @as(c_uint, 7);
pub const UART_CTL_LBE_EN = @as(c_uint, 0x00000080);
pub const UART_CTL_LBE_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_FCEN = @as(c_uint, 0x00000040);
pub const UART_CTL_FCEN_M = @as(c_uint, 0x00000040);
pub const UART_CTL_FCEN_S = @as(c_uint, 6);
pub const UART_CTL_FCEN_EN = @as(c_uint, 0x00000040);
pub const UART_CTL_FCEN_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_SIRLP = @as(c_uint, 0x00000004);
pub const UART_CTL_SIRLP_M = @as(c_uint, 0x00000004);
pub const UART_CTL_SIRLP_S = @as(c_uint, 2);
pub const UART_CTL_SIRLP_EN = @as(c_uint, 0x00000004);
pub const UART_CTL_SIRLP_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_SIREN = @as(c_uint, 0x00000002);
pub const UART_CTL_SIREN_M = @as(c_uint, 0x00000002);
pub const UART_CTL_SIREN_S = @as(c_uint, 1);
pub const UART_CTL_SIREN_EN = @as(c_uint, 0x00000002);
pub const UART_CTL_SIREN_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_UARTEN = @as(c_uint, 0x00000001);
pub const UART_CTL_UARTEN_M = @as(c_uint, 0x00000001);
pub const UART_CTL_UARTEN_S = @as(c_uint, 0);
pub const UART_CTL_UARTEN_EN = @as(c_uint, 0x00000001);
pub const UART_CTL_UARTEN_DIS = @as(c_uint, 0x00000000);
pub const UART_IFLS_RXSEL_W = @as(c_uint, 3);
pub const UART_IFLS_RXSEL_M = @as(c_uint, 0x00000038);
pub const UART_IFLS_RXSEL_S = @as(c_uint, 3);
pub const UART_IFLS_RXSEL_THREEQU = @as(c_uint, 0x00000018);
pub const UART_IFLS_RXSEL_HALF = @as(c_uint, 0x00000010);
pub const UART_IFLS_RXSEL_QUARTER = @as(c_uint, 0x00000008);
pub const UART_IFLS_TXSEL_W = @as(c_uint, 3);
pub const UART_IFLS_TXSEL_M = @as(c_uint, 0x00000007);
pub const UART_IFLS_TXSEL_S = @as(c_uint, 0);
pub const UART_IFLS_TXSEL_THREEQU = @as(c_uint, 0x00000003);
pub const UART_IFLS_TXSEL_HALF = @as(c_uint, 0x00000002);
pub const UART_IFLS_TXSEL_QUARTER = @as(c_uint, 0x00000001);
pub const UART_IMSC_RXDMADONEIM = @as(c_uint, 0x00002000);
pub const UART_IMSC_RXDMADONEIM_M = @as(c_uint, 0x00002000);
pub const UART_IMSC_RXDMADONEIM_S = @as(c_uint, 13);
pub const UART_IMSC_TXDMADONEIM = @as(c_uint, 0x00001000);
pub const UART_IMSC_TXDMADONEIM_M = @as(c_uint, 0x00001000);
pub const UART_IMSC_TXDMADONEIM_S = @as(c_uint, 12);
pub const UART_IMSC_EOTIM = @as(c_uint, 0x00000800);
pub const UART_IMSC_EOTIM_M = @as(c_uint, 0x00000800);
pub const UART_IMSC_EOTIM_S = @as(c_uint, 11);
pub const UART_IMSC_OEIM = @as(c_uint, 0x00000400);
pub const UART_IMSC_OEIM_M = @as(c_uint, 0x00000400);
pub const UART_IMSC_OEIM_S = @as(c_uint, 10);
pub const UART_IMSC_BEIM = @as(c_uint, 0x00000200);
pub const UART_IMSC_BEIM_M = @as(c_uint, 0x00000200);
pub const UART_IMSC_BEIM_S = @as(c_uint, 9);
pub const UART_IMSC_PEIM = @as(c_uint, 0x00000100);
pub const UART_IMSC_PEIM_M = @as(c_uint, 0x00000100);
pub const UART_IMSC_PEIM_S = @as(c_uint, 8);
pub const UART_IMSC_FEIM = @as(c_uint, 0x00000080);
pub const UART_IMSC_FEIM_M = @as(c_uint, 0x00000080);
pub const UART_IMSC_FEIM_S = @as(c_uint, 7);
pub const UART_IMSC_RTIM = @as(c_uint, 0x00000040);
pub const UART_IMSC_RTIM_M = @as(c_uint, 0x00000040);
pub const UART_IMSC_RTIM_S = @as(c_uint, 6);
pub const UART_IMSC_TXIM = @as(c_uint, 0x00000020);
pub const UART_IMSC_TXIM_M = @as(c_uint, 0x00000020);
pub const UART_IMSC_TXIM_S = @as(c_uint, 5);
pub const UART_IMSC_RXIM = @as(c_uint, 0x00000010);
pub const UART_IMSC_RXIM_M = @as(c_uint, 0x00000010);
pub const UART_IMSC_RXIM_S = @as(c_uint, 4);
pub const UART_IMSC_CTSMIM = @as(c_uint, 0x00000002);
pub const UART_IMSC_CTSMIM_M = @as(c_uint, 0x00000002);
pub const UART_IMSC_CTSMIM_S = @as(c_uint, 1);
pub const UART_RIS_RXDMADONERIS = @as(c_uint, 0x00002000);
pub const UART_RIS_RXDMADONERIS_M = @as(c_uint, 0x00002000);
pub const UART_RIS_RXDMADONERIS_S = @as(c_uint, 13);
pub const UART_RIS_TXDMADONERIS = @as(c_uint, 0x00001000);
pub const UART_RIS_TXDMADONERIS_M = @as(c_uint, 0x00001000);
pub const UART_RIS_TXDMADONERIS_S = @as(c_uint, 12);
pub const UART_RIS_EOTRIS = @as(c_uint, 0x00000800);
pub const UART_RIS_EOTRIS_M = @as(c_uint, 0x00000800);
pub const UART_RIS_EOTRIS_S = @as(c_uint, 11);
pub const UART_RIS_OERIS = @as(c_uint, 0x00000400);
pub const UART_RIS_OERIS_M = @as(c_uint, 0x00000400);
pub const UART_RIS_OERIS_S = @as(c_uint, 10);
pub const UART_RIS_BERIS = @as(c_uint, 0x00000200);
pub const UART_RIS_BERIS_M = @as(c_uint, 0x00000200);
pub const UART_RIS_BERIS_S = @as(c_uint, 9);
pub const UART_RIS_PERIS = @as(c_uint, 0x00000100);
pub const UART_RIS_PERIS_M = @as(c_uint, 0x00000100);
pub const UART_RIS_PERIS_S = @as(c_uint, 8);
pub const UART_RIS_FERIS = @as(c_uint, 0x00000080);
pub const UART_RIS_FERIS_M = @as(c_uint, 0x00000080);
pub const UART_RIS_FERIS_S = @as(c_uint, 7);
pub const UART_RIS_RTRIS = @as(c_uint, 0x00000040);
pub const UART_RIS_RTRIS_M = @as(c_uint, 0x00000040);
pub const UART_RIS_RTRIS_S = @as(c_uint, 6);
pub const UART_RIS_TXRIS = @as(c_uint, 0x00000020);
pub const UART_RIS_TXRIS_M = @as(c_uint, 0x00000020);
pub const UART_RIS_TXRIS_S = @as(c_uint, 5);
pub const UART_RIS_RXRIS = @as(c_uint, 0x00000010);
pub const UART_RIS_RXRIS_M = @as(c_uint, 0x00000010);
pub const UART_RIS_RXRIS_S = @as(c_uint, 4);
pub const UART_RIS_CTSRMIS = @as(c_uint, 0x00000002);
pub const UART_RIS_CTSRMIS_M = @as(c_uint, 0x00000002);
pub const UART_RIS_CTSRMIS_S = @as(c_uint, 1);
pub const UART_MIS_RXDMADONE = @as(c_uint, 0x00002000);
pub const UART_MIS_RXDMADONE_M = @as(c_uint, 0x00002000);
pub const UART_MIS_RXDMADONE_S = @as(c_uint, 13);
pub const UART_MIS_TXDMADONEMIS = @as(c_uint, 0x00001000);
pub const UART_MIS_TXDMADONEMIS_M = @as(c_uint, 0x00001000);
pub const UART_MIS_TXDMADONEMIS_S = @as(c_uint, 12);
pub const UART_MIS_EOTMIS = @as(c_uint, 0x00000800);
pub const UART_MIS_EOTMIS_M = @as(c_uint, 0x00000800);
pub const UART_MIS_EOTMIS_S = @as(c_uint, 11);
pub const UART_MIS_OEMIS = @as(c_uint, 0x00000400);
pub const UART_MIS_OEMIS_M = @as(c_uint, 0x00000400);
pub const UART_MIS_OEMIS_S = @as(c_uint, 10);
pub const UART_MIS_BEMIS = @as(c_uint, 0x00000200);
pub const UART_MIS_BEMIS_M = @as(c_uint, 0x00000200);
pub const UART_MIS_BEMIS_S = @as(c_uint, 9);
pub const UART_MIS_PEMIS = @as(c_uint, 0x00000100);
pub const UART_MIS_PEMIS_M = @as(c_uint, 0x00000100);
pub const UART_MIS_PEMIS_S = @as(c_uint, 8);
pub const UART_MIS_FEMIS = @as(c_uint, 0x00000080);
pub const UART_MIS_FEMIS_M = @as(c_uint, 0x00000080);
pub const UART_MIS_FEMIS_S = @as(c_uint, 7);
pub const UART_MIS_RTMIS = @as(c_uint, 0x00000040);
pub const UART_MIS_RTMIS_M = @as(c_uint, 0x00000040);
pub const UART_MIS_RTMIS_S = @as(c_uint, 6);
pub const UART_MIS_TXMIS = @as(c_uint, 0x00000020);
pub const UART_MIS_TXMIS_M = @as(c_uint, 0x00000020);
pub const UART_MIS_TXMIS_S = @as(c_uint, 5);
pub const UART_MIS_RXMIS = @as(c_uint, 0x00000010);
pub const UART_MIS_RXMIS_M = @as(c_uint, 0x00000010);
pub const UART_MIS_RXMIS_S = @as(c_uint, 4);
pub const UART_MIS_CTSMMIS = @as(c_uint, 0x00000002);
pub const UART_MIS_CTSMMIS_M = @as(c_uint, 0x00000002);
pub const UART_MIS_CTSMMIS_S = @as(c_uint, 1);
pub const UART_ICR_RXDMADONEIC = @as(c_uint, 0x00002000);
pub const UART_ICR_RXDMADONEIC_M = @as(c_uint, 0x00002000);
pub const UART_ICR_RXDMADONEIC_S = @as(c_uint, 13);
pub const UART_ICR_TXDMADONEIC = @as(c_uint, 0x00001000);
pub const UART_ICR_TXDMADONEIC_M = @as(c_uint, 0x00001000);
pub const UART_ICR_TXDMADONEIC_S = @as(c_uint, 12);
pub const UART_ICR_EOTIC = @as(c_uint, 0x00000800);
pub const UART_ICR_EOTIC_M = @as(c_uint, 0x00000800);
pub const UART_ICR_EOTIC_S = @as(c_uint, 11);
pub const UART_ICR_OEIC = @as(c_uint, 0x00000400);
pub const UART_ICR_OEIC_M = @as(c_uint, 0x00000400);
pub const UART_ICR_OEIC_S = @as(c_uint, 10);
pub const UART_ICR_BEIC = @as(c_uint, 0x00000200);
pub const UART_ICR_BEIC_M = @as(c_uint, 0x00000200);
pub const UART_ICR_BEIC_S = @as(c_uint, 9);
pub const UART_ICR_PEIC = @as(c_uint, 0x00000100);
pub const UART_ICR_PEIC_M = @as(c_uint, 0x00000100);
pub const UART_ICR_PEIC_S = @as(c_uint, 8);
pub const UART_ICR_FEIC = @as(c_uint, 0x00000080);
pub const UART_ICR_FEIC_M = @as(c_uint, 0x00000080);
pub const UART_ICR_FEIC_S = @as(c_uint, 7);
pub const UART_ICR_RTIC = @as(c_uint, 0x00000040);
pub const UART_ICR_RTIC_M = @as(c_uint, 0x00000040);
pub const UART_ICR_RTIC_S = @as(c_uint, 6);
pub const UART_ICR_TXIC = @as(c_uint, 0x00000020);
pub const UART_ICR_TXIC_M = @as(c_uint, 0x00000020);
pub const UART_ICR_TXIC_S = @as(c_uint, 5);
pub const UART_ICR_RXIC = @as(c_uint, 0x00000010);
pub const UART_ICR_RXIC_M = @as(c_uint, 0x00000010);
pub const UART_ICR_RXIC_S = @as(c_uint, 4);
pub const UART_ICR_CTSMIC = @as(c_uint, 0x00000002);
pub const UART_ICR_CTSMIC_M = @as(c_uint, 0x00000002);
pub const UART_ICR_CTSMIC_S = @as(c_uint, 1);
pub const UART_DMACTL_DMAONERR = @as(c_uint, 0x00000004);
pub const UART_DMACTL_DMAONERR_M = @as(c_uint, 0x00000004);
pub const UART_DMACTL_DMAONERR_S = @as(c_uint, 2);
pub const UART_DMACTL_TXDMAE = @as(c_uint, 0x00000002);
pub const UART_DMACTL_TXDMAE_M = @as(c_uint, 0x00000002);
pub const UART_DMACTL_TXDMAE_S = @as(c_uint, 1);
pub const UART_DMACTL_RXDMAE = @as(c_uint, 0x00000001);
pub const UART_DMACTL_RXDMAE_M = @as(c_uint, 0x00000001);
pub const UART_DMACTL_RXDMAE_S = @as(c_uint, 0);
