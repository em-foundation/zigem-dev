pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):79:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):85:9
pub const __FLT16_DENORM_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):108:9
pub const __FLT16_EPSILON__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):112:9
pub const __FLT16_MAX__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):118:9
pub const __FLT16_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):121:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):183:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):205:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):213:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 16);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "16.0.6 (https://github.com/ziglang/zig-bootstrap 1dda86241204c4649f668d46b6a37feed707c7b4)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 16.0.6 (https://github.com/ziglang/zig-bootstrap 1dda86241204c4649f668d46b6a37feed707c7b4)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _ILP32 = @as(c_int, 1);
pub const __ILP32__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 32);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 32);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 32);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 32);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 4);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 4);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 4);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __PTRDIFF_TYPE__ = c_int;
pub const __PTRDIFF_FMTd__ = "d";
pub const __PTRDIFF_FMTi__ = "i";
pub const __INTPTR_TYPE__ = c_int;
pub const __INTPTR_FMTd__ = "d";
pub const __INTPTR_FMTi__ = "i";
pub const __SIZE_TYPE__ = c_uint;
pub const __SIZE_FMTo__ = "o";
pub const __SIZE_FMTu__ = "u";
pub const __SIZE_FMTx__ = "x";
pub const __SIZE_FMTX__ = "X";
pub const __WCHAR_TYPE__ = c_uint;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_uint;
pub const __UINTPTR_FMTo__ = "o";
pub const __UINTPTR_FMTu__ = "u";
pub const __UINTPTR_FMTx__ = "x";
pub const __UINTPTR_FMTX__ = "X";
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 15);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 53);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __LDBL_MAX_EXP__ = @as(c_int, 1024);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = @as(c_int, 32);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 8);
pub const __CHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __ARMEL__ = @as(c_int, 1);
pub const __arm = @as(c_int, 1);
pub const __arm__ = @as(c_int, 1);
pub const __ELF__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __ARM_ARCH_4T__ = @as(c_int, 1);
pub const __ARM_ARCH = @as(c_int, 4);
pub const __ARM_ARCH_ISA_ARM = @as(c_int, 1);
pub const __ARM_ARCH_ISA_THUMB = @as(c_int, 1);
pub const __ARM_32BIT_STATE = @as(c_int, 1);
pub const __ARM_FEATURE_UNALIGNED = @as(c_int, 1);
pub const __ARM_FP = @as(c_int, 0xc);
pub const __ARM_ACLE = @as(c_int, 200);
pub const __ARM_FP16_FORMAT_IEEE = @as(c_int, 1);
pub const __ARM_FP16_ARGS = @as(c_int, 1);
pub const __ARM_EABI__ = @as(c_int, 1);
pub const __ARM_PCS = @as(c_int, 1);
pub const __THUMBEL__ = @as(c_int, 1);
pub const __thumb__ = @as(c_int, 1);
pub const __APCS_32__ = @as(c_int, 1);
pub const __VFP_FP__ = @as(c_int, 1);
pub const __ARM_VFPV2__ = @as(c_int, 1);
pub const __ARM_VFPV3__ = @as(c_int, 1);
pub const __ARM_SIZEOF_WCHAR_T = @as(c_int, 4);
pub const __ARM_SIZEOF_MINIMAL_ENUM = @as(c_int, 4);
pub const __ARM_FEATURE_DSP = @as(c_int, 1);
pub const __ARM_FEATURE_QBIT = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 0);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const __HW_GPIO_H__ = "";
pub const GPIO_O_DESC = @as(c_uint, 0x00000000);
pub const GPIO_O_DESCEX = @as(c_uint, 0x00000004);
pub const GPIO_O_IMASK = @as(c_uint, 0x00000044);
pub const GPIO_O_RIS = @as(c_uint, 0x0000004C);
pub const GPIO_O_MIS = @as(c_uint, 0x00000054);
pub const GPIO_O_ISET = @as(c_uint, 0x0000005C);
pub const GPIO_O_ICLR = @as(c_uint, 0x00000064);
pub const GPIO_O_IMSET = @as(c_uint, 0x0000006C);
pub const GPIO_O_IMCLR = @as(c_uint, 0x00000074);
pub const GPIO_O_DTB = @as(c_uint, 0x0000007C);
pub const GPIO_O_DOUT3_0 = @as(c_uint, 0x00000100);
pub const GPIO_O_DOUT7_4 = @as(c_uint, 0x00000104);
pub const GPIO_O_DOUT11_8 = @as(c_uint, 0x00000108);
pub const GPIO_O_DOUT15_12 = @as(c_uint, 0x0000010C);
pub const GPIO_O_DOUT19_16 = @as(c_uint, 0x00000110);
pub const GPIO_O_DOUT23_20 = @as(c_uint, 0x00000114);
pub const GPIO_O_DOUT27_24 = @as(c_uint, 0x00000118);
pub const GPIO_O_DOUT31_0 = @as(c_uint, 0x00000200);
pub const GPIO_O_DOUTSET31_0 = @as(c_uint, 0x00000210);
pub const GPIO_O_DOUTCLR31_0 = @as(c_uint, 0x00000220);
pub const GPIO_O_DOUTTGL31_0 = @as(c_uint, 0x00000230);
pub const GPIO_O_DOUTTGL3_0 = @as(c_uint, 0x00000300);
pub const GPIO_O_DOUTTGL7_4 = @as(c_uint, 0x00000304);
pub const GPIO_O_DOUTTGL11_8 = @as(c_uint, 0x00000308);
pub const GPIO_O_DOUTTGL15_12 = @as(c_uint, 0x0000030C);
pub const GPIO_O_DOUTTGL19_16 = @as(c_uint, 0x00000310);
pub const GPIO_O_DOUTTGL23_20 = @as(c_uint, 0x00000314);
pub const GPIO_O_DOUTTGL27_24 = @as(c_uint, 0x00000318);
pub const GPIO_O_DOE3_0 = @as(c_uint, 0x00000400);
pub const GPIO_O_DOE7_4 = @as(c_uint, 0x00000404);
pub const GPIO_O_DOE11_8 = @as(c_uint, 0x00000408);
pub const GPIO_O_DOE15_12 = @as(c_uint, 0x0000040C);
pub const GPIO_O_DOE19_16 = @as(c_uint, 0x00000410);
pub const GPIO_O_DOE23_20 = @as(c_uint, 0x00000414);
pub const GPIO_O_DOE27_24 = @as(c_uint, 0x00000418);
pub const GPIO_O_DOE31_0 = @as(c_uint, 0x00000500);
pub const GPIO_O_DOESET31_0 = @as(c_uint, 0x00000510);
pub const GPIO_O_DOECLR31_0 = @as(c_uint, 0x00000520);
pub const GPIO_O_DOETGL31_0 = @as(c_uint, 0x00000530);
pub const GPIO_O_DIN3_0 = @as(c_uint, 0x00000600);
pub const GPIO_O_DIN7_4 = @as(c_uint, 0x00000604);
pub const GPIO_O_DIN11_8 = @as(c_uint, 0x00000608);
pub const GPIO_O_DIN15_12 = @as(c_uint, 0x0000060C);
pub const GPIO_O_DIN19_16 = @as(c_uint, 0x00000610);
pub const GPIO_O_DIN23_20 = @as(c_uint, 0x00000614);
pub const GPIO_O_DIN27_24 = @as(c_uint, 0x00000618);
pub const GPIO_O_DIN31_0 = @as(c_uint, 0x00000700);
pub const GPIO_O_EVTCFG = @as(c_uint, 0x00000800);
pub const GPIO_DESC_MODID_W = @as(c_uint, 16);
pub const GPIO_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hexadecimal);
pub const GPIO_DESC_MODID_S = @as(c_uint, 16);
pub const GPIO_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const GPIO_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const GPIO_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const GPIO_DESC_INSTIDX_W = @as(c_uint, 4);
pub const GPIO_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const GPIO_DESC_INSTIDX_S = @as(c_uint, 8);
pub const GPIO_DESC_MAJREV_W = @as(c_uint, 4);
pub const GPIO_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const GPIO_DESC_MAJREV_S = @as(c_uint, 4);
pub const GPIO_DESC_MINREV_W = @as(c_uint, 4);
pub const GPIO_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const GPIO_DESC_MINREV_S = @as(c_uint, 0);
pub const GPIO_DESCEX_NUMDIO_W = @as(c_uint, 6);
pub const GPIO_DESCEX_NUMDIO_M = @as(c_uint, 0x0000003F);
pub const GPIO_DESCEX_NUMDIO_S = @as(c_uint, 0);
pub const GPIO_IMASK_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_IMASK_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_IMASK_DIO25_S = @as(c_uint, 25);
pub const GPIO_IMASK_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_IMASK_DIO25_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_IMASK_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_IMASK_DIO24_S = @as(c_uint, 24);
pub const GPIO_IMASK_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_IMASK_DIO24_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_IMASK_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_IMASK_DIO23_S = @as(c_uint, 23);
pub const GPIO_IMASK_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_IMASK_DIO23_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_IMASK_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_IMASK_DIO22_S = @as(c_uint, 22);
pub const GPIO_IMASK_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_IMASK_DIO22_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_IMASK_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_IMASK_DIO21_S = @as(c_uint, 21);
pub const GPIO_IMASK_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_IMASK_DIO21_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_IMASK_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_IMASK_DIO20_S = @as(c_uint, 20);
pub const GPIO_IMASK_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_IMASK_DIO20_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_IMASK_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_IMASK_DIO19_S = @as(c_uint, 19);
pub const GPIO_IMASK_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_IMASK_DIO19_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_IMASK_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_IMASK_DIO18_S = @as(c_uint, 18);
pub const GPIO_IMASK_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_IMASK_DIO18_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_IMASK_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_IMASK_DIO17_S = @as(c_uint, 17);
pub const GPIO_IMASK_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_IMASK_DIO17_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_IMASK_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_IMASK_DIO16_S = @as(c_uint, 16);
pub const GPIO_IMASK_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_IMASK_DIO16_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_IMASK_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_IMASK_DIO15_S = @as(c_uint, 15);
pub const GPIO_IMASK_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_IMASK_DIO15_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_IMASK_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_IMASK_DIO14_S = @as(c_uint, 14);
pub const GPIO_IMASK_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_IMASK_DIO14_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_IMASK_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_IMASK_DIO13_S = @as(c_uint, 13);
pub const GPIO_IMASK_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_IMASK_DIO13_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_IMASK_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_IMASK_DIO12_S = @as(c_uint, 12);
pub const GPIO_IMASK_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_IMASK_DIO12_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_IMASK_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_IMASK_DIO11_S = @as(c_uint, 11);
pub const GPIO_IMASK_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_IMASK_DIO11_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_IMASK_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_IMASK_DIO10_S = @as(c_uint, 10);
pub const GPIO_IMASK_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_IMASK_DIO10_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_IMASK_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_IMASK_DIO9_S = @as(c_uint, 9);
pub const GPIO_IMASK_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_IMASK_DIO9_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_IMASK_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_IMASK_DIO8_S = @as(c_uint, 8);
pub const GPIO_IMASK_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_IMASK_DIO8_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_IMASK_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_IMASK_DIO7_S = @as(c_uint, 7);
pub const GPIO_IMASK_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_IMASK_DIO7_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_IMASK_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_IMASK_DIO6_S = @as(c_uint, 6);
pub const GPIO_IMASK_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_IMASK_DIO6_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_IMASK_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_IMASK_DIO5_S = @as(c_uint, 5);
pub const GPIO_IMASK_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_IMASK_DIO5_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_IMASK_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_IMASK_DIO4_S = @as(c_uint, 4);
pub const GPIO_IMASK_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_IMASK_DIO4_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_IMASK_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_IMASK_DIO3_S = @as(c_uint, 3);
pub const GPIO_IMASK_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_IMASK_DIO3_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_IMASK_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_IMASK_DIO2_S = @as(c_uint, 2);
pub const GPIO_IMASK_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_IMASK_DIO2_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_IMASK_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_IMASK_DIO1_S = @as(c_uint, 1);
pub const GPIO_IMASK_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_IMASK_DIO1_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_IMASK_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_IMASK_DIO0_S = @as(c_uint, 0);
pub const GPIO_IMASK_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_IMASK_DIO0_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_RIS_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_RIS_DIO25_S = @as(c_uint, 25);
pub const GPIO_RIS_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_RIS_DIO25_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_RIS_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_RIS_DIO24_S = @as(c_uint, 24);
pub const GPIO_RIS_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_RIS_DIO24_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_RIS_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_RIS_DIO23_S = @as(c_uint, 23);
pub const GPIO_RIS_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_RIS_DIO23_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_RIS_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_RIS_DIO22_S = @as(c_uint, 22);
pub const GPIO_RIS_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_RIS_DIO22_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_RIS_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_RIS_DIO21_S = @as(c_uint, 21);
pub const GPIO_RIS_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_RIS_DIO21_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_RIS_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_RIS_DIO20_S = @as(c_uint, 20);
pub const GPIO_RIS_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_RIS_DIO20_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_RIS_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_RIS_DIO19_S = @as(c_uint, 19);
pub const GPIO_RIS_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_RIS_DIO19_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_RIS_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_RIS_DIO18_S = @as(c_uint, 18);
pub const GPIO_RIS_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_RIS_DIO18_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_RIS_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_RIS_DIO17_S = @as(c_uint, 17);
pub const GPIO_RIS_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_RIS_DIO17_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_RIS_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_RIS_DIO16_S = @as(c_uint, 16);
pub const GPIO_RIS_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_RIS_DIO16_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_RIS_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_RIS_DIO15_S = @as(c_uint, 15);
pub const GPIO_RIS_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_RIS_DIO15_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_RIS_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_RIS_DIO14_S = @as(c_uint, 14);
pub const GPIO_RIS_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_RIS_DIO14_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_RIS_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_RIS_DIO13_S = @as(c_uint, 13);
pub const GPIO_RIS_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_RIS_DIO13_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_RIS_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_RIS_DIO12_S = @as(c_uint, 12);
pub const GPIO_RIS_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_RIS_DIO12_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_RIS_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_RIS_DIO11_S = @as(c_uint, 11);
pub const GPIO_RIS_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_RIS_DIO11_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_RIS_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_RIS_DIO10_S = @as(c_uint, 10);
pub const GPIO_RIS_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_RIS_DIO10_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_RIS_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_RIS_DIO9_S = @as(c_uint, 9);
pub const GPIO_RIS_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_RIS_DIO9_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_RIS_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_RIS_DIO8_S = @as(c_uint, 8);
pub const GPIO_RIS_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_RIS_DIO8_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_RIS_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_RIS_DIO7_S = @as(c_uint, 7);
pub const GPIO_RIS_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_RIS_DIO7_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_RIS_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_RIS_DIO6_S = @as(c_uint, 6);
pub const GPIO_RIS_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_RIS_DIO6_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_RIS_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_RIS_DIO5_S = @as(c_uint, 5);
pub const GPIO_RIS_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_RIS_DIO5_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_RIS_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_RIS_DIO4_S = @as(c_uint, 4);
pub const GPIO_RIS_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_RIS_DIO4_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_RIS_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_RIS_DIO3_S = @as(c_uint, 3);
pub const GPIO_RIS_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_RIS_DIO3_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_RIS_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_RIS_DIO2_S = @as(c_uint, 2);
pub const GPIO_RIS_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_RIS_DIO2_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_RIS_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_RIS_DIO1_S = @as(c_uint, 1);
pub const GPIO_RIS_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_RIS_DIO1_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_RIS_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_RIS_DIO0_S = @as(c_uint, 0);
pub const GPIO_RIS_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_RIS_DIO0_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_MIS_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_MIS_DIO25_S = @as(c_uint, 25);
pub const GPIO_MIS_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_MIS_DIO25_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_MIS_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_MIS_DIO24_S = @as(c_uint, 24);
pub const GPIO_MIS_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_MIS_DIO24_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_MIS_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_MIS_DIO23_S = @as(c_uint, 23);
pub const GPIO_MIS_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_MIS_DIO23_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_MIS_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_MIS_DIO22_S = @as(c_uint, 22);
pub const GPIO_MIS_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_MIS_DIO22_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_MIS_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_MIS_DIO21_S = @as(c_uint, 21);
pub const GPIO_MIS_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_MIS_DIO21_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_MIS_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_MIS_DIO20_S = @as(c_uint, 20);
pub const GPIO_MIS_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_MIS_DIO20_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_MIS_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_MIS_DIO19_S = @as(c_uint, 19);
pub const GPIO_MIS_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_MIS_DIO19_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_MIS_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_MIS_DIO18_S = @as(c_uint, 18);
pub const GPIO_MIS_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_MIS_DIO18_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_MIS_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_MIS_DIO17_S = @as(c_uint, 17);
pub const GPIO_MIS_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_MIS_DIO17_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_MIS_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_MIS_DIO16_S = @as(c_uint, 16);
pub const GPIO_MIS_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_MIS_DIO16_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_MIS_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_MIS_DIO15_S = @as(c_uint, 15);
pub const GPIO_MIS_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_MIS_DIO15_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_MIS_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_MIS_DIO14_S = @as(c_uint, 14);
pub const GPIO_MIS_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_MIS_DIO14_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_MIS_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_MIS_DIO13_S = @as(c_uint, 13);
pub const GPIO_MIS_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_MIS_DIO13_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_MIS_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_MIS_DIO12_S = @as(c_uint, 12);
pub const GPIO_MIS_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_MIS_DIO12_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_MIS_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_MIS_DIO11_S = @as(c_uint, 11);
pub const GPIO_MIS_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_MIS_DIO11_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_MIS_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_MIS_DIO10_S = @as(c_uint, 10);
pub const GPIO_MIS_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_MIS_DIO10_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_MIS_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_MIS_DIO9_S = @as(c_uint, 9);
pub const GPIO_MIS_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_MIS_DIO9_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_MIS_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_MIS_DIO8_S = @as(c_uint, 8);
pub const GPIO_MIS_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_MIS_DIO8_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_MIS_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_MIS_DIO7_S = @as(c_uint, 7);
pub const GPIO_MIS_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_MIS_DIO7_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_MIS_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_MIS_DIO6_S = @as(c_uint, 6);
pub const GPIO_MIS_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_MIS_DIO6_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_MIS_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_MIS_DIO5_S = @as(c_uint, 5);
pub const GPIO_MIS_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_MIS_DIO5_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_MIS_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_MIS_DIO4_S = @as(c_uint, 4);
pub const GPIO_MIS_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_MIS_DIO4_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_MIS_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_MIS_DIO3_S = @as(c_uint, 3);
pub const GPIO_MIS_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_MIS_DIO3_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_MIS_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_MIS_DIO2_S = @as(c_uint, 2);
pub const GPIO_MIS_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_MIS_DIO2_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_MIS_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_MIS_DIO1_S = @as(c_uint, 1);
pub const GPIO_MIS_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_MIS_DIO1_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_MIS_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_MIS_DIO0_S = @as(c_uint, 0);
pub const GPIO_MIS_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_MIS_DIO0_CLR = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_ISET_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_ISET_DIO25_S = @as(c_uint, 25);
pub const GPIO_ISET_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_ISET_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_ISET_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_ISET_DIO24_S = @as(c_uint, 24);
pub const GPIO_ISET_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_ISET_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_ISET_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_ISET_DIO23_S = @as(c_uint, 23);
pub const GPIO_ISET_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_ISET_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_ISET_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_ISET_DIO22_S = @as(c_uint, 22);
pub const GPIO_ISET_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_ISET_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_ISET_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_ISET_DIO21_S = @as(c_uint, 21);
pub const GPIO_ISET_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_ISET_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_ISET_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_ISET_DIO20_S = @as(c_uint, 20);
pub const GPIO_ISET_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_ISET_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_ISET_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_ISET_DIO19_S = @as(c_uint, 19);
pub const GPIO_ISET_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_ISET_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_ISET_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_ISET_DIO18_S = @as(c_uint, 18);
pub const GPIO_ISET_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_ISET_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_ISET_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_ISET_DIO17_S = @as(c_uint, 17);
pub const GPIO_ISET_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_ISET_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_ISET_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_ISET_DIO16_S = @as(c_uint, 16);
pub const GPIO_ISET_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_ISET_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_ISET_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_ISET_DIO15_S = @as(c_uint, 15);
pub const GPIO_ISET_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_ISET_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_ISET_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_ISET_DIO14_S = @as(c_uint, 14);
pub const GPIO_ISET_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_ISET_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_ISET_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_ISET_DIO13_S = @as(c_uint, 13);
pub const GPIO_ISET_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_ISET_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_ISET_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_ISET_DIO12_S = @as(c_uint, 12);
pub const GPIO_ISET_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_ISET_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_ISET_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_ISET_DIO11_S = @as(c_uint, 11);
pub const GPIO_ISET_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_ISET_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_ISET_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_ISET_DIO10_S = @as(c_uint, 10);
pub const GPIO_ISET_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_ISET_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_ISET_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_ISET_DIO9_S = @as(c_uint, 9);
pub const GPIO_ISET_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_ISET_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_ISET_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_ISET_DIO8_S = @as(c_uint, 8);
pub const GPIO_ISET_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_ISET_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_ISET_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_ISET_DIO7_S = @as(c_uint, 7);
pub const GPIO_ISET_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_ISET_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_ISET_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_ISET_DIO6_S = @as(c_uint, 6);
pub const GPIO_ISET_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_ISET_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_ISET_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_ISET_DIO5_S = @as(c_uint, 5);
pub const GPIO_ISET_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_ISET_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_ISET_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_ISET_DIO4_S = @as(c_uint, 4);
pub const GPIO_ISET_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_ISET_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_ISET_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_ISET_DIO3_S = @as(c_uint, 3);
pub const GPIO_ISET_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_ISET_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_ISET_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_ISET_DIO2_S = @as(c_uint, 2);
pub const GPIO_ISET_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_ISET_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_ISET_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_ISET_DIO1_S = @as(c_uint, 1);
pub const GPIO_ISET_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_ISET_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_ISET_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_ISET_DIO0_S = @as(c_uint, 0);
pub const GPIO_ISET_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_ISET_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_ICLR_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_ICLR_DIO25_S = @as(c_uint, 25);
pub const GPIO_ICLR_DIO25_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_ICLR_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_ICLR_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_ICLR_DIO24_S = @as(c_uint, 24);
pub const GPIO_ICLR_DIO24_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_ICLR_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_ICLR_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_ICLR_DIO23_S = @as(c_uint, 23);
pub const GPIO_ICLR_DIO23_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_ICLR_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_ICLR_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_ICLR_DIO22_S = @as(c_uint, 22);
pub const GPIO_ICLR_DIO22_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_ICLR_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_ICLR_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_ICLR_DIO21_S = @as(c_uint, 21);
pub const GPIO_ICLR_DIO21_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_ICLR_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_ICLR_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_ICLR_DIO20_S = @as(c_uint, 20);
pub const GPIO_ICLR_DIO20_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_ICLR_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_ICLR_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_ICLR_DIO19_S = @as(c_uint, 19);
pub const GPIO_ICLR_DIO19_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_ICLR_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_ICLR_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_ICLR_DIO18_S = @as(c_uint, 18);
pub const GPIO_ICLR_DIO18_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_ICLR_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_ICLR_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_ICLR_DIO17_S = @as(c_uint, 17);
pub const GPIO_ICLR_DIO17_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_ICLR_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_ICLR_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_ICLR_DIO16_S = @as(c_uint, 16);
pub const GPIO_ICLR_DIO16_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_ICLR_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_ICLR_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_ICLR_DIO15_S = @as(c_uint, 15);
pub const GPIO_ICLR_DIO15_CLR = @as(c_uint, 0x00008000);
pub const GPIO_ICLR_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_ICLR_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_ICLR_DIO14_S = @as(c_uint, 14);
pub const GPIO_ICLR_DIO14_CLR = @as(c_uint, 0x00004000);
pub const GPIO_ICLR_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_ICLR_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_ICLR_DIO13_S = @as(c_uint, 13);
pub const GPIO_ICLR_DIO13_CLR = @as(c_uint, 0x00002000);
pub const GPIO_ICLR_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_ICLR_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_ICLR_DIO12_S = @as(c_uint, 12);
pub const GPIO_ICLR_DIO12_CLR = @as(c_uint, 0x00001000);
pub const GPIO_ICLR_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_ICLR_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_ICLR_DIO11_S = @as(c_uint, 11);
pub const GPIO_ICLR_DIO11_CLR = @as(c_uint, 0x00000800);
pub const GPIO_ICLR_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_ICLR_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_ICLR_DIO10_S = @as(c_uint, 10);
pub const GPIO_ICLR_DIO10_CLR = @as(c_uint, 0x00000400);
pub const GPIO_ICLR_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_ICLR_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_ICLR_DIO9_S = @as(c_uint, 9);
pub const GPIO_ICLR_DIO9_CLR = @as(c_uint, 0x00000200);
pub const GPIO_ICLR_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_ICLR_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_ICLR_DIO8_S = @as(c_uint, 8);
pub const GPIO_ICLR_DIO8_CLR = @as(c_uint, 0x00000100);
pub const GPIO_ICLR_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_ICLR_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_ICLR_DIO7_S = @as(c_uint, 7);
pub const GPIO_ICLR_DIO7_CLR = @as(c_uint, 0x00000080);
pub const GPIO_ICLR_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_ICLR_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_ICLR_DIO6_S = @as(c_uint, 6);
pub const GPIO_ICLR_DIO6_CLR = @as(c_uint, 0x00000040);
pub const GPIO_ICLR_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_ICLR_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_ICLR_DIO5_S = @as(c_uint, 5);
pub const GPIO_ICLR_DIO5_CLR = @as(c_uint, 0x00000020);
pub const GPIO_ICLR_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_ICLR_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_ICLR_DIO4_S = @as(c_uint, 4);
pub const GPIO_ICLR_DIO4_CLR = @as(c_uint, 0x00000010);
pub const GPIO_ICLR_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_ICLR_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_ICLR_DIO3_S = @as(c_uint, 3);
pub const GPIO_ICLR_DIO3_CLR = @as(c_uint, 0x00000008);
pub const GPIO_ICLR_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_ICLR_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_ICLR_DIO2_S = @as(c_uint, 2);
pub const GPIO_ICLR_DIO2_CLR = @as(c_uint, 0x00000004);
pub const GPIO_ICLR_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_ICLR_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_ICLR_DIO1_S = @as(c_uint, 1);
pub const GPIO_ICLR_DIO1_CLR = @as(c_uint, 0x00000002);
pub const GPIO_ICLR_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_ICLR_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_ICLR_DIO0_S = @as(c_uint, 0);
pub const GPIO_ICLR_DIO0_CLR = @as(c_uint, 0x00000001);
pub const GPIO_ICLR_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_IMSET_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_IMSET_DIO25_S = @as(c_uint, 25);
pub const GPIO_IMSET_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_IMSET_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_IMSET_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_IMSET_DIO24_S = @as(c_uint, 24);
pub const GPIO_IMSET_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_IMSET_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_IMSET_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_IMSET_DIO23_S = @as(c_uint, 23);
pub const GPIO_IMSET_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_IMSET_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_IMSET_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_IMSET_DIO22_S = @as(c_uint, 22);
pub const GPIO_IMSET_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_IMSET_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_IMSET_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_IMSET_DIO21_S = @as(c_uint, 21);
pub const GPIO_IMSET_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_IMSET_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_IMSET_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_IMSET_DIO20_S = @as(c_uint, 20);
pub const GPIO_IMSET_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_IMSET_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_IMSET_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_IMSET_DIO19_S = @as(c_uint, 19);
pub const GPIO_IMSET_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_IMSET_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_IMSET_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_IMSET_DIO18_S = @as(c_uint, 18);
pub const GPIO_IMSET_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_IMSET_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_IMSET_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_IMSET_DIO17_S = @as(c_uint, 17);
pub const GPIO_IMSET_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_IMSET_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_IMSET_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_IMSET_DIO16_S = @as(c_uint, 16);
pub const GPIO_IMSET_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_IMSET_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_IMSET_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_IMSET_DIO15_S = @as(c_uint, 15);
pub const GPIO_IMSET_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_IMSET_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_IMSET_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_IMSET_DIO14_S = @as(c_uint, 14);
pub const GPIO_IMSET_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_IMSET_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_IMSET_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_IMSET_DIO13_S = @as(c_uint, 13);
pub const GPIO_IMSET_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_IMSET_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_IMSET_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_IMSET_DIO12_S = @as(c_uint, 12);
pub const GPIO_IMSET_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_IMSET_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_IMSET_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_IMSET_DIO11_S = @as(c_uint, 11);
pub const GPIO_IMSET_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_IMSET_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_IMSET_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_IMSET_DIO10_S = @as(c_uint, 10);
pub const GPIO_IMSET_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_IMSET_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_IMSET_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_IMSET_DIO9_S = @as(c_uint, 9);
pub const GPIO_IMSET_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_IMSET_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_IMSET_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_IMSET_DIO8_S = @as(c_uint, 8);
pub const GPIO_IMSET_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_IMSET_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_IMSET_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_IMSET_DIO7_S = @as(c_uint, 7);
pub const GPIO_IMSET_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_IMSET_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_IMSET_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_IMSET_DIO6_S = @as(c_uint, 6);
pub const GPIO_IMSET_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_IMSET_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_IMSET_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_IMSET_DIO5_S = @as(c_uint, 5);
pub const GPIO_IMSET_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_IMSET_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_IMSET_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_IMSET_DIO4_S = @as(c_uint, 4);
pub const GPIO_IMSET_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_IMSET_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_IMSET_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_IMSET_DIO3_S = @as(c_uint, 3);
pub const GPIO_IMSET_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_IMSET_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_IMSET_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_IMSET_DIO2_S = @as(c_uint, 2);
pub const GPIO_IMSET_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_IMSET_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_IMSET_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_IMSET_DIO1_S = @as(c_uint, 1);
pub const GPIO_IMSET_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_IMSET_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_IMSET_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_IMSET_DIO0_S = @as(c_uint, 0);
pub const GPIO_IMSET_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_IMSET_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_IMCLR_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_IMCLR_DIO25_S = @as(c_uint, 25);
pub const GPIO_IMCLR_DIO25_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_IMCLR_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_IMCLR_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_IMCLR_DIO24_S = @as(c_uint, 24);
pub const GPIO_IMCLR_DIO24_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_IMCLR_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_IMCLR_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_IMCLR_DIO23_S = @as(c_uint, 23);
pub const GPIO_IMCLR_DIO23_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_IMCLR_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_IMCLR_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_IMCLR_DIO22_S = @as(c_uint, 22);
pub const GPIO_IMCLR_DIO22_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_IMCLR_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_IMCLR_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_IMCLR_DIO21_S = @as(c_uint, 21);
pub const GPIO_IMCLR_DIO21_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_IMCLR_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_IMCLR_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_IMCLR_DIO20_S = @as(c_uint, 20);
pub const GPIO_IMCLR_DIO20_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_IMCLR_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_IMCLR_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_IMCLR_DIO19_S = @as(c_uint, 19);
pub const GPIO_IMCLR_DIO19_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_IMCLR_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_IMCLR_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_IMCLR_DIO18_S = @as(c_uint, 18);
pub const GPIO_IMCLR_DIO18_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_IMCLR_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_IMCLR_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_IMCLR_DIO17_S = @as(c_uint, 17);
pub const GPIO_IMCLR_DIO17_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_IMCLR_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_IMCLR_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_IMCLR_DIO16_S = @as(c_uint, 16);
pub const GPIO_IMCLR_DIO16_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_IMCLR_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_IMCLR_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_IMCLR_DIO15_S = @as(c_uint, 15);
pub const GPIO_IMCLR_DIO15_CLR = @as(c_uint, 0x00008000);
pub const GPIO_IMCLR_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_IMCLR_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_IMCLR_DIO14_S = @as(c_uint, 14);
pub const GPIO_IMCLR_DIO14_CLR = @as(c_uint, 0x00004000);
pub const GPIO_IMCLR_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_IMCLR_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_IMCLR_DIO13_S = @as(c_uint, 13);
pub const GPIO_IMCLR_DIO13_CLR = @as(c_uint, 0x00002000);
pub const GPIO_IMCLR_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_IMCLR_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_IMCLR_DIO12_S = @as(c_uint, 12);
pub const GPIO_IMCLR_DIO12_CLR = @as(c_uint, 0x00001000);
pub const GPIO_IMCLR_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_IMCLR_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_IMCLR_DIO11_S = @as(c_uint, 11);
pub const GPIO_IMCLR_DIO11_CLR = @as(c_uint, 0x00000800);
pub const GPIO_IMCLR_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_IMCLR_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_IMCLR_DIO10_S = @as(c_uint, 10);
pub const GPIO_IMCLR_DIO10_CLR = @as(c_uint, 0x00000400);
pub const GPIO_IMCLR_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_IMCLR_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_IMCLR_DIO9_S = @as(c_uint, 9);
pub const GPIO_IMCLR_DIO9_CLR = @as(c_uint, 0x00000200);
pub const GPIO_IMCLR_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_IMCLR_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_IMCLR_DIO8_S = @as(c_uint, 8);
pub const GPIO_IMCLR_DIO8_CLR = @as(c_uint, 0x00000100);
pub const GPIO_IMCLR_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_IMCLR_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_IMCLR_DIO7_S = @as(c_uint, 7);
pub const GPIO_IMCLR_DIO7_CLR = @as(c_uint, 0x00000080);
pub const GPIO_IMCLR_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_IMCLR_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_IMCLR_DIO6_S = @as(c_uint, 6);
pub const GPIO_IMCLR_DIO6_CLR = @as(c_uint, 0x00000040);
pub const GPIO_IMCLR_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_IMCLR_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_IMCLR_DIO5_S = @as(c_uint, 5);
pub const GPIO_IMCLR_DIO5_CLR = @as(c_uint, 0x00000020);
pub const GPIO_IMCLR_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_IMCLR_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_IMCLR_DIO4_S = @as(c_uint, 4);
pub const GPIO_IMCLR_DIO4_CLR = @as(c_uint, 0x00000010);
pub const GPIO_IMCLR_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_IMCLR_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_IMCLR_DIO3_S = @as(c_uint, 3);
pub const GPIO_IMCLR_DIO3_CLR = @as(c_uint, 0x00000008);
pub const GPIO_IMCLR_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_IMCLR_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_IMCLR_DIO2_S = @as(c_uint, 2);
pub const GPIO_IMCLR_DIO2_CLR = @as(c_uint, 0x00000004);
pub const GPIO_IMCLR_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_IMCLR_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_IMCLR_DIO1_S = @as(c_uint, 1);
pub const GPIO_IMCLR_DIO1_CLR = @as(c_uint, 0x00000002);
pub const GPIO_IMCLR_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_IMCLR_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_IMCLR_DIO0_S = @as(c_uint, 0);
pub const GPIO_IMCLR_DIO0_CLR = @as(c_uint, 0x00000001);
pub const GPIO_IMCLR_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DTB_SEL_W = @as(c_uint, 3);
pub const GPIO_DTB_SEL_M = @as(c_uint, 0x00000007);
pub const GPIO_DTB_SEL_S = @as(c_uint, 0);
pub const GPIO_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOUT3_0_DIO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT3_0_DIO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT3_0_DIO3_S = @as(c_uint, 24);
pub const GPIO_DOUT3_0_DIO3_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT3_0_DIO3_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT3_0_DIO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT3_0_DIO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT3_0_DIO2_S = @as(c_uint, 16);
pub const GPIO_DOUT3_0_DIO2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT3_0_DIO2_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT3_0_DIO1 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT3_0_DIO1_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT3_0_DIO1_S = @as(c_uint, 8);
pub const GPIO_DOUT3_0_DIO1_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT3_0_DIO1_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT3_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT3_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT3_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUT3_0_DIO0_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT3_0_DIO0_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT7_4_DIO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT7_4_DIO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT7_4_DIO7_S = @as(c_uint, 24);
pub const GPIO_DOUT7_4_DIO7_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT7_4_DIO7_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT7_4_DIO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT7_4_DIO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT7_4_DIO6_S = @as(c_uint, 16);
pub const GPIO_DOUT7_4_DIO6_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT7_4_DIO6_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT7_4_DIO5 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT7_4_DIO5_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT7_4_DIO5_S = @as(c_uint, 8);
pub const GPIO_DOUT7_4_DIO5_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT7_4_DIO5_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT7_4_DIO4 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT7_4_DIO4_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT7_4_DIO4_S = @as(c_uint, 0);
pub const GPIO_DOUT7_4_DIO4_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT7_4_DIO4_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT11_8_DIO11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT11_8_DIO11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT11_8_DIO11_S = @as(c_uint, 24);
pub const GPIO_DOUT11_8_DIO11_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT11_8_DIO11_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT11_8_DIO10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT11_8_DIO10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT11_8_DIO10_S = @as(c_uint, 16);
pub const GPIO_DOUT11_8_DIO10_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT11_8_DIO10_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT11_8_DIO9 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT11_8_DIO9_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT11_8_DIO9_S = @as(c_uint, 8);
pub const GPIO_DOUT11_8_DIO9_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT11_8_DIO9_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT11_8_DIO8 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT11_8_DIO8_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT11_8_DIO8_S = @as(c_uint, 0);
pub const GPIO_DOUT11_8_DIO8_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT11_8_DIO8_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT15_12_DIO15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT15_12_DIO15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT15_12_DIO15_S = @as(c_uint, 24);
pub const GPIO_DOUT15_12_DIO15_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT15_12_DIO15_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT15_12_DIO14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT15_12_DIO14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT15_12_DIO14_S = @as(c_uint, 16);
pub const GPIO_DOUT15_12_DIO14_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT15_12_DIO14_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT15_12_DIO13 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT15_12_DIO13_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT15_12_DIO13_S = @as(c_uint, 8);
pub const GPIO_DOUT15_12_DIO13_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT15_12_DIO13_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT15_12_DIO12 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT15_12_DIO12_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT15_12_DIO12_S = @as(c_uint, 0);
pub const GPIO_DOUT15_12_DIO12_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT15_12_DIO12_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT19_16_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT19_16_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT19_16_DIO19_S = @as(c_uint, 24);
pub const GPIO_DOUT19_16_DIO19_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT19_16_DIO19_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT19_16_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT19_16_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT19_16_DIO18_S = @as(c_uint, 16);
pub const GPIO_DOUT19_16_DIO18_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT19_16_DIO18_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT19_16_DIO17 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT19_16_DIO17_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT19_16_DIO17_S = @as(c_uint, 8);
pub const GPIO_DOUT19_16_DIO17_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT19_16_DIO17_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT19_16_DIO16 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT19_16_DIO16_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT19_16_DIO16_S = @as(c_uint, 0);
pub const GPIO_DOUT19_16_DIO16_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT19_16_DIO16_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT23_20_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT23_20_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT23_20_DIO23_S = @as(c_uint, 24);
pub const GPIO_DOUT23_20_DIO23_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT23_20_DIO23_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT23_20_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT23_20_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT23_20_DIO22_S = @as(c_uint, 16);
pub const GPIO_DOUT23_20_DIO22_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT23_20_DIO22_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT23_20_DIO21 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT23_20_DIO21_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT23_20_DIO21_S = @as(c_uint, 8);
pub const GPIO_DOUT23_20_DIO21_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT23_20_DIO21_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT23_20_DIO20 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT23_20_DIO20_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT23_20_DIO20_S = @as(c_uint, 0);
pub const GPIO_DOUT23_20_DIO20_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT23_20_DIO20_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT27_24_DIO25 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT27_24_DIO25_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT27_24_DIO25_S = @as(c_uint, 8);
pub const GPIO_DOUT27_24_DIO25_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT27_24_DIO25_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT27_24_DIO24 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT27_24_DIO24_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT27_24_DIO24_S = @as(c_uint, 0);
pub const GPIO_DOUT27_24_DIO24_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT27_24_DIO24_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOUT31_0_DIO25_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO25_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOUT31_0_DIO24_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO24_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOUT31_0_DIO23_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO23_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOUT31_0_DIO22_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO22_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOUT31_0_DIO21_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO21_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOUT31_0_DIO20_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO20_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOUT31_0_DIO19_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO19_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOUT31_0_DIO18_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO18_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOUT31_0_DIO17_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO17_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOUT31_0_DIO16_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUT31_0_DIO16_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOUT31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOUT31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOUT31_0_DIO15_ONE = @as(c_uint, 0x00008000);
pub const GPIO_DOUT31_0_DIO15_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOUT31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOUT31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOUT31_0_DIO14_ONE = @as(c_uint, 0x00004000);
pub const GPIO_DOUT31_0_DIO14_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOUT31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOUT31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOUT31_0_DIO13_ONE = @as(c_uint, 0x00002000);
pub const GPIO_DOUT31_0_DIO13_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOUT31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOUT31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOUT31_0_DIO12_ONE = @as(c_uint, 0x00001000);
pub const GPIO_DOUT31_0_DIO12_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOUT31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOUT31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOUT31_0_DIO11_ONE = @as(c_uint, 0x00000800);
pub const GPIO_DOUT31_0_DIO11_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOUT31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOUT31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOUT31_0_DIO10_ONE = @as(c_uint, 0x00000400);
pub const GPIO_DOUT31_0_DIO10_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOUT31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOUT31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOUT31_0_DIO9_ONE = @as(c_uint, 0x00000200);
pub const GPIO_DOUT31_0_DIO9_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOUT31_0_DIO8_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT31_0_DIO8_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOUT31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOUT31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOUT31_0_DIO7_ONE = @as(c_uint, 0x00000080);
pub const GPIO_DOUT31_0_DIO7_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOUT31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOUT31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOUT31_0_DIO6_ONE = @as(c_uint, 0x00000040);
pub const GPIO_DOUT31_0_DIO6_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOUT31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOUT31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOUT31_0_DIO5_ONE = @as(c_uint, 0x00000020);
pub const GPIO_DOUT31_0_DIO5_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOUT31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOUT31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOUT31_0_DIO4_ONE = @as(c_uint, 0x00000010);
pub const GPIO_DOUT31_0_DIO4_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOUT31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOUT31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOUT31_0_DIO3_ONE = @as(c_uint, 0x00000008);
pub const GPIO_DOUT31_0_DIO3_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOUT31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOUT31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOUT31_0_DIO2_ONE = @as(c_uint, 0x00000004);
pub const GPIO_DOUT31_0_DIO2_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOUT31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOUT31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOUT31_0_DIO1_ONE = @as(c_uint, 0x00000002);
pub const GPIO_DOUT31_0_DIO1_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUT31_0_DIO0_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT31_0_DIO0_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOUTSET31_0_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOUTSET31_0_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOUTSET31_0_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOUTSET31_0_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOUTSET31_0_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOUTSET31_0_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOUTSET31_0_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOUTSET31_0_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOUTSET31_0_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOUTSET31_0_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTSET31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOUTSET31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOUTSET31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOUTSET31_0_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_DOUTSET31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOUTSET31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOUTSET31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOUTSET31_0_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_DOUTSET31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOUTSET31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOUTSET31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOUTSET31_0_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_DOUTSET31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOUTSET31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOUTSET31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOUTSET31_0_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_DOUTSET31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOUTSET31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOUTSET31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOUTSET31_0_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_DOUTSET31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOUTSET31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOUTSET31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOUTSET31_0_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_DOUTSET31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOUTSET31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOUTSET31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOUTSET31_0_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_DOUTSET31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTSET31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTSET31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOUTSET31_0_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_DOUTSET31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOUTSET31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOUTSET31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOUTSET31_0_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_DOUTSET31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOUTSET31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOUTSET31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOUTSET31_0_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_DOUTSET31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOUTSET31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOUTSET31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOUTSET31_0_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_DOUTSET31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOUTSET31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOUTSET31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOUTSET31_0_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_DOUTSET31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOUTSET31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOUTSET31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOUTSET31_0_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_DOUTSET31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOUTSET31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOUTSET31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOUTSET31_0_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_DOUTSET31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOUTSET31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOUTSET31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOUTSET31_0_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_DOUTSET31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTSET31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTSET31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUTSET31_0_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_DOUTSET31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOUTCLR31_0_DIO25_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOUTCLR31_0_DIO24_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOUTCLR31_0_DIO23_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOUTCLR31_0_DIO22_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOUTCLR31_0_DIO21_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOUTCLR31_0_DIO20_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOUTCLR31_0_DIO19_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOUTCLR31_0_DIO18_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOUTCLR31_0_DIO17_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOUTCLR31_0_DIO16_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTCLR31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOUTCLR31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOUTCLR31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOUTCLR31_0_DIO15_CLR = @as(c_uint, 0x00008000);
pub const GPIO_DOUTCLR31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOUTCLR31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOUTCLR31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOUTCLR31_0_DIO14_CLR = @as(c_uint, 0x00004000);
pub const GPIO_DOUTCLR31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOUTCLR31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOUTCLR31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOUTCLR31_0_DIO13_CLR = @as(c_uint, 0x00002000);
pub const GPIO_DOUTCLR31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOUTCLR31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOUTCLR31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOUTCLR31_0_DIO12_CLR = @as(c_uint, 0x00001000);
pub const GPIO_DOUTCLR31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOUTCLR31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOUTCLR31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOUTCLR31_0_DIO11_CLR = @as(c_uint, 0x00000800);
pub const GPIO_DOUTCLR31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOUTCLR31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOUTCLR31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOUTCLR31_0_DIO10_CLR = @as(c_uint, 0x00000400);
pub const GPIO_DOUTCLR31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOUTCLR31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOUTCLR31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOUTCLR31_0_DIO9_CLR = @as(c_uint, 0x00000200);
pub const GPIO_DOUTCLR31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTCLR31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTCLR31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOUTCLR31_0_DIO8_CLR = @as(c_uint, 0x00000100);
pub const GPIO_DOUTCLR31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOUTCLR31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOUTCLR31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOUTCLR31_0_DIO7_CLR = @as(c_uint, 0x00000080);
pub const GPIO_DOUTCLR31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOUTCLR31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOUTCLR31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOUTCLR31_0_DIO6_CLR = @as(c_uint, 0x00000040);
pub const GPIO_DOUTCLR31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOUTCLR31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOUTCLR31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOUTCLR31_0_DIO5_CLR = @as(c_uint, 0x00000020);
pub const GPIO_DOUTCLR31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOUTCLR31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOUTCLR31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOUTCLR31_0_DIO4_CLR = @as(c_uint, 0x00000010);
pub const GPIO_DOUTCLR31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOUTCLR31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOUTCLR31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOUTCLR31_0_DIO3_CLR = @as(c_uint, 0x00000008);
pub const GPIO_DOUTCLR31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOUTCLR31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOUTCLR31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOUTCLR31_0_DIO2_CLR = @as(c_uint, 0x00000004);
pub const GPIO_DOUTCLR31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOUTCLR31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOUTCLR31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOUTCLR31_0_DIO1_CLR = @as(c_uint, 0x00000002);
pub const GPIO_DOUTCLR31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTCLR31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTCLR31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUTCLR31_0_DIO0_CLR = @as(c_uint, 0x00000001);
pub const GPIO_DOUTCLR31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOUTTGL31_0_DIO25_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL31_0_DIO24_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOUTTGL31_0_DIO23_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOUTTGL31_0_DIO22_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOUTTGL31_0_DIO21_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOUTTGL31_0_DIO20_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOUTTGL31_0_DIO19_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOUTTGL31_0_DIO18_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOUTTGL31_0_DIO17_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL31_0_DIO16_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOUTTGL31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOUTTGL31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOUTTGL31_0_DIO15_TOGGLE = @as(c_uint, 0x00008000);
pub const GPIO_DOUTTGL31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOUTTGL31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOUTTGL31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOUTTGL31_0_DIO14_TOGGLE = @as(c_uint, 0x00004000);
pub const GPIO_DOUTTGL31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOUTTGL31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOUTTGL31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOUTTGL31_0_DIO13_TOGGLE = @as(c_uint, 0x00002000);
pub const GPIO_DOUTTGL31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOUTTGL31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOUTTGL31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOUTTGL31_0_DIO12_TOGGLE = @as(c_uint, 0x00001000);
pub const GPIO_DOUTTGL31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOUTTGL31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOUTTGL31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOUTTGL31_0_DIO11_TOGGLE = @as(c_uint, 0x00000800);
pub const GPIO_DOUTTGL31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOUTTGL31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOUTTGL31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOUTTGL31_0_DIO10_TOGGLE = @as(c_uint, 0x00000400);
pub const GPIO_DOUTTGL31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOUTTGL31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOUTTGL31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOUTTGL31_0_DIO9_TOGGLE = @as(c_uint, 0x00000200);
pub const GPIO_DOUTTGL31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL31_0_DIO8_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOUTTGL31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOUTTGL31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOUTTGL31_0_DIO7_TOGGLE = @as(c_uint, 0x00000080);
pub const GPIO_DOUTTGL31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOUTTGL31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOUTTGL31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOUTTGL31_0_DIO6_TOGGLE = @as(c_uint, 0x00000040);
pub const GPIO_DOUTTGL31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOUTTGL31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOUTTGL31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOUTTGL31_0_DIO5_TOGGLE = @as(c_uint, 0x00000020);
pub const GPIO_DOUTTGL31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOUTTGL31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOUTTGL31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOUTTGL31_0_DIO4_TOGGLE = @as(c_uint, 0x00000010);
pub const GPIO_DOUTTGL31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOUTTGL31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOUTTGL31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOUTTGL31_0_DIO3_TOGGLE = @as(c_uint, 0x00000008);
pub const GPIO_DOUTTGL31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOUTTGL31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOUTTGL31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOUTTGL31_0_DIO2_TOGGLE = @as(c_uint, 0x00000004);
pub const GPIO_DOUTTGL31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOUTTGL31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOUTTGL31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOUTTGL31_0_DIO1_TOGGLE = @as(c_uint, 0x00000002);
pub const GPIO_DOUTTGL31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL31_0_DIO0_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL3_0_DIO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL3_0_DIO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL3_0_DIO3_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL3_0_DIO3_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL3_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL3_0_DIO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL3_0_DIO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL3_0_DIO2_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL3_0_DIO2_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL3_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL3_0_DIO1 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL3_0_DIO1_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL3_0_DIO1_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL3_0_DIO1_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL3_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL3_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL3_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL3_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL3_0_DIO0_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL3_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL7_4_DIO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL7_4_DIO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL7_4_DIO7_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL7_4_DIO7_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL7_4_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL7_4_DIO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL7_4_DIO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL7_4_DIO6_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL7_4_DIO6_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL7_4_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL7_4_DIO5 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL7_4_DIO5_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL7_4_DIO5_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL7_4_DIO5_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL7_4_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL7_4_DIO4 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL7_4_DIO4_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL7_4_DIO4_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL7_4_DIO4_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL7_4_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL11_8_DIO11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL11_8_DIO11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL11_8_DIO11_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL11_8_DIO11_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL11_8_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL11_8_DIO10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL11_8_DIO10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL11_8_DIO10_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL11_8_DIO10_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL11_8_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL11_8_DIO9 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL11_8_DIO9_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL11_8_DIO9_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL11_8_DIO9_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL11_8_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL11_8_DIO8 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL11_8_DIO8_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL11_8_DIO8_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL11_8_DIO8_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL11_8_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL15_12_DIO15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL15_12_DIO15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL15_12_DIO15_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL15_12_DIO15_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL15_12_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL15_12_DIO14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL15_12_DIO14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL15_12_DIO14_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL15_12_DIO14_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL15_12_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL15_12_DIO13 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL15_12_DIO13_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL15_12_DIO13_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL15_12_DIO13_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL15_12_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL15_12_DIO12 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL15_12_DIO12_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL15_12_DIO12_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL15_12_DIO12_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL15_12_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL19_16_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL19_16_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL19_16_DIO19_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL19_16_DIO19_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL19_16_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL19_16_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL19_16_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL19_16_DIO18_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL19_16_DIO18_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL19_16_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL19_16_DIO17 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL19_16_DIO17_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL19_16_DIO17_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL19_16_DIO17_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL19_16_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL19_16_DIO16 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL19_16_DIO16_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL19_16_DIO16_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL19_16_DIO16_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL19_16_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL23_20_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL23_20_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL23_20_DIO23_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL23_20_DIO23_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOUTTGL23_20_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL23_20_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL23_20_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL23_20_DIO22_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL23_20_DIO22_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOUTTGL23_20_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL23_20_DIO21 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL23_20_DIO21_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL23_20_DIO21_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL23_20_DIO21_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL23_20_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL23_20_DIO20 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL23_20_DIO20_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL23_20_DIO20_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL23_20_DIO20_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL23_20_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL27_24_DIO25 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL27_24_DIO25_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL27_24_DIO25_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL27_24_DIO25_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL27_24_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL27_24_DIO24 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL27_24_DIO24_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL27_24_DIO24_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL27_24_DIO24_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL27_24_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOE3_0_DIO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE3_0_DIO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE3_0_DIO3_S = @as(c_uint, 24);
pub const GPIO_DOE3_0_DIO3_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE3_0_DIO3_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE3_0_DIO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE3_0_DIO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE3_0_DIO2_S = @as(c_uint, 16);
pub const GPIO_DOE3_0_DIO2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE3_0_DIO2_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE3_0_DIO1 = @as(c_uint, 0x00000100);
pub const GPIO_DOE3_0_DIO1_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE3_0_DIO1_S = @as(c_uint, 8);
pub const GPIO_DOE3_0_DIO1_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE3_0_DIO1_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE3_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOE3_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE3_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOE3_0_DIO0_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE3_0_DIO0_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE7_4_DIO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE7_4_DIO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE7_4_DIO7_S = @as(c_uint, 24);
pub const GPIO_DOE7_4_DIO7_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE7_4_DIO7_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE7_4_DIO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE7_4_DIO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE7_4_DIO6_S = @as(c_uint, 16);
pub const GPIO_DOE7_4_DIO6_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE7_4_DIO6_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE7_4_DIO5 = @as(c_uint, 0x00000100);
pub const GPIO_DOE7_4_DIO5_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE7_4_DIO5_S = @as(c_uint, 8);
pub const GPIO_DOE7_4_DIO5_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE7_4_DIO5_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE7_4_DIO4 = @as(c_uint, 0x00000001);
pub const GPIO_DOE7_4_DIO4_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE7_4_DIO4_S = @as(c_uint, 0);
pub const GPIO_DOE7_4_DIO4_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE7_4_DIO4_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE11_8_DIO11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE11_8_DIO11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE11_8_DIO11_S = @as(c_uint, 24);
pub const GPIO_DOE11_8_DIO11_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE11_8_DIO11_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE11_8_DIO10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE11_8_DIO10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE11_8_DIO10_S = @as(c_uint, 16);
pub const GPIO_DOE11_8_DIO10_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE11_8_DIO10_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE11_8_DIO9 = @as(c_uint, 0x00000100);
pub const GPIO_DOE11_8_DIO9_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE11_8_DIO9_S = @as(c_uint, 8);
pub const GPIO_DOE11_8_DIO9_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE11_8_DIO9_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE11_8_DIO8 = @as(c_uint, 0x00000001);
pub const GPIO_DOE11_8_DIO8_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE11_8_DIO8_S = @as(c_uint, 0);
pub const GPIO_DOE11_8_DIO8_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE11_8_DIO8_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE15_12_DIO15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE15_12_DIO15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE15_12_DIO15_S = @as(c_uint, 24);
pub const GPIO_DOE15_12_DIO15_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE15_12_DIO15_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE15_12_DIO14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE15_12_DIO14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE15_12_DIO14_S = @as(c_uint, 16);
pub const GPIO_DOE15_12_DIO14_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE15_12_DIO14_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE15_12_DIO13 = @as(c_uint, 0x00000100);
pub const GPIO_DOE15_12_DIO13_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE15_12_DIO13_S = @as(c_uint, 8);
pub const GPIO_DOE15_12_DIO13_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE15_12_DIO13_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE15_12_DIO12 = @as(c_uint, 0x00000001);
pub const GPIO_DOE15_12_DIO12_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE15_12_DIO12_S = @as(c_uint, 0);
pub const GPIO_DOE15_12_DIO12_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE15_12_DIO12_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE19_16_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE19_16_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE19_16_DIO19_S = @as(c_uint, 24);
pub const GPIO_DOE19_16_DIO19_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE19_16_DIO19_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE19_16_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE19_16_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE19_16_DIO18_S = @as(c_uint, 16);
pub const GPIO_DOE19_16_DIO18_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE19_16_DIO18_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE19_16_DIO17 = @as(c_uint, 0x00000100);
pub const GPIO_DOE19_16_DIO17_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE19_16_DIO17_S = @as(c_uint, 8);
pub const GPIO_DOE19_16_DIO17_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE19_16_DIO17_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE19_16_DIO16 = @as(c_uint, 0x00000001);
pub const GPIO_DOE19_16_DIO16_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE19_16_DIO16_S = @as(c_uint, 0);
pub const GPIO_DOE19_16_DIO16_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE19_16_DIO16_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE23_20_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE23_20_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE23_20_DIO23_S = @as(c_uint, 24);
pub const GPIO_DOE23_20_DIO23_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE23_20_DIO23_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE23_20_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE23_20_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE23_20_DIO22_S = @as(c_uint, 16);
pub const GPIO_DOE23_20_DIO22_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE23_20_DIO22_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE23_20_DIO21 = @as(c_uint, 0x00000100);
pub const GPIO_DOE23_20_DIO21_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE23_20_DIO21_S = @as(c_uint, 8);
pub const GPIO_DOE23_20_DIO21_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE23_20_DIO21_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE23_20_DIO20 = @as(c_uint, 0x00000001);
pub const GPIO_DOE23_20_DIO20_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE23_20_DIO20_S = @as(c_uint, 0);
pub const GPIO_DOE23_20_DIO20_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE23_20_DIO20_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE27_24_DIO25 = @as(c_uint, 0x00000100);
pub const GPIO_DOE27_24_DIO25_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE27_24_DIO25_S = @as(c_uint, 8);
pub const GPIO_DOE27_24_DIO25_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE27_24_DIO25_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE27_24_DIO24 = @as(c_uint, 0x00000001);
pub const GPIO_DOE27_24_DIO24_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE27_24_DIO24_S = @as(c_uint, 0);
pub const GPIO_DOE27_24_DIO24_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE27_24_DIO24_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOE31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOE31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOE31_0_DIO25_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOE31_0_DIO25_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOE31_0_DIO24_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOE31_0_DIO24_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOE31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOE31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOE31_0_DIO23_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOE31_0_DIO23_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOE31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOE31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOE31_0_DIO22_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOE31_0_DIO22_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOE31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOE31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOE31_0_DIO21_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOE31_0_DIO21_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOE31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOE31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOE31_0_DIO20_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOE31_0_DIO20_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOE31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOE31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOE31_0_DIO19_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOE31_0_DIO19_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOE31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOE31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOE31_0_DIO18_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOE31_0_DIO18_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOE31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOE31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOE31_0_DIO17_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOE31_0_DIO17_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOE31_0_DIO16_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOE31_0_DIO16_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOE31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOE31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOE31_0_DIO15_EN = @as(c_uint, 0x00008000);
pub const GPIO_DOE31_0_DIO15_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOE31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOE31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOE31_0_DIO14_EN = @as(c_uint, 0x00004000);
pub const GPIO_DOE31_0_DIO14_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOE31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOE31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOE31_0_DIO13_EN = @as(c_uint, 0x00002000);
pub const GPIO_DOE31_0_DIO13_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOE31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOE31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOE31_0_DIO12_EN = @as(c_uint, 0x00001000);
pub const GPIO_DOE31_0_DIO12_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOE31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOE31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOE31_0_DIO11_EN = @as(c_uint, 0x00000800);
pub const GPIO_DOE31_0_DIO11_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOE31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOE31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOE31_0_DIO10_EN = @as(c_uint, 0x00000400);
pub const GPIO_DOE31_0_DIO10_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOE31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOE31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOE31_0_DIO9_EN = @as(c_uint, 0x00000200);
pub const GPIO_DOE31_0_DIO9_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOE31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOE31_0_DIO8_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE31_0_DIO8_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOE31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOE31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOE31_0_DIO7_EN = @as(c_uint, 0x00000080);
pub const GPIO_DOE31_0_DIO7_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOE31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOE31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOE31_0_DIO6_EN = @as(c_uint, 0x00000040);
pub const GPIO_DOE31_0_DIO6_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOE31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOE31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOE31_0_DIO5_EN = @as(c_uint, 0x00000020);
pub const GPIO_DOE31_0_DIO5_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOE31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOE31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOE31_0_DIO4_EN = @as(c_uint, 0x00000010);
pub const GPIO_DOE31_0_DIO4_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOE31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOE31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOE31_0_DIO3_EN = @as(c_uint, 0x00000008);
pub const GPIO_DOE31_0_DIO3_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOE31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOE31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOE31_0_DIO2_EN = @as(c_uint, 0x00000004);
pub const GPIO_DOE31_0_DIO2_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOE31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOE31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOE31_0_DIO1_EN = @as(c_uint, 0x00000002);
pub const GPIO_DOE31_0_DIO1_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOE31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOE31_0_DIO0_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE31_0_DIO0_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOESET31_0_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOESET31_0_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOESET31_0_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOESET31_0_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOESET31_0_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOESET31_0_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOESET31_0_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOESET31_0_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOESET31_0_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOESET31_0_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOESET31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOESET31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOESET31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOESET31_0_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_DOESET31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOESET31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOESET31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOESET31_0_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_DOESET31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOESET31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOESET31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOESET31_0_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_DOESET31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOESET31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOESET31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOESET31_0_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_DOESET31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOESET31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOESET31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOESET31_0_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_DOESET31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOESET31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOESET31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOESET31_0_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_DOESET31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOESET31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOESET31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOESET31_0_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_DOESET31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOESET31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOESET31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOESET31_0_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_DOESET31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOESET31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOESET31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOESET31_0_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_DOESET31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOESET31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOESET31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOESET31_0_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_DOESET31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOESET31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOESET31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOESET31_0_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_DOESET31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOESET31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOESET31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOESET31_0_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_DOESET31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOESET31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOESET31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOESET31_0_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_DOESET31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOESET31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOESET31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOESET31_0_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_DOESET31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOESET31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOESET31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOESET31_0_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_DOESET31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOESET31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOESET31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOESET31_0_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_DOESET31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOECLR31_0_DIO25_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOECLR31_0_DIO24_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOECLR31_0_DIO23_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOECLR31_0_DIO22_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOECLR31_0_DIO21_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOECLR31_0_DIO20_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOECLR31_0_DIO19_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOECLR31_0_DIO18_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOECLR31_0_DIO17_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOECLR31_0_DIO16_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOECLR31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOECLR31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOECLR31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOECLR31_0_DIO15_CLR = @as(c_uint, 0x00008000);
pub const GPIO_DOECLR31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOECLR31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOECLR31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOECLR31_0_DIO14_CLR = @as(c_uint, 0x00004000);
pub const GPIO_DOECLR31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOECLR31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOECLR31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOECLR31_0_DIO13_CLR = @as(c_uint, 0x00002000);
pub const GPIO_DOECLR31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOECLR31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOECLR31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOECLR31_0_DIO12_CLR = @as(c_uint, 0x00001000);
pub const GPIO_DOECLR31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOECLR31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOECLR31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOECLR31_0_DIO11_CLR = @as(c_uint, 0x00000800);
pub const GPIO_DOECLR31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOECLR31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOECLR31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOECLR31_0_DIO10_CLR = @as(c_uint, 0x00000400);
pub const GPIO_DOECLR31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOECLR31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOECLR31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOECLR31_0_DIO9_CLR = @as(c_uint, 0x00000200);
pub const GPIO_DOECLR31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOECLR31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOECLR31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOECLR31_0_DIO8_CLR = @as(c_uint, 0x00000100);
pub const GPIO_DOECLR31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOECLR31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOECLR31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOECLR31_0_DIO7_CLR = @as(c_uint, 0x00000080);
pub const GPIO_DOECLR31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOECLR31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOECLR31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOECLR31_0_DIO6_CLR = @as(c_uint, 0x00000040);
pub const GPIO_DOECLR31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOECLR31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOECLR31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOECLR31_0_DIO5_CLR = @as(c_uint, 0x00000020);
pub const GPIO_DOECLR31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOECLR31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOECLR31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOECLR31_0_DIO4_CLR = @as(c_uint, 0x00000010);
pub const GPIO_DOECLR31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOECLR31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOECLR31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOECLR31_0_DIO3_CLR = @as(c_uint, 0x00000008);
pub const GPIO_DOECLR31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOECLR31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOECLR31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOECLR31_0_DIO2_CLR = @as(c_uint, 0x00000004);
pub const GPIO_DOECLR31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOECLR31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOECLR31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOECLR31_0_DIO1_CLR = @as(c_uint, 0x00000002);
pub const GPIO_DOECLR31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOECLR31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOECLR31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOECLR31_0_DIO0_CLR = @as(c_uint, 0x00000001);
pub const GPIO_DOECLR31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOETGL31_0_DIO25_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOETGL31_0_DIO24_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOETGL31_0_DIO23_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOETGL31_0_DIO22_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOETGL31_0_DIO21_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOETGL31_0_DIO20_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOETGL31_0_DIO19_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOETGL31_0_DIO18_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOETGL31_0_DIO17_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOETGL31_0_DIO16_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DOETGL31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOETGL31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOETGL31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOETGL31_0_DIO15_TOGGLE = @as(c_uint, 0x00008000);
pub const GPIO_DOETGL31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOETGL31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOETGL31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOETGL31_0_DIO14_TOGGLE = @as(c_uint, 0x00004000);
pub const GPIO_DOETGL31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOETGL31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOETGL31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOETGL31_0_DIO13_TOGGLE = @as(c_uint, 0x00002000);
pub const GPIO_DOETGL31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOETGL31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOETGL31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOETGL31_0_DIO12_TOGGLE = @as(c_uint, 0x00001000);
pub const GPIO_DOETGL31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOETGL31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOETGL31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOETGL31_0_DIO11_TOGGLE = @as(c_uint, 0x00000800);
pub const GPIO_DOETGL31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOETGL31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOETGL31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOETGL31_0_DIO10_TOGGLE = @as(c_uint, 0x00000400);
pub const GPIO_DOETGL31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOETGL31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOETGL31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOETGL31_0_DIO9_TOGGLE = @as(c_uint, 0x00000200);
pub const GPIO_DOETGL31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOETGL31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOETGL31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOETGL31_0_DIO8_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOETGL31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOETGL31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOETGL31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOETGL31_0_DIO7_TOGGLE = @as(c_uint, 0x00000080);
pub const GPIO_DOETGL31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOETGL31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOETGL31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOETGL31_0_DIO6_TOGGLE = @as(c_uint, 0x00000040);
pub const GPIO_DOETGL31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOETGL31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOETGL31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOETGL31_0_DIO5_TOGGLE = @as(c_uint, 0x00000020);
pub const GPIO_DOETGL31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOETGL31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOETGL31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOETGL31_0_DIO4_TOGGLE = @as(c_uint, 0x00000010);
pub const GPIO_DOETGL31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOETGL31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOETGL31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOETGL31_0_DIO3_TOGGLE = @as(c_uint, 0x00000008);
pub const GPIO_DOETGL31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOETGL31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOETGL31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOETGL31_0_DIO2_TOGGLE = @as(c_uint, 0x00000004);
pub const GPIO_DOETGL31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOETGL31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOETGL31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOETGL31_0_DIO1_TOGGLE = @as(c_uint, 0x00000002);
pub const GPIO_DOETGL31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOETGL31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOETGL31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOETGL31_0_DIO0_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOETGL31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DIN3_0_DIO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN3_0_DIO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN3_0_DIO3_S = @as(c_uint, 24);
pub const GPIO_DIN3_0_DIO3_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN3_0_DIO3_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN3_0_DIO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN3_0_DIO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN3_0_DIO2_S = @as(c_uint, 16);
pub const GPIO_DIN3_0_DIO2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN3_0_DIO2_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN3_0_DIO1 = @as(c_uint, 0x00000100);
pub const GPIO_DIN3_0_DIO1_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN3_0_DIO1_S = @as(c_uint, 8);
pub const GPIO_DIN3_0_DIO1_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN3_0_DIO1_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN3_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DIN3_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN3_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DIN3_0_DIO0_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN3_0_DIO0_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN7_4_DIO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN7_4_DIO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN7_4_DIO7_S = @as(c_uint, 24);
pub const GPIO_DIN7_4_DIO7_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN7_4_DIO7_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN7_4_DIO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN7_4_DIO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN7_4_DIO6_S = @as(c_uint, 16);
pub const GPIO_DIN7_4_DIO6_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN7_4_DIO6_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN7_4_DIO5 = @as(c_uint, 0x00000100);
pub const GPIO_DIN7_4_DIO5_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN7_4_DIO5_S = @as(c_uint, 8);
pub const GPIO_DIN7_4_DIO5_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN7_4_DIO5_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN7_4_DIO4 = @as(c_uint, 0x00000001);
pub const GPIO_DIN7_4_DIO4_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN7_4_DIO4_S = @as(c_uint, 0);
pub const GPIO_DIN7_4_DIO4_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN7_4_DIO4_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN11_8_DIO11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN11_8_DIO11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN11_8_DIO11_S = @as(c_uint, 24);
pub const GPIO_DIN11_8_DIO11_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN11_8_DIO11_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN11_8_DIO10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN11_8_DIO10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN11_8_DIO10_S = @as(c_uint, 16);
pub const GPIO_DIN11_8_DIO10_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN11_8_DIO10_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN11_8_DIO9 = @as(c_uint, 0x00000100);
pub const GPIO_DIN11_8_DIO9_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN11_8_DIO9_S = @as(c_uint, 8);
pub const GPIO_DIN11_8_DIO9_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN11_8_DIO9_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN11_8_DIO8 = @as(c_uint, 0x00000001);
pub const GPIO_DIN11_8_DIO8_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN11_8_DIO8_S = @as(c_uint, 0);
pub const GPIO_DIN11_8_DIO8_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN11_8_DIO8_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN15_12_DIO15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN15_12_DIO15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN15_12_DIO15_S = @as(c_uint, 24);
pub const GPIO_DIN15_12_DIO15_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN15_12_DIO15_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN15_12_DIO14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN15_12_DIO14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN15_12_DIO14_S = @as(c_uint, 16);
pub const GPIO_DIN15_12_DIO14_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN15_12_DIO14_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN15_12_DIO13 = @as(c_uint, 0x00000100);
pub const GPIO_DIN15_12_DIO13_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN15_12_DIO13_S = @as(c_uint, 8);
pub const GPIO_DIN15_12_DIO13_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN15_12_DIO13_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN15_12_DIO12 = @as(c_uint, 0x00000001);
pub const GPIO_DIN15_12_DIO12_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN15_12_DIO12_S = @as(c_uint, 0);
pub const GPIO_DIN15_12_DIO12_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN15_12_DIO12_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN19_16_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN19_16_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN19_16_DIO19_S = @as(c_uint, 24);
pub const GPIO_DIN19_16_DIO19_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN19_16_DIO19_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN19_16_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN19_16_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN19_16_DIO18_S = @as(c_uint, 16);
pub const GPIO_DIN19_16_DIO18_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN19_16_DIO18_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN19_16_DIO17 = @as(c_uint, 0x00000100);
pub const GPIO_DIN19_16_DIO17_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN19_16_DIO17_S = @as(c_uint, 8);
pub const GPIO_DIN19_16_DIO17_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN19_16_DIO17_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN19_16_DIO16 = @as(c_uint, 0x00000001);
pub const GPIO_DIN19_16_DIO16_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN19_16_DIO16_S = @as(c_uint, 0);
pub const GPIO_DIN19_16_DIO16_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN19_16_DIO16_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN23_20_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN23_20_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN23_20_DIO23_S = @as(c_uint, 24);
pub const GPIO_DIN23_20_DIO23_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN23_20_DIO23_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN23_20_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN23_20_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN23_20_DIO22_S = @as(c_uint, 16);
pub const GPIO_DIN23_20_DIO22_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN23_20_DIO22_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN23_20_DIO21 = @as(c_uint, 0x00000100);
pub const GPIO_DIN23_20_DIO21_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN23_20_DIO21_S = @as(c_uint, 8);
pub const GPIO_DIN23_20_DIO21_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN23_20_DIO21_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN23_20_DIO20 = @as(c_uint, 0x00000001);
pub const GPIO_DIN23_20_DIO20_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN23_20_DIO20_S = @as(c_uint, 0);
pub const GPIO_DIN23_20_DIO20_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN23_20_DIO20_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN27_24_DIO25 = @as(c_uint, 0x00000100);
pub const GPIO_DIN27_24_DIO25_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN27_24_DIO25_S = @as(c_uint, 8);
pub const GPIO_DIN27_24_DIO25_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN27_24_DIO25_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN27_24_DIO24 = @as(c_uint, 0x00000001);
pub const GPIO_DIN27_24_DIO24_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN27_24_DIO24_S = @as(c_uint, 0);
pub const GPIO_DIN27_24_DIO24_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN27_24_DIO24_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DIN31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DIN31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DIN31_0_DIO25_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const GPIO_DIN31_0_DIO25_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DIN31_0_DIO24_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const GPIO_DIN31_0_DIO24_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DIN31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DIN31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DIN31_0_DIO23_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const GPIO_DIN31_0_DIO23_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DIN31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DIN31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DIN31_0_DIO22_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const GPIO_DIN31_0_DIO22_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DIN31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DIN31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DIN31_0_DIO21_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const GPIO_DIN31_0_DIO21_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DIN31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DIN31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DIN31_0_DIO20_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const GPIO_DIN31_0_DIO20_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DIN31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DIN31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DIN31_0_DIO19_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hexadecimal);
pub const GPIO_DIN31_0_DIO19_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DIN31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DIN31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DIN31_0_DIO18_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const GPIO_DIN31_0_DIO18_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DIN31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DIN31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DIN31_0_DIO17_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const GPIO_DIN31_0_DIO17_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DIN31_0_DIO16_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const GPIO_DIN31_0_DIO16_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DIN31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DIN31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DIN31_0_DIO15_ONE = @as(c_uint, 0x00008000);
pub const GPIO_DIN31_0_DIO15_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DIN31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DIN31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DIN31_0_DIO14_ONE = @as(c_uint, 0x00004000);
pub const GPIO_DIN31_0_DIO14_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DIN31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DIN31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DIN31_0_DIO13_ONE = @as(c_uint, 0x00002000);
pub const GPIO_DIN31_0_DIO13_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DIN31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DIN31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DIN31_0_DIO12_ONE = @as(c_uint, 0x00001000);
pub const GPIO_DIN31_0_DIO12_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DIN31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DIN31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DIN31_0_DIO11_ONE = @as(c_uint, 0x00000800);
pub const GPIO_DIN31_0_DIO11_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DIN31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DIN31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DIN31_0_DIO10_ONE = @as(c_uint, 0x00000400);
pub const GPIO_DIN31_0_DIO10_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DIN31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DIN31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DIN31_0_DIO9_ONE = @as(c_uint, 0x00000200);
pub const GPIO_DIN31_0_DIO9_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DIN31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DIN31_0_DIO8_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN31_0_DIO8_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DIN31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DIN31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DIN31_0_DIO7_ONE = @as(c_uint, 0x00000080);
pub const GPIO_DIN31_0_DIO7_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DIN31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DIN31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DIN31_0_DIO6_ONE = @as(c_uint, 0x00000040);
pub const GPIO_DIN31_0_DIO6_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DIN31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DIN31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DIN31_0_DIO5_ONE = @as(c_uint, 0x00000020);
pub const GPIO_DIN31_0_DIO5_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DIN31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DIN31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DIN31_0_DIO4_ONE = @as(c_uint, 0x00000010);
pub const GPIO_DIN31_0_DIO4_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DIN31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DIN31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DIN31_0_DIO3_ONE = @as(c_uint, 0x00000008);
pub const GPIO_DIN31_0_DIO3_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DIN31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DIN31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DIN31_0_DIO2_ONE = @as(c_uint, 0x00000004);
pub const GPIO_DIN31_0_DIO2_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DIN31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DIN31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DIN31_0_DIO1_ONE = @as(c_uint, 0x00000002);
pub const GPIO_DIN31_0_DIO1_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DIN31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DIN31_0_DIO0_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN31_0_DIO0_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_EVTCFG_EVTEN = @as(c_uint, 0x00000100);
pub const GPIO_EVTCFG_EVTEN_M = @as(c_uint, 0x00000100);
pub const GPIO_EVTCFG_EVTEN_S = @as(c_uint, 8);
pub const GPIO_EVTCFG_EVTEN_EN = @as(c_uint, 0x00000100);
pub const GPIO_EVTCFG_EVTEN_DIS = @as(c_uint, 0x00000000);
pub const GPIO_EVTCFG_DIOSEL_W = @as(c_uint, 6);
pub const GPIO_EVTCFG_DIOSEL_M = @as(c_uint, 0x0000003F);
pub const GPIO_EVTCFG_DIOSEL_S = @as(c_uint, 0);
pub const GPIO_EVTCFG_DIOSEL_MAXIMUM = @as(c_uint, 0x0000003F);
pub const GPIO_EVTCFG_DIOSEL_MINIMUM = @as(c_uint, 0x00000000);
