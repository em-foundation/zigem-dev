pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):79:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):85:9
pub const __FLT16_DENORM_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):108:9
pub const __FLT16_EPSILON__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):112:9
pub const __FLT16_MAX__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):118:9
pub const __FLT16_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):121:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):183:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):205:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):213:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 16);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "16.0.6 (https://github.com/ziglang/zig-bootstrap 1dda86241204c4649f668d46b6a37feed707c7b4)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 16.0.6 (https://github.com/ziglang/zig-bootstrap 1dda86241204c4649f668d46b6a37feed707c7b4)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _ILP32 = @as(c_int, 1);
pub const __ILP32__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 32);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 32);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 32);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 32);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 4);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 4);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 4);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __PTRDIFF_TYPE__ = c_int;
pub const __PTRDIFF_FMTd__ = "d";
pub const __PTRDIFF_FMTi__ = "i";
pub const __INTPTR_TYPE__ = c_int;
pub const __INTPTR_FMTd__ = "d";
pub const __INTPTR_FMTi__ = "i";
pub const __SIZE_TYPE__ = c_uint;
pub const __SIZE_FMTo__ = "o";
pub const __SIZE_FMTu__ = "u";
pub const __SIZE_FMTx__ = "x";
pub const __SIZE_FMTX__ = "X";
pub const __WCHAR_TYPE__ = c_uint;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_uint;
pub const __UINTPTR_FMTo__ = "o";
pub const __UINTPTR_FMTu__ = "u";
pub const __UINTPTR_FMTx__ = "x";
pub const __UINTPTR_FMTX__ = "X";
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 15);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 53);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __LDBL_MAX_EXP__ = @as(c_int, 1024);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = @as(c_int, 32);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 8);
pub const __CHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __ARMEL__ = @as(c_int, 1);
pub const __arm = @as(c_int, 1);
pub const __arm__ = @as(c_int, 1);
pub const __ELF__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __ARM_ARCH_4T__ = @as(c_int, 1);
pub const __ARM_ARCH = @as(c_int, 4);
pub const __ARM_ARCH_ISA_ARM = @as(c_int, 1);
pub const __ARM_ARCH_ISA_THUMB = @as(c_int, 1);
pub const __ARM_32BIT_STATE = @as(c_int, 1);
pub const __ARM_FEATURE_UNALIGNED = @as(c_int, 1);
pub const __ARM_FP = @as(c_int, 0xc);
pub const __ARM_ACLE = @as(c_int, 200);
pub const __ARM_FP16_FORMAT_IEEE = @as(c_int, 1);
pub const __ARM_FP16_ARGS = @as(c_int, 1);
pub const __ARM_EABI__ = @as(c_int, 1);
pub const __ARM_PCS = @as(c_int, 1);
pub const __THUMBEL__ = @as(c_int, 1);
pub const __thumb__ = @as(c_int, 1);
pub const __APCS_32__ = @as(c_int, 1);
pub const __VFP_FP__ = @as(c_int, 1);
pub const __ARM_VFPV2__ = @as(c_int, 1);
pub const __ARM_VFPV3__ = @as(c_int, 1);
pub const __ARM_SIZEOF_WCHAR_T = @as(c_int, 4);
pub const __ARM_SIZEOF_MINIMAL_ENUM = @as(c_int, 4);
pub const __ARM_FEATURE_DSP = @as(c_int, 1);
pub const __ARM_FEATURE_QBIT = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 0);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const __HW_IOC_H__ = "";
pub const IOC_O_DESC = @as(c_uint, 0x00000000);
pub const IOC_O_DESCEX = @as(c_uint, 0x00000004);
pub const IOC_O_DTB = @as(c_uint, 0x00000064);
pub const IOC_O_IOC0 = @as(c_uint, 0x00000100);
pub const IOC_O_IOC1 = @as(c_uint, 0x00000104);
pub const IOC_O_IOC2 = @as(c_uint, 0x00000108);
pub const IOC_O_IOC3 = @as(c_uint, 0x0000010C);
pub const IOC_O_IOC4 = @as(c_uint, 0x00000110);
pub const IOC_O_IOC5 = @as(c_uint, 0x00000114);
pub const IOC_O_IOC6 = @as(c_uint, 0x00000118);
pub const IOC_O_IOC7 = @as(c_uint, 0x0000011C);
pub const IOC_O_IOC8 = @as(c_uint, 0x00000120);
pub const IOC_O_IOC9 = @as(c_uint, 0x00000124);
pub const IOC_O_IOC10 = @as(c_uint, 0x00000128);
pub const IOC_O_IOC11 = @as(c_uint, 0x0000012C);
pub const IOC_O_IOC12 = @as(c_uint, 0x00000130);
pub const IOC_O_IOC13 = @as(c_uint, 0x00000134);
pub const IOC_O_IOC14 = @as(c_uint, 0x00000138);
pub const IOC_O_IOC15 = @as(c_uint, 0x0000013C);
pub const IOC_O_IOC16 = @as(c_uint, 0x00000140);
pub const IOC_O_IOC17 = @as(c_uint, 0x00000144);
pub const IOC_O_IOC18 = @as(c_uint, 0x00000148);
pub const IOC_O_IOC19 = @as(c_uint, 0x0000014C);
pub const IOC_O_IOC20 = @as(c_uint, 0x00000150);
pub const IOC_O_IOC21 = @as(c_uint, 0x00000154);
pub const IOC_O_IOC22 = @as(c_uint, 0x00000158);
pub const IOC_O_IOC23 = @as(c_uint, 0x0000015C);
pub const IOC_O_IOC24 = @as(c_uint, 0x00000160);
pub const IOC_O_IOC25 = @as(c_uint, 0x00000164);
pub const IOC_O_DTBCFG = @as(c_uint, 0x00000C00);
pub const IOC_O_DTBOE = @as(c_uint, 0x00000C04);
pub const IOC_O_EVTCFG = @as(c_uint, 0x00000C08);
pub const IOC_O_TEST = @as(c_uint, 0x00000C0C);
pub const IOC_O_DTBSTAT = @as(c_uint, 0x00000C10);
pub const IOC_DESC_MODID_W = @as(c_uint, 16);
pub const IOC_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hexadecimal);
pub const IOC_DESC_MODID_S = @as(c_uint, 16);
pub const IOC_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const IOC_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const IOC_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const IOC_DESC_INSTIDX_W = @as(c_uint, 4);
pub const IOC_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const IOC_DESC_INSTIDX_S = @as(c_uint, 8);
pub const IOC_DESC_MAJREV_W = @as(c_uint, 4);
pub const IOC_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const IOC_DESC_MAJREV_S = @as(c_uint, 4);
pub const IOC_DESC_MINREV_W = @as(c_uint, 4);
pub const IOC_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const IOC_DESC_MINREV_S = @as(c_uint, 0);
pub const IOC_DESCEX_NUMDTBIO_W = @as(c_uint, 4);
pub const IOC_DESCEX_NUMDTBIO_M = @as(c_uint, 0x0000F000);
pub const IOC_DESCEX_NUMDTBIO_S = @as(c_uint, 12);
pub const IOC_DESCEX_NUMDTBIO_MAXIMUM = @as(c_uint, 0x0000F000);
pub const IOC_DESCEX_NUMDTBIO_MINIMUM = @as(c_uint, 0x00000000);
pub const IOC_DESCEX_NUMHDIO_W = @as(c_uint, 5);
pub const IOC_DESCEX_NUMHDIO_M = @as(c_uint, 0x00000F80);
pub const IOC_DESCEX_NUMHDIO_S = @as(c_uint, 7);
pub const IOC_DESCEX_NUMHDIO_MAXIMUM = @as(c_uint, 0x00000F80);
pub const IOC_DESCEX_NUMHDIO_MINIMUM = @as(c_uint, 0x00000000);
pub const IOC_DESCEX_HDIO = @as(c_uint, 0x00000040);
pub const IOC_DESCEX_HDIO_M = @as(c_uint, 0x00000040);
pub const IOC_DESCEX_HDIO_S = @as(c_uint, 6);
pub const IOC_DESCEX_HDIO_PRESENT = @as(c_uint, 0x00000040);
pub const IOC_DESCEX_HDIO_ABSENT = @as(c_uint, 0x00000000);
pub const IOC_DESCEX_NUMDIO_W = @as(c_uint, 6);
pub const IOC_DESCEX_NUMDIO_M = @as(c_uint, 0x0000003F);
pub const IOC_DESCEX_NUMDIO_S = @as(c_uint, 0);
pub const IOC_DESCEX_NUMDIO_MAXIMUM = @as(c_uint, 0x0000003F);
pub const IOC_DESCEX_NUMDIO_MINIMUM = @as(c_uint, 0x00000000);
pub const IOC_DTB_SEL_W = @as(c_uint, 3);
pub const IOC_DTB_SEL_M = @as(c_uint, 0x00000007);
pub const IOC_DTB_SEL_S = @as(c_uint, 0);
pub const IOC_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC0_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC0_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC0_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC0_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC0_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC0_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC0_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC0_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC0_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC0_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC0_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC0_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC0_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC0_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC0_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC0_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC0_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC0_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC0_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC0_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC0_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC0_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC0_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC0_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC0_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC0_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC0_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC0_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC0_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC0_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC0_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC0_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC0_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC0_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC0_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC0_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC0_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC0_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC0_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC0_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC0_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC0_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC0_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC0_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC0_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC0_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC0_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC0_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC0_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC1_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC1_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC1_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC1_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC1_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC1_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC1_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC1_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC1_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC1_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC1_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC1_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC1_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC1_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC1_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC1_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC1_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC1_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC1_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC1_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC1_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC1_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC1_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC1_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC1_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC1_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC1_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC1_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC1_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC1_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC1_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC1_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC1_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC1_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC1_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC1_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC1_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC1_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC1_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC1_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC1_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC1_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC1_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC1_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC1_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC1_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC1_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC1_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC1_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC1_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC2_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC2_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC2_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC2_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC2_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC2_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC2_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC2_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC2_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC2_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC2_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC2_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC2_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC2_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC2_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC2_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC2_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC2_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC2_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC2_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC2_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC2_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC2_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC2_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC2_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC2_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC2_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC2_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC2_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC2_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC2_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC2_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC2_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC2_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC2_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC2_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC2_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC2_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC2_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC2_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC2_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC2_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC2_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC2_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC2_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC2_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC2_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC2_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC2_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC2_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC3_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC3_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC3_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC3_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC3_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC3_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC3_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC3_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC3_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC3_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC3_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC3_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC3_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC3_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC3_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC3_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC3_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC3_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC3_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC3_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC3_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC3_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC3_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC3_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC3_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC3_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC3_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC3_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC3_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC3_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC3_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC3_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC3_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC3_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC3_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC3_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC3_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC3_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC3_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC3_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC3_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC3_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC3_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC3_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC3_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC3_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC3_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC3_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC3_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC3_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC4_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC4_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC4_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC4_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC4_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC4_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC4_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC4_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC4_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC4_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC4_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC4_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC4_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC4_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC4_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC4_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC4_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC4_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC4_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC4_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC4_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC4_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC4_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC4_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC4_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC4_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC4_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC4_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC4_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC4_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC4_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC4_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC4_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC4_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC4_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC4_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC4_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC4_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC4_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC4_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC4_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC4_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC4_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC4_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC4_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC4_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC4_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC4_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC4_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC4_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC5_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC5_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC5_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC5_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC5_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC5_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC5_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC5_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC5_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC5_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC5_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC5_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC5_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC5_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC5_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC5_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC5_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC5_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC5_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC5_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC5_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC5_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC5_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC5_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC5_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC5_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC5_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC5_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC5_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC5_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC5_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC5_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC5_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC5_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC5_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC5_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC5_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC5_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC5_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC5_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC5_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC5_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC5_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC5_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC5_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC5_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC5_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC5_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC5_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC5_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC6_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC6_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC6_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC6_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC6_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC6_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC6_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC6_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC6_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC6_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC6_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC6_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC6_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC6_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC6_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC6_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC6_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC6_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC6_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC6_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC6_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC6_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC6_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC6_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC6_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC6_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC6_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC6_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC6_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC6_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC6_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC6_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC6_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC6_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC6_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC6_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC6_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC6_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC6_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC6_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC6_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC6_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC6_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC6_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC6_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC6_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC6_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC6_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC6_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC6_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC7_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC7_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC7_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC7_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC7_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC7_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC7_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC7_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC7_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC7_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC7_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC7_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC7_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC7_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC7_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC7_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC7_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC7_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC7_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC7_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC7_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC7_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC7_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC7_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC7_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC7_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC7_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC7_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC7_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC7_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC7_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC7_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC7_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC7_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC7_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC7_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC7_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC7_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC7_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC7_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC7_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC7_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC7_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC7_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC7_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC7_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC7_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC7_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC7_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC7_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC8_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC8_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC8_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC8_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC8_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC8_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC8_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC8_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC8_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC8_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC8_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC8_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC8_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC8_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC8_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC8_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC8_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC8_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC8_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC8_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC8_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC8_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC8_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC8_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC8_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC8_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC8_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC8_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC8_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC8_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC8_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC8_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC8_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC8_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC8_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC8_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC8_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC8_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC8_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC8_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC8_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC8_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC8_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC8_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC8_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC8_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC8_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC8_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC8_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC8_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC9_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC9_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC9_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC9_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC9_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC9_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC9_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC9_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC9_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC9_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC9_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC9_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC9_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC9_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC9_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC9_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC9_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC9_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC9_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC9_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC9_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC9_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC9_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC9_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC9_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC9_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC9_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC9_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC9_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC9_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC9_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC9_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC9_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC9_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC9_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC9_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC9_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC9_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC9_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC9_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC9_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC9_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC9_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC9_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC9_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC9_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC9_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC9_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC9_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC9_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC10_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC10_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC10_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC10_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC10_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC10_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC10_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC10_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC10_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC10_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC10_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC10_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC10_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC10_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC10_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC10_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC10_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC10_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC10_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC10_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC10_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC10_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC10_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC10_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC10_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC10_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC10_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC10_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC10_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC10_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC10_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC10_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC10_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC10_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC10_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC10_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC10_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC10_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC10_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC10_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC10_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC10_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC10_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC10_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC10_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC10_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC10_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC10_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC10_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC10_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC11_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC11_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC11_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC11_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC11_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC11_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC11_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC11_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC11_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC11_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC11_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC11_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC11_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC11_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC11_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC11_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC11_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC11_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC11_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC11_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC11_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC11_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC11_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC11_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC11_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC11_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC11_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC11_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC11_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC11_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC11_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC11_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC11_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC11_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC11_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC11_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC11_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC11_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC11_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC11_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC11_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC11_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC11_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC11_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC11_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC11_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC11_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC11_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC11_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC11_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC12_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC12_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC12_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC12_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC12_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC12_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC12_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC12_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC12_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC12_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC12_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC12_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC12_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC12_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC12_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC12_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC12_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC12_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC12_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC12_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC12_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC12_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC12_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC12_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC12_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC12_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC12_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC12_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC12_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC12_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC12_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC12_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC12_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC12_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC12_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC12_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC12_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC12_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC12_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC12_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC12_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC12_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC12_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC12_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC12_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC12_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC12_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC12_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC12_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC12_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC12_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC12_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC12_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC12_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC12_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC12_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC12_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC12_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC12_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC12_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC12_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC12_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC12_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC12_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC12_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC12_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC12_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC12_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC13_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC13_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC13_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC13_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC13_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC13_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC13_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC13_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC13_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC13_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC13_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC13_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC13_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC13_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC13_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC13_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC13_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC13_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC13_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC13_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC13_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC13_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC13_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC13_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC13_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC13_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC13_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC13_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC13_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC13_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC13_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC13_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC13_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC13_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC13_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC13_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC13_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC13_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC13_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC13_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC13_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC13_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC13_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC13_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC13_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC13_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC13_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC13_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC13_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC13_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC14_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC14_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC14_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC14_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC14_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC14_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC14_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC14_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC14_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC14_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC14_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC14_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC14_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC14_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC14_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC14_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC14_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC14_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC14_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC14_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC14_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC14_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC14_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC14_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC14_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC14_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC14_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC14_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC14_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC14_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC14_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC14_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC14_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC14_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC14_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC14_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC14_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC14_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC14_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC14_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC14_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC14_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC14_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC14_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC14_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC14_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC14_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC14_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC14_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC14_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC15_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC15_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC15_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC15_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC15_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC15_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC15_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC15_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC15_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC15_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC15_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC15_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC15_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC15_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC15_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC15_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC15_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC15_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC15_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC15_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC15_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC15_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC15_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC15_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC15_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC15_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC15_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC15_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC15_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC15_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC15_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC15_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC15_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC15_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC15_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC15_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC15_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC15_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC15_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC15_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC15_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC15_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC15_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC15_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC15_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC15_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC15_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC15_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC15_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC15_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC16_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC16_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC16_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC16_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC16_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC16_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC16_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC16_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC16_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC16_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC16_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC16_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC16_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC16_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC16_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC16_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC16_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC16_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC16_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC16_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC16_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC16_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC16_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC16_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC16_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC16_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC16_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC16_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC16_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC16_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC16_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC16_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC16_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC16_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC16_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC16_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC16_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC16_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC16_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC16_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC16_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC16_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC16_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC16_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC16_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC16_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC16_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC16_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC16_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC16_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC16_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC16_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC16_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC16_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC16_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC16_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC16_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC16_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC16_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC16_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC16_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC16_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC16_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC16_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC16_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC16_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC16_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC16_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC17_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC17_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC17_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC17_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC17_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC17_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC17_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC17_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC17_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC17_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC17_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC17_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC17_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC17_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC17_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC17_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC17_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC17_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC17_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC17_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC17_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC17_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC17_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC17_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC17_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC17_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC17_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC17_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC17_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC17_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC17_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC17_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC17_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC17_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC17_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC17_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC17_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC17_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC17_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC17_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC17_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC17_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC17_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC17_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC17_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC17_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC17_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC17_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC17_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC17_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC17_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC17_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC17_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC17_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC17_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC17_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC17_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC17_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC17_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC17_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC17_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC17_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC17_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC17_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC17_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC17_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC17_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC17_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC18_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC18_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC18_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC18_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC18_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC18_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC18_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC18_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC18_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC18_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC18_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC18_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC18_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC18_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC18_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC18_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC18_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC18_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC18_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC18_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC18_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC18_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC18_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC18_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC18_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC18_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC18_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC18_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC18_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC18_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC18_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC18_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC18_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC18_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC18_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC18_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC18_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC18_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC18_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC18_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC18_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC18_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC18_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC18_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC18_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC18_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC18_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC18_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC18_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC18_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC18_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC18_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC18_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC18_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC18_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC18_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC18_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC18_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC18_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC18_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC18_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC18_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC18_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC18_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC18_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC18_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC18_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC18_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC19_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC19_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC19_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC19_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC19_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC19_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC19_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC19_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC19_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC19_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC19_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC19_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC19_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC19_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC19_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC19_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC19_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC19_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC19_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC19_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC19_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC19_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC19_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC19_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC19_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC19_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC19_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC19_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC19_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC19_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC19_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC19_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC19_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC19_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC19_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC19_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC19_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC19_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC19_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC19_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC19_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC19_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC19_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC19_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC19_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC19_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC19_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC19_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC19_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC19_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC19_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC19_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC19_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC19_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC19_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC19_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC19_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC19_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC19_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC19_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC19_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC19_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC19_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC19_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC19_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC19_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC19_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC19_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC20_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC20_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC20_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC20_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC20_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC20_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC20_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC20_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC20_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC20_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC20_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC20_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC20_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC20_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC20_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC20_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC20_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC20_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC20_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC20_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC20_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC20_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC20_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC20_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC20_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC20_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC20_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC20_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC20_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC20_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC20_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC20_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC20_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC20_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC20_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC20_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC20_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC20_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC20_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC20_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC20_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC20_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC20_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC20_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC20_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC20_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC20_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC20_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC20_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC20_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC21_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC21_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC21_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC21_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC21_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC21_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC21_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC21_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC21_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC21_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC21_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC21_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC21_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC21_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC21_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC21_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC21_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC21_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC21_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC21_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC21_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC21_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC21_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC21_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC21_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC21_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC21_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC21_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC21_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC21_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC21_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC21_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC21_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC21_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC21_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC21_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC21_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC21_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC21_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC21_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC21_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC21_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC21_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC21_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC21_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC21_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC21_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC21_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC21_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC21_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC22_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC22_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC22_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC22_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC22_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC22_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC22_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC22_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC22_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC22_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC22_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC22_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC22_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC22_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC22_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC22_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC22_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC22_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC22_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC22_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC22_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC22_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC22_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC22_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC22_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC22_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC22_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC22_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC22_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC22_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC22_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC22_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC22_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC22_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC22_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC22_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC22_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC22_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC22_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC22_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC22_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC22_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC22_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC22_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC22_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC22_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC22_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC22_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC22_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC22_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC23_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC23_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC23_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC23_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC23_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC23_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC23_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC23_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC23_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC23_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC23_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC23_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC23_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC23_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC23_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC23_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC23_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC23_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC23_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC23_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC23_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC23_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC23_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC23_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC23_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC23_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC23_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC23_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC23_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC23_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC23_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC23_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC23_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC23_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC23_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC23_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC23_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC23_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC23_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC23_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC23_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC23_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC23_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC23_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC23_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC23_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC23_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC23_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC23_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC23_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC24_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC24_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC24_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC24_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC24_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC24_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC24_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC24_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC24_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC24_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC24_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC24_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC24_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC24_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC24_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC24_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC24_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC24_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC24_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC24_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC24_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC24_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC24_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC24_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC24_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC24_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC24_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC24_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC24_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC24_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC24_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC24_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC24_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC24_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC24_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC24_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC24_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC24_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC24_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC24_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC24_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC24_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC24_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC24_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC24_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC24_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC24_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC24_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC24_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC24_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC24_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC24_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC24_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC24_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC24_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC24_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC24_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC24_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC24_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC24_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC24_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC24_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC24_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC24_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC24_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC24_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC24_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC24_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC25_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC25_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC25_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC25_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const IOC_IOC25_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC25_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC25_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC25_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const IOC_IOC25_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC25_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const IOC_IOC25_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC25_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hexadecimal);
pub const IOC_IOC25_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const IOC_IOC25_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const IOC_IOC25_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const IOC_IOC25_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const IOC_IOC25_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC25_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC25_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC25_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC25_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hexadecimal);
pub const IOC_IOC25_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hexadecimal);
pub const IOC_IOC25_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hexadecimal);
pub const IOC_IOC25_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC25_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC25_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC25_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC25_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_IOC25_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC25_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC25_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC25_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_IOC25_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_IOC25_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_IOC25_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC25_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC25_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC25_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC25_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC25_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC25_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC25_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC25_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC25_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC25_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC25_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC25_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC25_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC25_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC25_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_DTBCFG_DTB0DIV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const IOC_DTBCFG_DTB0DIV_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const IOC_DTBCFG_DTB0DIV_S = @as(c_uint, 23);
pub const IOC_DTBCFG_DTB0DIV_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const IOC_DTBCFG_DTB0DIV_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBCFG_PADSEL_W = @as(c_uint, 3);
pub const IOC_DTBCFG_PADSEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hexadecimal);
pub const IOC_DTBCFG_PADSEL_S = @as(c_uint, 16);
pub const IOC_DTBCFG_PADSEL_DTB2TO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hexadecimal);
pub const IOC_DTBCFG_PADSEL_DTB5TO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hexadecimal);
pub const IOC_DTBCFG_PADSEL_DTB8TO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const IOC_DTBCFG_PADSEL_DTB11TO9 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const IOC_DTBCFG_PADSEL_DTB14TO12 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const IOC_DTBCFG_PADSEL_DTB15TO13 = @as(c_uint, 0x00000000);
pub const IOC_DTBCFG_ULLSEL_W = @as(c_uint, 5);
pub const IOC_DTBCFG_ULLSEL_M = @as(c_uint, 0x00001F00);
pub const IOC_DTBCFG_ULLSEL_S = @as(c_uint, 8);
pub const IOC_DTBCFG_SVTSEL_W = @as(c_uint, 5);
pub const IOC_DTBCFG_SVTSEL_M = @as(c_uint, 0x0000001F);
pub const IOC_DTBCFG_SVTSEL_S = @as(c_uint, 0);
pub const IOC_DTBOE_EN15 = @as(c_uint, 0x00008000);
pub const IOC_DTBOE_EN15_M = @as(c_uint, 0x00008000);
pub const IOC_DTBOE_EN15_S = @as(c_uint, 15);
pub const IOC_DTBOE_EN15_EN = @as(c_uint, 0x00008000);
pub const IOC_DTBOE_EN15_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN14 = @as(c_uint, 0x00004000);
pub const IOC_DTBOE_EN14_M = @as(c_uint, 0x00004000);
pub const IOC_DTBOE_EN14_S = @as(c_uint, 14);
pub const IOC_DTBOE_EN14_EN = @as(c_uint, 0x00004000);
pub const IOC_DTBOE_EN14_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN13 = @as(c_uint, 0x00002000);
pub const IOC_DTBOE_EN13_M = @as(c_uint, 0x00002000);
pub const IOC_DTBOE_EN13_S = @as(c_uint, 13);
pub const IOC_DTBOE_EN13_EN = @as(c_uint, 0x00002000);
pub const IOC_DTBOE_EN13_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN12 = @as(c_uint, 0x00001000);
pub const IOC_DTBOE_EN12_M = @as(c_uint, 0x00001000);
pub const IOC_DTBOE_EN12_S = @as(c_uint, 12);
pub const IOC_DTBOE_EN12_EN = @as(c_uint, 0x00001000);
pub const IOC_DTBOE_EN12_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN11 = @as(c_uint, 0x00000800);
pub const IOC_DTBOE_EN11_M = @as(c_uint, 0x00000800);
pub const IOC_DTBOE_EN11_S = @as(c_uint, 11);
pub const IOC_DTBOE_EN11_EN = @as(c_uint, 0x00000800);
pub const IOC_DTBOE_EN11_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN10 = @as(c_uint, 0x00000400);
pub const IOC_DTBOE_EN10_M = @as(c_uint, 0x00000400);
pub const IOC_DTBOE_EN10_S = @as(c_uint, 10);
pub const IOC_DTBOE_EN10_EN = @as(c_uint, 0x00000400);
pub const IOC_DTBOE_EN10_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN9 = @as(c_uint, 0x00000200);
pub const IOC_DTBOE_EN9_M = @as(c_uint, 0x00000200);
pub const IOC_DTBOE_EN9_S = @as(c_uint, 9);
pub const IOC_DTBOE_EN9_EN = @as(c_uint, 0x00000200);
pub const IOC_DTBOE_EN9_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN8 = @as(c_uint, 0x00000100);
pub const IOC_DTBOE_EN8_M = @as(c_uint, 0x00000100);
pub const IOC_DTBOE_EN8_S = @as(c_uint, 8);
pub const IOC_DTBOE_EN8_EN = @as(c_uint, 0x00000100);
pub const IOC_DTBOE_EN8_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN7 = @as(c_uint, 0x00000080);
pub const IOC_DTBOE_EN7_M = @as(c_uint, 0x00000080);
pub const IOC_DTBOE_EN7_S = @as(c_uint, 7);
pub const IOC_DTBOE_EN7_EN = @as(c_uint, 0x00000080);
pub const IOC_DTBOE_EN7_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN6 = @as(c_uint, 0x00000040);
pub const IOC_DTBOE_EN6_M = @as(c_uint, 0x00000040);
pub const IOC_DTBOE_EN6_S = @as(c_uint, 6);
pub const IOC_DTBOE_EN6_EN = @as(c_uint, 0x00000040);
pub const IOC_DTBOE_EN6_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN5 = @as(c_uint, 0x00000020);
pub const IOC_DTBOE_EN5_M = @as(c_uint, 0x00000020);
pub const IOC_DTBOE_EN5_S = @as(c_uint, 5);
pub const IOC_DTBOE_EN5_EN = @as(c_uint, 0x00000020);
pub const IOC_DTBOE_EN5_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN4 = @as(c_uint, 0x00000010);
pub const IOC_DTBOE_EN4_M = @as(c_uint, 0x00000010);
pub const IOC_DTBOE_EN4_S = @as(c_uint, 4);
pub const IOC_DTBOE_EN4_EN = @as(c_uint, 0x00000010);
pub const IOC_DTBOE_EN4_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN3 = @as(c_uint, 0x00000008);
pub const IOC_DTBOE_EN3_M = @as(c_uint, 0x00000008);
pub const IOC_DTBOE_EN3_S = @as(c_uint, 3);
pub const IOC_DTBOE_EN3_EN = @as(c_uint, 0x00000008);
pub const IOC_DTBOE_EN3_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN2 = @as(c_uint, 0x00000004);
pub const IOC_DTBOE_EN2_M = @as(c_uint, 0x00000004);
pub const IOC_DTBOE_EN2_S = @as(c_uint, 2);
pub const IOC_DTBOE_EN2_EN = @as(c_uint, 0x00000004);
pub const IOC_DTBOE_EN2_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN1 = @as(c_uint, 0x00000002);
pub const IOC_DTBOE_EN1_M = @as(c_uint, 0x00000002);
pub const IOC_DTBOE_EN1_S = @as(c_uint, 1);
pub const IOC_DTBOE_EN1_EN = @as(c_uint, 0x00000002);
pub const IOC_DTBOE_EN1_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN0 = @as(c_uint, 0x00000001);
pub const IOC_DTBOE_EN0_M = @as(c_uint, 0x00000001);
pub const IOC_DTBOE_EN0_S = @as(c_uint, 0);
pub const IOC_DTBOE_EN0_EN = @as(c_uint, 0x00000001);
pub const IOC_DTBOE_EN0_DIS = @as(c_uint, 0x00000000);
pub const IOC_EVTCFG_EVTIFG = @as(c_uint, 0x00000100);
pub const IOC_EVTCFG_EVTIFG_M = @as(c_uint, 0x00000100);
pub const IOC_EVTCFG_EVTIFG_S = @as(c_uint, 8);
pub const IOC_EVTCFG_EVTIFG_SET = @as(c_uint, 0x00000100);
pub const IOC_EVTCFG_EVTIFG_CLR = @as(c_uint, 0x00000000);
pub const IOC_EVTCFG_EVTEN = @as(c_uint, 0x00000080);
pub const IOC_EVTCFG_EVTEN_M = @as(c_uint, 0x00000080);
pub const IOC_EVTCFG_EVTEN_S = @as(c_uint, 7);
pub const IOC_EVTCFG_EVTEN_EN = @as(c_uint, 0x00000080);
pub const IOC_EVTCFG_EVTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_EVTCFG_DIOSEL_W = @as(c_uint, 6);
pub const IOC_EVTCFG_DIOSEL_M = @as(c_uint, 0x0000003F);
pub const IOC_EVTCFG_DIOSEL_S = @as(c_uint, 0);
pub const IOC_TEST_SEL = @as(c_uint, 0x00000001);
pub const IOC_TEST_SEL_M = @as(c_uint, 0x00000001);
pub const IOC_TEST_SEL_S = @as(c_uint, 0);
pub const IOC_TEST_SEL_HI = @as(c_uint, 0x00000001);
pub const IOC_TEST_SEL_LO = @as(c_uint, 0x00000000);
pub const IOC_DTBSTAT_VAL_W = @as(c_uint, 16);
pub const IOC_DTBSTAT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const IOC_DTBSTAT_VAL_S = @as(c_uint, 0);
