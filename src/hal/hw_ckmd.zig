pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):79:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):85:9
pub const __FLT16_DENORM_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):108:9
pub const __FLT16_EPSILON__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):112:9
pub const __FLT16_MAX__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):118:9
pub const __FLT16_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):121:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):183:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):205:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):213:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 16);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "16.0.6 (https://github.com/ziglang/zig-bootstrap 1dda86241204c4649f668d46b6a37feed707c7b4)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 16.0.6 (https://github.com/ziglang/zig-bootstrap 1dda86241204c4649f668d46b6a37feed707c7b4)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _ILP32 = @as(c_int, 1);
pub const __ILP32__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 32);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 32);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 32);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 32);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 4);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 4);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 4);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __PTRDIFF_TYPE__ = c_int;
pub const __PTRDIFF_FMTd__ = "d";
pub const __PTRDIFF_FMTi__ = "i";
pub const __INTPTR_TYPE__ = c_int;
pub const __INTPTR_FMTd__ = "d";
pub const __INTPTR_FMTi__ = "i";
pub const __SIZE_TYPE__ = c_uint;
pub const __SIZE_FMTo__ = "o";
pub const __SIZE_FMTu__ = "u";
pub const __SIZE_FMTx__ = "x";
pub const __SIZE_FMTX__ = "X";
pub const __WCHAR_TYPE__ = c_uint;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_uint;
pub const __UINTPTR_FMTo__ = "o";
pub const __UINTPTR_FMTu__ = "u";
pub const __UINTPTR_FMTx__ = "x";
pub const __UINTPTR_FMTX__ = "X";
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 15);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 53);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __LDBL_MAX_EXP__ = @as(c_int, 1024);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = @as(c_int, 32);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 8);
pub const __CHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __ARMEL__ = @as(c_int, 1);
pub const __arm = @as(c_int, 1);
pub const __arm__ = @as(c_int, 1);
pub const __ELF__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __ARM_ARCH_4T__ = @as(c_int, 1);
pub const __ARM_ARCH = @as(c_int, 4);
pub const __ARM_ARCH_ISA_ARM = @as(c_int, 1);
pub const __ARM_ARCH_ISA_THUMB = @as(c_int, 1);
pub const __ARM_32BIT_STATE = @as(c_int, 1);
pub const __ARM_FEATURE_UNALIGNED = @as(c_int, 1);
pub const __ARM_FP = @as(c_int, 0xc);
pub const __ARM_ACLE = @as(c_int, 200);
pub const __ARM_FP16_FORMAT_IEEE = @as(c_int, 1);
pub const __ARM_FP16_ARGS = @as(c_int, 1);
pub const __ARM_EABI__ = @as(c_int, 1);
pub const __ARM_PCS = @as(c_int, 1);
pub const __THUMBEL__ = @as(c_int, 1);
pub const __thumb__ = @as(c_int, 1);
pub const __APCS_32__ = @as(c_int, 1);
pub const __VFP_FP__ = @as(c_int, 1);
pub const __ARM_VFPV2__ = @as(c_int, 1);
pub const __ARM_VFPV3__ = @as(c_int, 1);
pub const __ARM_SIZEOF_WCHAR_T = @as(c_int, 4);
pub const __ARM_SIZEOF_MINIMAL_ENUM = @as(c_int, 4);
pub const __ARM_FEATURE_DSP = @as(c_int, 1);
pub const __ARM_FEATURE_QBIT = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 0);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const __HW_CKMD_H__ = "";
pub const CKMD_O_DESC = @as(c_uint, 0x00000000);
pub const CKMD_O_IMASK = @as(c_uint, 0x00000044);
pub const CKMD_O_RIS = @as(c_uint, 0x00000048);
pub const CKMD_O_MIS = @as(c_uint, 0x0000004C);
pub const CKMD_O_ISET = @as(c_uint, 0x00000050);
pub const CKMD_O_ICLR = @as(c_uint, 0x00000054);
pub const CKMD_O_IMSET = @as(c_uint, 0x00000058);
pub const CKMD_O_IMCLR = @as(c_uint, 0x0000005C);
pub const CKMD_O_HFOSCCTL = @as(c_uint, 0x00000080);
pub const CKMD_O_HFXTCTL = @as(c_uint, 0x00000084);
pub const CKMD_O_LFOSCCTL = @as(c_uint, 0x0000008C);
pub const CKMD_O_LFXTCTL = @as(c_uint, 0x00000090);
pub const CKMD_O_LFQUALCTL = @as(c_uint, 0x00000094);
pub const CKMD_O_LFINCCTL = @as(c_uint, 0x00000098);
pub const CKMD_O_LFINCOVR = @as(c_uint, 0x0000009C);
pub const CKMD_O_AMPADCCTL = @as(c_uint, 0x000000A0);
pub const CKMD_O_HFTRACKCTL = @as(c_uint, 0x000000A4);
pub const CKMD_O_LDOCTL = @as(c_uint, 0x000000A8);
pub const CKMD_O_NABIASCTL = @as(c_uint, 0x000000AC);
pub const CKMD_O_LFMONCTL = @as(c_uint, 0x000000B0);
pub const CKMD_O_LFCLKSEL = @as(c_uint, 0x000000C0);
pub const CKMD_O_TDCCLKSEL = @as(c_uint, 0x000000C4);
pub const CKMD_O_ADCCLKSEL = @as(c_uint, 0x000000C8);
pub const CKMD_O_LFCLKSTAT = @as(c_uint, 0x000000E0);
pub const CKMD_O_HFXTSTAT = @as(c_uint, 0x000000E4);
pub const CKMD_O_AMPADCSTAT = @as(c_uint, 0x000000E8);
pub const CKMD_O_TRACKSTAT = @as(c_uint, 0x000000EC);
pub const CKMD_O_AMPSTAT = @as(c_uint, 0x000000F0);
pub const CKMD_O_ATBCTL0 = @as(c_uint, 0x00000100);
pub const CKMD_O_ATBCTL1 = @as(c_uint, 0x00000104);
pub const CKMD_O_DTBCTL = @as(c_uint, 0x00000108);
pub const CKMD_O_TRIM0 = @as(c_uint, 0x00000110);
pub const CKMD_O_TRIM1 = @as(c_uint, 0x00000114);
pub const CKMD_O_HFXTINIT = @as(c_uint, 0x00000118);
pub const CKMD_O_HFXTTARG = @as(c_uint, 0x0000011C);
pub const CKMD_O_HFXTDYN = @as(c_uint, 0x00000120);
pub const CKMD_O_AMPCFG0 = @as(c_uint, 0x00000124);
pub const CKMD_O_AMPCFG1 = @as(c_uint, 0x00000128);
pub const CKMD_O_LOOPCFG = @as(c_uint, 0x0000012C);
pub const CKMD_O_TDCCTL = @as(c_uint, 0x00000200);
pub const CKMD_O_TDCSTAT = @as(c_uint, 0x00000204);
pub const CKMD_O_TDCRESULT = @as(c_uint, 0x00000208);
pub const CKMD_O_TDCSATCFG = @as(c_uint, 0x0000020C);
pub const CKMD_O_TDCTRIGSRC = @as(c_uint, 0x00000210);
pub const CKMD_O_TDCTRIGCNT = @as(c_uint, 0x00000214);
pub const CKMD_O_TDCTRIGCNTLOAD = @as(c_uint, 0x00000218);
pub const CKMD_O_TDCTRIGCNTCFG = @as(c_uint, 0x0000021C);
pub const CKMD_O_TDCPRECTL = @as(c_uint, 0x00000220);
pub const CKMD_O_TDCPRECNTR = @as(c_uint, 0x00000224);
pub const CKMD_O_WDTCNT = @as(c_uint, 0x00000300);
pub const CKMD_O_WDTTEST = @as(c_uint, 0x00000304);
pub const CKMD_O_WDTLOCK = @as(c_uint, 0x00000308);
pub const CKMD_DESC_MODID_W = @as(c_uint, 16);
pub const CKMD_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hexadecimal);
pub const CKMD_DESC_MODID_S = @as(c_uint, 16);
pub const CKMD_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const CKMD_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const CKMD_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const CKMD_DESC_MAJREV_W = @as(c_uint, 4);
pub const CKMD_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const CKMD_DESC_MAJREV_S = @as(c_uint, 4);
pub const CKMD_DESC_MINREV_W = @as(c_uint, 4);
pub const CKMD_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const CKMD_DESC_MINREV_S = @as(c_uint, 0);
pub const CKMD_IMASK_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_IMASK_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_IMASK_LFTICK_S = @as(c_uint, 17);
pub const CKMD_IMASK_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_IMASK_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_IMASK_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_IMASK_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_IMASK_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_IMASK_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_IMASK_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_IMASK_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_IMASK_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_IMASK_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_IMASK_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_IMASK_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_IMASK_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_IMASK_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_IMASK_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_IMASK_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_IMASK_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_IMASK_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_IMASK_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_IMASK_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_IMASK_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_IMASK_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_IMASK_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_IMASK_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_IMASK_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_IMASK_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_IMASK_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_IMASK_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_IMASK_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_IMASK_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_IMASK_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_IMASK_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_IMASK_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_IMASK_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_IMASK_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_IMASK_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_IMASK_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_IMASK_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_IMASK_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_IMASK_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_IMASK_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_IMASK_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_IMASK_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_IMASK_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_IMASK_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_IMASK_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_IMASK_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_IMASK_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_IMASK_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_IMASK_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_IMASK_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_RIS_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_RIS_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_RIS_LFTICK_S = @as(c_uint, 17);
pub const CKMD_RIS_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_RIS_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_RIS_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_RIS_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_RIS_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_RIS_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_RIS_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_RIS_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_RIS_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_RIS_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_RIS_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_RIS_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_RIS_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_RIS_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_RIS_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_RIS_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_RIS_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_RIS_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_RIS_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_RIS_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_RIS_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_RIS_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_RIS_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_RIS_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_RIS_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_RIS_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_RIS_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_RIS_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_RIS_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_RIS_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_RIS_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_RIS_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_RIS_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_RIS_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_RIS_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_RIS_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_RIS_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_RIS_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_RIS_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_RIS_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_RIS_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_RIS_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_RIS_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_RIS_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_RIS_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_RIS_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_RIS_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_RIS_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_RIS_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_RIS_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_RIS_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_MIS_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_MIS_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_MIS_LFTICK_S = @as(c_uint, 17);
pub const CKMD_MIS_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_MIS_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_MIS_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_MIS_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_MIS_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_MIS_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_MIS_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_MIS_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_MIS_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_MIS_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_MIS_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_MIS_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_MIS_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_MIS_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_MIS_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_MIS_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_MIS_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_MIS_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_MIS_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_MIS_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_MIS_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_MIS_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_MIS_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_MIS_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_MIS_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_MIS_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_MIS_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_MIS_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_MIS_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_MIS_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_MIS_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_MIS_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_MIS_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_MIS_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_MIS_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_MIS_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_MIS_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_MIS_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_MIS_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_MIS_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_MIS_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_MIS_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_MIS_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_MIS_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_MIS_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_MIS_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_MIS_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_MIS_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_MIS_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_MIS_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_MIS_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_ISET_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_ISET_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_ISET_LFTICK_S = @as(c_uint, 17);
pub const CKMD_ISET_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_ISET_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_ISET_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_ISET_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_ISET_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_ISET_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_ISET_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_ISET_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_ISET_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_ISET_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_ISET_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_ISET_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_ISET_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_ISET_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_ISET_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_ISET_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_ISET_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_ISET_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_ISET_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_ISET_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_ISET_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_ISET_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_ISET_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_ISET_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_ISET_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_ISET_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_ISET_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_ISET_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_ISET_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_ISET_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_ISET_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_ISET_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_ISET_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_ISET_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_ISET_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_ISET_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_ISET_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_ISET_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_ISET_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_ISET_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_ISET_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_ISET_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_ISET_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_ISET_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_ISET_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_ISET_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_ISET_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_ISET_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_ISET_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_ISET_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_ISET_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_ICLR_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_ICLR_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_ICLR_LFTICK_S = @as(c_uint, 17);
pub const CKMD_ICLR_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_ICLR_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_ICLR_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_ICLR_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_ICLR_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_ICLR_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_ICLR_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_ICLR_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_ICLR_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_ICLR_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_ICLR_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_ICLR_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_ICLR_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_ICLR_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_ICLR_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_ICLR_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_ICLR_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_ICLR_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_ICLR_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_ICLR_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_ICLR_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_ICLR_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_ICLR_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_ICLR_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_ICLR_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_ICLR_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_ICLR_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_ICLR_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_ICLR_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_ICLR_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_ICLR_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_ICLR_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_ICLR_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_ICLR_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_ICLR_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_ICLR_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_ICLR_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_ICLR_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_ICLR_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_ICLR_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_ICLR_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_ICLR_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_ICLR_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_ICLR_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_ICLR_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_ICLR_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_ICLR_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_ICLR_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_ICLR_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_ICLR_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_ICLR_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_IMSET_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_IMSET_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_IMSET_LFTICK_S = @as(c_uint, 17);
pub const CKMD_IMSET_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_IMSET_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_IMSET_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_IMSET_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_IMSET_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_IMSET_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_IMSET_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_IMSET_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_IMSET_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_IMSET_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_IMSET_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_IMSET_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_IMSET_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_IMSET_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_IMSET_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_IMSET_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_IMSET_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_IMSET_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_IMSET_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_IMSET_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_IMSET_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_IMSET_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_IMSET_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_IMSET_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_IMSET_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_IMSET_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_IMSET_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_IMSET_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_IMSET_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_IMSET_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_IMSET_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_IMSET_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_IMSET_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_IMSET_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_IMSET_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_IMSET_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_IMSET_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_IMSET_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_IMSET_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_IMSET_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_IMSET_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_IMSET_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_IMSET_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_IMSET_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_IMSET_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_IMSET_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_IMSET_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_IMSET_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_IMSET_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_IMSET_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_IMSET_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_IMCLR_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_IMCLR_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_IMCLR_LFTICK_S = @as(c_uint, 17);
pub const CKMD_IMCLR_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_IMCLR_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_IMCLR_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_IMCLR_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_IMCLR_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_IMCLR_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_IMCLR_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_IMCLR_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_IMCLR_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_IMCLR_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_IMCLR_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_IMCLR_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_IMCLR_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_IMCLR_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_IMCLR_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_IMCLR_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_IMCLR_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_IMCLR_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_IMCLR_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_IMCLR_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_IMCLR_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_IMCLR_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_IMCLR_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_IMCLR_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_IMCLR_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_IMCLR_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_IMCLR_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_IMCLR_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_IMCLR_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_IMCLR_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_IMCLR_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_IMCLR_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_IMCLR_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_IMCLR_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_IMCLR_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_IMCLR_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_IMCLR_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_IMCLR_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_IMCLR_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_IMCLR_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_IMCLR_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_IMCLR_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_IMCLR_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_IMCLR_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_IMCLR_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_IMCLR_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_IMCLR_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_IMCLR_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_IMCLR_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_IMCLR_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_IMCLR_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_HFOSCCTL_PW_W = @as(c_uint, 8);
pub const CKMD_HFOSCCTL_PW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hexadecimal);
pub const CKMD_HFOSCCTL_PW_S = @as(c_uint, 24);
pub const CKMD_HFOSCCTL_CLKSVTOVR = @as(c_uint, 0x00000100);
pub const CKMD_HFOSCCTL_CLKSVTOVR_M = @as(c_uint, 0x00000100);
pub const CKMD_HFOSCCTL_CLKSVTOVR_S = @as(c_uint, 8);
pub const CKMD_HFOSCCTL_CLKSVTOVR_HFXT = @as(c_uint, 0x00000100);
pub const CKMD_HFOSCCTL_CLKSVTOVR_HFOSC = @as(c_uint, 0x00000000);
pub const CKMD_HFOSCCTL_FORCEOFF = @as(c_uint, 0x00000002);
pub const CKMD_HFOSCCTL_FORCEOFF_M = @as(c_uint, 0x00000002);
pub const CKMD_HFOSCCTL_FORCEOFF_S = @as(c_uint, 1);
pub const CKMD_HFOSCCTL_QUALBYP = @as(c_uint, 0x00000001);
pub const CKMD_HFOSCCTL_QUALBYP_M = @as(c_uint, 0x00000001);
pub const CKMD_HFOSCCTL_QUALBYP_S = @as(c_uint, 0);
pub const CKMD_HFXTCTL_AMPOVR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_HFXTCTL_AMPOVR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_HFXTCTL_AMPOVR_S = @as(c_uint, 31);
pub const CKMD_HFXTCTL_BIASEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const CKMD_HFXTCTL_BIASEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const CKMD_HFXTCTL_BIASEN_S = @as(c_uint, 26);
pub const CKMD_HFXTCTL_LPBUFEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const CKMD_HFXTCTL_LPBUFEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const CKMD_HFXTCTL_LPBUFEN_S = @as(c_uint, 25);
pub const CKMD_HFXTCTL_INJECT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const CKMD_HFXTCTL_INJECT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const CKMD_HFXTCTL_INJECT_S = @as(c_uint, 24);
pub const CKMD_HFXTCTL_QUALBYP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const CKMD_HFXTCTL_QUALBYP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const CKMD_HFXTCTL_QUALBYP_S = @as(c_uint, 23);
pub const CKMD_HFXTCTL_QUALDLY_W = @as(c_uint, 12);
pub const CKMD_HFXTCTL_QUALDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000FFF00, .hexadecimal);
pub const CKMD_HFXTCTL_QUALDLY_S = @as(c_uint, 8);
pub const CKMD_HFXTCTL_TCXOMODE = @as(c_uint, 0x00000080);
pub const CKMD_HFXTCTL_TCXOMODE_M = @as(c_uint, 0x00000080);
pub const CKMD_HFXTCTL_TCXOMODE_S = @as(c_uint, 7);
pub const CKMD_HFXTCTL_TCXOTYPE = @as(c_uint, 0x00000040);
pub const CKMD_HFXTCTL_TCXOTYPE_M = @as(c_uint, 0x00000040);
pub const CKMD_HFXTCTL_TCXOTYPE_S = @as(c_uint, 6);
pub const CKMD_HFXTCTL_TCXOTYPE_CMOS = @as(c_uint, 0x00000040);
pub const CKMD_HFXTCTL_TCXOTYPE_CLIPPEDSINE = @as(c_uint, 0x00000000);
pub const CKMD_HFXTCTL_AUTOEN = @as(c_uint, 0x00000004);
pub const CKMD_HFXTCTL_AUTOEN_M = @as(c_uint, 0x00000004);
pub const CKMD_HFXTCTL_AUTOEN_S = @as(c_uint, 2);
pub const CKMD_HFXTCTL_HPBUFEN = @as(c_uint, 0x00000002);
pub const CKMD_HFXTCTL_HPBUFEN_M = @as(c_uint, 0x00000002);
pub const CKMD_HFXTCTL_HPBUFEN_S = @as(c_uint, 1);
pub const CKMD_HFXTCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_HFXTCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_HFXTCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFOSCCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_LFOSCCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_LFOSCCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFXTCTL_LEAKCOMP_W = @as(c_uint, 2);
pub const CKMD_LFXTCTL_LEAKCOMP_M = @as(c_uint, 0x00006000);
pub const CKMD_LFXTCTL_LEAKCOMP_S = @as(c_uint, 13);
pub const CKMD_LFXTCTL_LEAKCOMP_OFF = @as(c_uint, 0x00006000);
pub const CKMD_LFXTCTL_LEAKCOMP_HALF = @as(c_uint, 0x00002000);
pub const CKMD_LFXTCTL_LEAKCOMP_FULL = @as(c_uint, 0x00000000);
pub const CKMD_LFXTCTL_BUFBIAS = @as(c_uint, 0x00001000);
pub const CKMD_LFXTCTL_BUFBIAS_M = @as(c_uint, 0x00001000);
pub const CKMD_LFXTCTL_BUFBIAS_S = @as(c_uint, 12);
pub const CKMD_LFXTCTL_BUFBIAS_MAX = @as(c_uint, 0x00001000);
pub const CKMD_LFXTCTL_BUFBIAS_MIN = @as(c_uint, 0x00000000);
pub const CKMD_LFXTCTL_AMPBIAS_W = @as(c_uint, 4);
pub const CKMD_LFXTCTL_AMPBIAS_M = @as(c_uint, 0x00000F00);
pub const CKMD_LFXTCTL_AMPBIAS_S = @as(c_uint, 8);
pub const CKMD_LFXTCTL_BIASBOOST_W = @as(c_uint, 2);
pub const CKMD_LFXTCTL_BIASBOOST_M = @as(c_uint, 0x000000C0);
pub const CKMD_LFXTCTL_BIASBOOST_S = @as(c_uint, 6);
pub const CKMD_LFXTCTL_REGBIAS_W = @as(c_uint, 2);
pub const CKMD_LFXTCTL_REGBIAS_M = @as(c_uint, 0x00000030);
pub const CKMD_LFXTCTL_REGBIAS_S = @as(c_uint, 4);
pub const CKMD_LFXTCTL_HPBUFEN = @as(c_uint, 0x00000004);
pub const CKMD_LFXTCTL_HPBUFEN_M = @as(c_uint, 0x00000004);
pub const CKMD_LFXTCTL_HPBUFEN_S = @as(c_uint, 2);
pub const CKMD_LFXTCTL_AMPREGMODE = @as(c_uint, 0x00000002);
pub const CKMD_LFXTCTL_AMPREGMODE_M = @as(c_uint, 0x00000002);
pub const CKMD_LFXTCTL_AMPREGMODE_S = @as(c_uint, 1);
pub const CKMD_LFXTCTL_AMPREGMODE_LOOPDIS = @as(c_uint, 0x00000002);
pub const CKMD_LFXTCTL_AMPREGMODE_LOOPEN = @as(c_uint, 0x00000000);
pub const CKMD_LFXTCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_LFXTCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_LFXTCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFQUALCTL_MAXERR_W = @as(c_uint, 6);
pub const CKMD_LFQUALCTL_MAXERR_M = @as(c_uint, 0x00003F00);
pub const CKMD_LFQUALCTL_MAXERR_S = @as(c_uint, 8);
pub const CKMD_LFQUALCTL_CONSEC_W = @as(c_uint, 8);
pub const CKMD_LFQUALCTL_CONSEC_M = @as(c_uint, 0x000000FF);
pub const CKMD_LFQUALCTL_CONSEC_S = @as(c_uint, 0);
pub const CKMD_LFINCCTL_PREVENTSTBY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_LFINCCTL_PREVENTSTBY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_LFINCCTL_PREVENTSTBY_S = @as(c_uint, 31);
pub const CKMD_LFINCCTL_PREVENTSTBY_ON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_LFINCCTL_PREVENTSTBY_OFF = @as(c_uint, 0x00000000);
pub const CKMD_LFINCCTL_INT_W = @as(c_uint, 22);
pub const CKMD_LFINCCTL_INT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3FFFFF00, .hexadecimal);
pub const CKMD_LFINCCTL_INT_S = @as(c_uint, 8);
pub const CKMD_LFINCCTL_STOPGEAR = @as(c_uint, 0x00000080);
pub const CKMD_LFINCCTL_STOPGEAR_M = @as(c_uint, 0x00000080);
pub const CKMD_LFINCCTL_STOPGEAR_S = @as(c_uint, 7);
pub const CKMD_LFINCCTL_STOPGEAR_HIGH = @as(c_uint, 0x00000080);
pub const CKMD_LFINCCTL_STOPGEAR_LOW = @as(c_uint, 0x00000000);
pub const CKMD_LFINCCTL_ERRTHR_W = @as(c_uint, 2);
pub const CKMD_LFINCCTL_ERRTHR_M = @as(c_uint, 0x00000060);
pub const CKMD_LFINCCTL_ERRTHR_S = @as(c_uint, 5);
pub const CKMD_LFINCCTL_ERRTHR_SMALL = @as(c_uint, 0x00000060);
pub const CKMD_LFINCCTL_ERRTHR_MIDSMALL = @as(c_uint, 0x00000040);
pub const CKMD_LFINCCTL_ERRTHR_MIDLARGE = @as(c_uint, 0x00000020);
pub const CKMD_LFINCCTL_ERRTHR_LARGE = @as(c_uint, 0x00000000);
pub const CKMD_LFINCCTL_GEARRSTRT_W = @as(c_uint, 2);
pub const CKMD_LFINCCTL_GEARRSTRT_M = @as(c_uint, 0x00000018);
pub const CKMD_LFINCCTL_GEARRSTRT_S = @as(c_uint, 3);
pub const CKMD_LFINCCTL_GEARRSTRT_TWOTHR = @as(c_uint, 0x00000010);
pub const CKMD_LFINCCTL_GEARRSTRT_ONETHR = @as(c_uint, 0x00000008);
pub const CKMD_LFINCCTL_GEARRSTRT_NEVER = @as(c_uint, 0x00000000);
pub const CKMD_LFINCCTL_SOFTRSTRT = @as(c_uint, 0x00000004);
pub const CKMD_LFINCCTL_SOFTRSTRT_M = @as(c_uint, 0x00000004);
pub const CKMD_LFINCCTL_SOFTRSTRT_S = @as(c_uint, 2);
pub const CKMD_LFINCCTL_SOFTRSTRT_ON = @as(c_uint, 0x00000004);
pub const CKMD_LFINCCTL_SOFTRSTRT_OFF = @as(c_uint, 0x00000000);
pub const CKMD_LFINCOVR_OVERRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_LFINCOVR_OVERRIDE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_LFINCOVR_OVERRIDE_S = @as(c_uint, 31);
pub const CKMD_LFINCOVR_LFINC_W = @as(c_uint, 22);
pub const CKMD_LFINCOVR_LFINC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003FFFFF, .hexadecimal);
pub const CKMD_LFINCOVR_LFINC_S = @as(c_uint, 0);
pub const CKMD_AMPADCCTL_SWOVR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_AMPADCCTL_SWOVR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_AMPADCCTL_SWOVR_S = @as(c_uint, 31);
pub const CKMD_AMPADCCTL_PEAKDETEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_AMPADCCTL_PEAKDETEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_AMPADCCTL_PEAKDETEN_S = @as(c_uint, 17);
pub const CKMD_AMPADCCTL_PEAKDETEN_ENABLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hexadecimal);
pub const CKMD_AMPADCCTL_PEAKDETEN_DISABLE = @as(c_uint, 0x00000000);
pub const CKMD_AMPADCCTL_ADCEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_AMPADCCTL_ADCEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_AMPADCCTL_ADCEN_S = @as(c_uint, 16);
pub const CKMD_AMPADCCTL_ADCEN_ENABLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_AMPADCCTL_ADCEN_DISABLE = @as(c_uint, 0x00000000);
pub const CKMD_AMPADCCTL_COMPVAL_W = @as(c_uint, 7);
pub const CKMD_AMPADCCTL_COMPVAL_M = @as(c_uint, 0x00007F00);
pub const CKMD_AMPADCCTL_COMPVAL_S = @as(c_uint, 8);
pub const CKMD_AMPADCCTL_SRCSEL = @as(c_uint, 0x00000010);
pub const CKMD_AMPADCCTL_SRCSEL_M = @as(c_uint, 0x00000010);
pub const CKMD_AMPADCCTL_SRCSEL_S = @as(c_uint, 4);
pub const CKMD_AMPADCCTL_SRCSEL_PEAK = @as(c_uint, 0x00000010);
pub const CKMD_AMPADCCTL_SRCSEL_BIAS = @as(c_uint, 0x00000000);
pub const CKMD_AMPADCCTL_COMPSTRT = @as(c_uint, 0x00000002);
pub const CKMD_AMPADCCTL_COMPSTRT_M = @as(c_uint, 0x00000002);
pub const CKMD_AMPADCCTL_COMPSTRT_S = @as(c_uint, 1);
pub const CKMD_AMPADCCTL_SARSTRT = @as(c_uint, 0x00000001);
pub const CKMD_AMPADCCTL_SARSTRT_M = @as(c_uint, 0x00000001);
pub const CKMD_AMPADCCTL_SARSTRT_S = @as(c_uint, 0);
pub const CKMD_HFTRACKCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_HFTRACKCTL_EN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_HFTRACKCTL_EN_S = @as(c_uint, 31);
pub const CKMD_HFTRACKCTL_DSMBYP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const CKMD_HFTRACKCTL_DSMBYP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hexadecimal);
pub const CKMD_HFTRACKCTL_DSMBYP_S = @as(c_uint, 30);
pub const CKMD_HFTRACKCTL_REFCLK_W = @as(c_uint, 2);
pub const CKMD_HFTRACKCTL_REFCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hexadecimal);
pub const CKMD_HFTRACKCTL_REFCLK_S = @as(c_uint, 26);
pub const CKMD_HFTRACKCTL_REFCLK_GPI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hexadecimal);
pub const CKMD_HFTRACKCTL_REFCLK_LRF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const CKMD_HFTRACKCTL_REFCLK_HFXT = @as(c_uint, 0x00000000);
pub const CKMD_HFTRACKCTL_RATIO_W = @as(c_uint, 26);
pub const CKMD_HFTRACKCTL_RATIO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FFFFFF, .hexadecimal);
pub const CKMD_HFTRACKCTL_RATIO_S = @as(c_uint, 0);
pub const CKMD_HFTRACKCTL_RATIO_REF4M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hexadecimal);
pub const CKMD_HFTRACKCTL_RATIO_REF8M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01800000, .hexadecimal);
pub const CKMD_HFTRACKCTL_RATIO_REF48M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const CKMD_LDOCTL_SWOVR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_LDOCTL_SWOVR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_LDOCTL_SWOVR_S = @as(c_uint, 31);
pub const CKMD_LDOCTL_HFXTLVLEN = @as(c_uint, 0x00000010);
pub const CKMD_LDOCTL_HFXTLVLEN_M = @as(c_uint, 0x00000010);
pub const CKMD_LDOCTL_HFXTLVLEN_S = @as(c_uint, 4);
pub const CKMD_LDOCTL_STARTCTL = @as(c_uint, 0x00000008);
pub const CKMD_LDOCTL_STARTCTL_M = @as(c_uint, 0x00000008);
pub const CKMD_LDOCTL_STARTCTL_S = @as(c_uint, 3);
pub const CKMD_LDOCTL_START = @as(c_uint, 0x00000004);
pub const CKMD_LDOCTL_START_M = @as(c_uint, 0x00000004);
pub const CKMD_LDOCTL_START_S = @as(c_uint, 2);
pub const CKMD_LDOCTL_BYPASS = @as(c_uint, 0x00000002);
pub const CKMD_LDOCTL_BYPASS_M = @as(c_uint, 0x00000002);
pub const CKMD_LDOCTL_BYPASS_S = @as(c_uint, 1);
pub const CKMD_LDOCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_LDOCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_LDOCTL_EN_S = @as(c_uint, 0);
pub const CKMD_NABIASCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_NABIASCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_NABIASCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFMONCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_LFMONCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_LFMONCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFCLKSEL_PRE_W = @as(c_uint, 2);
pub const CKMD_LFCLKSEL_PRE_M = @as(c_uint, 0x0000000C);
pub const CKMD_LFCLKSEL_PRE_S = @as(c_uint, 2);
pub const CKMD_LFCLKSEL_PRE_EXTLF = @as(c_uint, 0x0000000C);
pub const CKMD_LFCLKSEL_PRE_LFXT = @as(c_uint, 0x00000008);
pub const CKMD_LFCLKSEL_PRE_LFOSC = @as(c_uint, 0x00000004);
pub const CKMD_LFCLKSEL_PRE_NONE = @as(c_uint, 0x00000000);
pub const CKMD_LFCLKSEL_MAIN_W = @as(c_uint, 2);
pub const CKMD_LFCLKSEL_MAIN_M = @as(c_uint, 0x00000003);
pub const CKMD_LFCLKSEL_MAIN_S = @as(c_uint, 0);
pub const CKMD_LFCLKSEL_MAIN_EXTLF = @as(c_uint, 0x00000003);
pub const CKMD_LFCLKSEL_MAIN_LFXT = @as(c_uint, 0x00000002);
pub const CKMD_LFCLKSEL_MAIN_LFOSC = @as(c_uint, 0x00000001);
pub const CKMD_LFCLKSEL_MAIN_FAKE = @as(c_uint, 0x00000000);
pub const CKMD_TDCCLKSEL_REFCLK_W = @as(c_uint, 2);
pub const CKMD_TDCCLKSEL_REFCLK_M = @as(c_uint, 0x00000003);
pub const CKMD_TDCCLKSEL_REFCLK_S = @as(c_uint, 0);
pub const CKMD_TDCCLKSEL_REFCLK_GPI = @as(c_uint, 0x00000003);
pub const CKMD_TDCCLKSEL_REFCLK_CLKULL = @as(c_uint, 0x00000002);
pub const CKMD_TDCCLKSEL_REFCLK_CLKSVT = @as(c_uint, 0x00000001);
pub const CKMD_TDCCLKSEL_REFCLK_NONE = @as(c_uint, 0x00000000);
pub const CKMD_ADCCLKSEL_SRC_W = @as(c_uint, 2);
pub const CKMD_ADCCLKSEL_SRC_M = @as(c_uint, 0x00000003);
pub const CKMD_ADCCLKSEL_SRC_S = @as(c_uint, 0);
pub const CKMD_ADCCLKSEL_SRC_HFXT = @as(c_uint, 0x00000001);
pub const CKMD_ADCCLKSEL_SRC_CLKSVT = @as(c_uint, 0x00000000);
pub const CKMD_LFCLKSTAT_GOOD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_LFCLKSTAT_GOOD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_LFCLKSTAT_GOOD_S = @as(c_uint, 31);
pub const CKMD_LFCLKSTAT_FLTSETTLED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const CKMD_LFCLKSTAT_FLTSETTLED_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const CKMD_LFCLKSTAT_FLTSETTLED_S = @as(c_uint, 25);
pub const CKMD_LFCLKSTAT_LFTICKSRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const CKMD_LFCLKSTAT_LFTICKSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const CKMD_LFCLKSTAT_LFTICKSRC_S = @as(c_uint, 24);
pub const CKMD_LFCLKSTAT_LFTICKSRC_FAKE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const CKMD_LFCLKSTAT_LFTICKSRC_LFCLK = @as(c_uint, 0x00000000);
pub const CKMD_LFCLKSTAT_LFINCSRC_W = @as(c_uint, 2);
pub const CKMD_LFCLKSTAT_LFINCSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00C00000, .hexadecimal);
pub const CKMD_LFCLKSTAT_LFINCSRC_S = @as(c_uint, 22);
pub const CKMD_LFCLKSTAT_LFINCSRC_FAKE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00C00000, .hexadecimal);
pub const CKMD_LFCLKSTAT_LFINCSRC_OVERRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hexadecimal);
pub const CKMD_LFCLKSTAT_LFINCSRC_AVG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hexadecimal);
pub const CKMD_LFCLKSTAT_LFINCSRC_MEAS = @as(c_uint, 0x00000000);
pub const CKMD_LFCLKSTAT_LFINC_W = @as(c_uint, 22);
pub const CKMD_LFCLKSTAT_LFINC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003FFFFF, .hexadecimal);
pub const CKMD_LFCLKSTAT_LFINC_S = @as(c_uint, 0);
pub const CKMD_HFXTSTAT_STARTUPTIME_W = @as(c_uint, 15);
pub const CKMD_HFXTSTAT_STARTUPTIME_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x7FFF0000, .hexadecimal);
pub const CKMD_HFXTSTAT_STARTUPTIME_S = @as(c_uint, 16);
pub const CKMD_HFXTSTAT_FAULT = @as(c_uint, 0x00000002);
pub const CKMD_HFXTSTAT_FAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_HFXTSTAT_FAULT_S = @as(c_uint, 1);
pub const CKMD_HFXTSTAT_GOOD = @as(c_uint, 0x00000001);
pub const CKMD_HFXTSTAT_GOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_HFXTSTAT_GOOD_S = @as(c_uint, 0);
pub const CKMD_AMPADCSTAT_COMPOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const CKMD_AMPADCSTAT_COMPOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hexadecimal);
pub const CKMD_AMPADCSTAT_COMPOUT_S = @as(c_uint, 24);
pub const CKMD_AMPADCSTAT_PEAKRAW_W = @as(c_uint, 7);
pub const CKMD_AMPADCSTAT_PEAKRAW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hexadecimal);
pub const CKMD_AMPADCSTAT_PEAKRAW_S = @as(c_uint, 16);
pub const CKMD_AMPADCSTAT_PEAK_W = @as(c_uint, 8);
pub const CKMD_AMPADCSTAT_PEAK_M = @as(c_uint, 0x0000FF00);
pub const CKMD_AMPADCSTAT_PEAK_S = @as(c_uint, 8);
pub const CKMD_AMPADCSTAT_BIAS_W = @as(c_uint, 7);
pub const CKMD_AMPADCSTAT_BIAS_M = @as(c_uint, 0x0000007F);
pub const CKMD_AMPADCSTAT_BIAS_S = @as(c_uint, 0);
pub const CKMD_TRACKSTAT_LOOPERRVLD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_TRACKSTAT_LOOPERRVLD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_TRACKSTAT_LOOPERRVLD_S = @as(c_uint, 31);
pub const CKMD_TRACKSTAT_LOOPERR_W = @as(c_uint, 14);
pub const CKMD_TRACKSTAT_LOOPERR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3FFF0000, .hexadecimal);
pub const CKMD_TRACKSTAT_LOOPERR_S = @as(c_uint, 16);
pub const CKMD_TRACKSTAT_FINETRIM_W = @as(c_uint, 13);
pub const CKMD_TRACKSTAT_FINETRIM_M = @as(c_uint, 0x00001FFF);
pub const CKMD_TRACKSTAT_FINETRIM_S = @as(c_uint, 0);
pub const CKMD_AMPSTAT_STATE_W = @as(c_uint, 4);
pub const CKMD_AMPSTAT_STATE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1E000000, .hexadecimal);
pub const CKMD_AMPSTAT_STATE_S = @as(c_uint, 25);
pub const CKMD_AMPSTAT_STATE_SETTLED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1E000000, .hexadecimal);
pub const CKMD_AMPSTAT_STATE_UPDATEUP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1C000000, .hexadecimal);
pub const CKMD_AMPSTAT_STATE_TXCOMODE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x18000000, .hexadecimal);
pub const CKMD_AMPSTAT_STATE_SHUTDN0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x14000000, .hexadecimal);
pub const CKMD_AMPSTAT_STATE_INJWAIT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0E000000, .hexadecimal);
pub const CKMD_AMPSTAT_STATE_UPDATEDN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hexadecimal);
pub const CKMD_AMPSTAT_STATE_RAMP0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0A000000, .hexadecimal);
pub const CKMD_AMPSTAT_STATE_RAMP1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hexadecimal);
pub const CKMD_AMPSTAT_STATE_INJECT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x06000000, .hexadecimal);
pub const CKMD_AMPSTAT_STATE_SHUTDN1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hexadecimal);
pub const CKMD_AMPSTAT_STATE_LDOSTART = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hexadecimal);
pub const CKMD_AMPSTAT_STATE_IDLE = @as(c_uint, 0x00000000);
pub const CKMD_AMPSTAT_IDAC_W = @as(c_uint, 7);
pub const CKMD_AMPSTAT_IDAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01FC0000, .hexadecimal);
pub const CKMD_AMPSTAT_IDAC_S = @as(c_uint, 18);
pub const CKMD_AMPSTAT_IREF_W = @as(c_uint, 4);
pub const CKMD_AMPSTAT_IREF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003C000, .hexadecimal);
pub const CKMD_AMPSTAT_IREF_S = @as(c_uint, 14);
pub const CKMD_AMPSTAT_Q2CAP_W = @as(c_uint, 6);
pub const CKMD_AMPSTAT_Q2CAP_M = @as(c_uint, 0x00003F00);
pub const CKMD_AMPSTAT_Q2CAP_S = @as(c_uint, 8);
pub const CKMD_AMPSTAT_Q1CAP_W = @as(c_uint, 6);
pub const CKMD_AMPSTAT_Q1CAP_M = @as(c_uint, 0x000000FC);
pub const CKMD_AMPSTAT_Q1CAP_S = @as(c_uint, 2);
pub const CKMD_AMPSTAT_CTRLATTARGET = @as(c_uint, 0x00000002);
pub const CKMD_AMPSTAT_CTRLATTARGET_M = @as(c_uint, 0x00000002);
pub const CKMD_AMPSTAT_CTRLATTARGET_S = @as(c_uint, 1);
pub const CKMD_AMPSTAT_AMPGOOD = @as(c_uint, 0x00000001);
pub const CKMD_AMPSTAT_AMPGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_AMPSTAT_AMPGOOD_S = @as(c_uint, 0);
pub const CKMD_ATBCTL0_SEL_W = @as(c_uint, 19);
pub const CKMD_ATBCTL0_SEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0007FFFF, .hexadecimal);
pub const CKMD_ATBCTL0_SEL_S = @as(c_uint, 0);
pub const CKMD_ATBCTL0_SEL_LFXTTESTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hexadecimal);
pub const CKMD_ATBCTL0_SEL_LFOSCTESTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hexadecimal);
pub const CKMD_ATBCTL0_SEL_HFXTTESTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hexadecimal);
pub const CKMD_ATBCTL0_SEL_HFOSCTESTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_ATBCTL0_SEL_LFMONVTEST = @as(c_uint, 0x00001000);
pub const CKMD_ATBCTL0_SEL_LFOSCVDDL = @as(c_uint, 0x00000800);
pub const CKMD_ATBCTL0_SEL_HFOSCIBIAS = @as(c_uint, 0x00000400);
pub const CKMD_ATBCTL0_SEL_HFOSCVDDL = @as(c_uint, 0x00000200);
pub const CKMD_ATBCTL0_SEL_HFOSCVREF = @as(c_uint, 0x00000100);
pub const CKMD_ATBCTL0_SEL_NABIASITEST = @as(c_uint, 0x00000080);
pub const CKMD_ATBCTL0_SEL_ADCDACOUT = @as(c_uint, 0x00000040);
pub const CKMD_ATBCTL0_SEL_ADCCOMPIN = @as(c_uint, 0x00000020);
pub const CKMD_ATBCTL0_SEL_ADCCOMPOUT = @as(c_uint, 0x00000010);
pub const CKMD_ATBCTL0_SEL_LFXTANA = @as(c_uint, 0x00000008);
pub const CKMD_ATBCTL0_SEL_LDOITEST = @as(c_uint, 0x00000004);
pub const CKMD_ATBCTL0_SEL_VDDCKM = @as(c_uint, 0x00000002);
pub const CKMD_ATBCTL0_SEL_HFXTANA = @as(c_uint, 0x00000001);
pub const CKMD_ATBCTL0_SEL_OFF = @as(c_uint, 0x00000000);
pub const CKMD_ATBCTL1_LFOSC_W = @as(c_uint, 2);
pub const CKMD_ATBCTL1_LFOSC_M = @as(c_uint, 0x00006000);
pub const CKMD_ATBCTL1_LFOSC_S = @as(c_uint, 13);
pub const CKMD_ATBCTL1_LFOSC_BOTH = @as(c_uint, 0x00006000);
pub const CKMD_ATBCTL1_LFOSC_VDDLOCAL = @as(c_uint, 0x00004000);
pub const CKMD_ATBCTL1_LFOSC_TESTCLK = @as(c_uint, 0x00002000);
pub const CKMD_ATBCTL1_LFOSC_OFF = @as(c_uint, 0x00000000);
pub const CKMD_ATBCTL1_NABIAS = @as(c_uint, 0x00001000);
pub const CKMD_ATBCTL1_NABIAS_M = @as(c_uint, 0x00001000);
pub const CKMD_ATBCTL1_NABIAS_S = @as(c_uint, 12);
pub const CKMD_ATBCTL1_LFXT = @as(c_uint, 0x00000400);
pub const CKMD_ATBCTL1_LFXT_M = @as(c_uint, 0x00000400);
pub const CKMD_ATBCTL1_LFXT_S = @as(c_uint, 10);
pub const CKMD_ATBCTL1_LFXT_TESTCLK = @as(c_uint, 0x00000400);
pub const CKMD_ATBCTL1_LFXT_OFF = @as(c_uint, 0x00000000);
pub const CKMD_ATBCTL1_LFMON_W = @as(c_uint, 2);
pub const CKMD_ATBCTL1_LFMON_M = @as(c_uint, 0x00000300);
pub const CKMD_ATBCTL1_LFMON_S = @as(c_uint, 8);
pub const CKMD_ATBCTL1_LFMON_TEST2 = @as(c_uint, 0x00000200);
pub const CKMD_ATBCTL1_LFMON_TEST1 = @as(c_uint, 0x00000100);
pub const CKMD_ATBCTL1_LFMON_OFF = @as(c_uint, 0x00000000);
pub const CKMD_ATBCTL1_HFXT = @as(c_uint, 0x00000080);
pub const CKMD_ATBCTL1_HFXT_M = @as(c_uint, 0x00000080);
pub const CKMD_ATBCTL1_HFXT_S = @as(c_uint, 7);
pub const CKMD_ATBCTL1_HFOSC = @as(c_uint, 0x00000001);
pub const CKMD_ATBCTL1_HFOSC_M = @as(c_uint, 0x00000001);
pub const CKMD_ATBCTL1_HFOSC_S = @as(c_uint, 0);
pub const CKMD_DTBCTL_DSEL2_W = @as(c_uint, 5);
pub const CKMD_DTBCTL_DSEL2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007C0000, .hexadecimal);
pub const CKMD_DTBCTL_DSEL2_S = @as(c_uint, 18);
pub const CKMD_DTBCTL_DSEL1_W = @as(c_uint, 5);
pub const CKMD_DTBCTL_DSEL1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003E000, .hexadecimal);
pub const CKMD_DTBCTL_DSEL1_S = @as(c_uint, 13);
pub const CKMD_DTBCTL_DSEL0_W = @as(c_uint, 5);
pub const CKMD_DTBCTL_DSEL0_M = @as(c_uint, 0x00001F00);
pub const CKMD_DTBCTL_DSEL0_S = @as(c_uint, 8);
pub const CKMD_DTBCTL_CLKSEL_W = @as(c_uint, 4);
pub const CKMD_DTBCTL_CLKSEL_M = @as(c_uint, 0x000000F0);
pub const CKMD_DTBCTL_CLKSEL_S = @as(c_uint, 4);
pub const CKMD_DTBCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_DTBCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_DTBCTL_EN_S = @as(c_uint, 0);
pub const CKMD_TRIM0_HFOSC_CAP_W = @as(c_uint, 4);
pub const CKMD_TRIM0_HFOSC_CAP_M = @as(c_uint, 0x000001E0);
pub const CKMD_TRIM0_HFOSC_CAP_S = @as(c_uint, 5);
pub const CKMD_TRIM0_HFOSC_COARSE_W = @as(c_uint, 5);
pub const CKMD_TRIM0_HFOSC_COARSE_M = @as(c_uint, 0x0000001F);
pub const CKMD_TRIM0_HFOSC_COARSE_S = @as(c_uint, 0);
pub const CKMD_TRIM1_HFXTSLICER_W = @as(c_uint, 2);
pub const CKMD_TRIM1_HFXTSLICER_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hexadecimal);
pub const CKMD_TRIM1_HFXTSLICER_S = @as(c_uint, 30);
pub const CKMD_TRIM1_PEAKIBIAS_W = @as(c_uint, 2);
pub const CKMD_TRIM1_PEAKIBIAS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hexadecimal);
pub const CKMD_TRIM1_PEAKIBIAS_S = @as(c_uint, 28);
pub const CKMD_TRIM1_NABIAS_UDIGLDO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hexadecimal);
pub const CKMD_TRIM1_NABIAS_UDIGLDO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hexadecimal);
pub const CKMD_TRIM1_NABIAS_UDIGLDO_S = @as(c_uint, 27);
pub const CKMD_TRIM1_LDOBW_W = @as(c_uint, 3);
pub const CKMD_TRIM1_LDOBW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hexadecimal);
pub const CKMD_TRIM1_LDOBW_S = @as(c_uint, 24);
pub const CKMD_TRIM1_LDOFB_W = @as(c_uint, 4);
pub const CKMD_TRIM1_LDOFB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hexadecimal);
pub const CKMD_TRIM1_LDOFB_S = @as(c_uint, 20);
pub const CKMD_TRIM1_LFDLY_W = @as(c_uint, 4);
pub const CKMD_TRIM1_LFDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hexadecimal);
pub const CKMD_TRIM1_LFDLY_S = @as(c_uint, 16);
pub const CKMD_TRIM1_NABIAS_LFOSC = @as(c_uint, 0x00008000);
pub const CKMD_TRIM1_NABIAS_LFOSC_M = @as(c_uint, 0x00008000);
pub const CKMD_TRIM1_NABIAS_LFOSC_S = @as(c_uint, 15);
pub const CKMD_TRIM1_NABIAS_RES_W = @as(c_uint, 7);
pub const CKMD_TRIM1_NABIAS_RES_M = @as(c_uint, 0x00007F00);
pub const CKMD_TRIM1_NABIAS_RES_S = @as(c_uint, 8);
pub const CKMD_TRIM1_LFOSC_CAP_W = @as(c_uint, 8);
pub const CKMD_TRIM1_LFOSC_CAP_M = @as(c_uint, 0x000000FF);
pub const CKMD_TRIM1_LFOSC_CAP_S = @as(c_uint, 0);
pub const CKMD_HFXTINIT_AMPTHR_W = @as(c_uint, 7);
pub const CKMD_HFXTINIT_AMPTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F800000, .hexadecimal);
pub const CKMD_HFXTINIT_AMPTHR_S = @as(c_uint, 23);
pub const CKMD_HFXTINIT_IDAC_W = @as(c_uint, 7);
pub const CKMD_HFXTINIT_IDAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hexadecimal);
pub const CKMD_HFXTINIT_IDAC_S = @as(c_uint, 16);
pub const CKMD_HFXTINIT_IREF_W = @as(c_uint, 4);
pub const CKMD_HFXTINIT_IREF_M = @as(c_uint, 0x0000F000);
pub const CKMD_HFXTINIT_IREF_S = @as(c_uint, 12);
pub const CKMD_HFXTINIT_Q2CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTINIT_Q2CAP_M = @as(c_uint, 0x00000FC0);
pub const CKMD_HFXTINIT_Q2CAP_S = @as(c_uint, 6);
pub const CKMD_HFXTINIT_Q1CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTINIT_Q1CAP_M = @as(c_uint, 0x0000003F);
pub const CKMD_HFXTINIT_Q1CAP_S = @as(c_uint, 0);
pub const CKMD_HFXTTARG_AMPHYST_W = @as(c_uint, 2);
pub const CKMD_HFXTTARG_AMPHYST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hexadecimal);
pub const CKMD_HFXTTARG_AMPHYST_S = @as(c_uint, 30);
pub const CKMD_HFXTTARG_AMPTHR_W = @as(c_uint, 7);
pub const CKMD_HFXTTARG_AMPTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F800000, .hexadecimal);
pub const CKMD_HFXTTARG_AMPTHR_S = @as(c_uint, 23);
pub const CKMD_HFXTTARG_IDAC_W = @as(c_uint, 7);
pub const CKMD_HFXTTARG_IDAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hexadecimal);
pub const CKMD_HFXTTARG_IDAC_S = @as(c_uint, 16);
pub const CKMD_HFXTTARG_IREF_W = @as(c_uint, 4);
pub const CKMD_HFXTTARG_IREF_M = @as(c_uint, 0x0000F000);
pub const CKMD_HFXTTARG_IREF_S = @as(c_uint, 12);
pub const CKMD_HFXTTARG_Q2CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTTARG_Q2CAP_M = @as(c_uint, 0x00000FC0);
pub const CKMD_HFXTTARG_Q2CAP_S = @as(c_uint, 6);
pub const CKMD_HFXTTARG_Q1CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTTARG_Q1CAP_M = @as(c_uint, 0x0000003F);
pub const CKMD_HFXTTARG_Q1CAP_S = @as(c_uint, 0);
pub const CKMD_HFXTDYN_SEL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_HFXTDYN_SEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_HFXTDYN_SEL_S = @as(c_uint, 31);
pub const CKMD_HFXTDYN_SEL_DYNAMIC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const CKMD_HFXTDYN_SEL_TARGET = @as(c_uint, 0x00000000);
pub const CKMD_HFXTDYN_AMPTHR_W = @as(c_uint, 7);
pub const CKMD_HFXTDYN_AMPTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F800000, .hexadecimal);
pub const CKMD_HFXTDYN_AMPTHR_S = @as(c_uint, 23);
pub const CKMD_HFXTDYN_IDAC_W = @as(c_uint, 7);
pub const CKMD_HFXTDYN_IDAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hexadecimal);
pub const CKMD_HFXTDYN_IDAC_S = @as(c_uint, 16);
pub const CKMD_HFXTDYN_IREF_W = @as(c_uint, 4);
pub const CKMD_HFXTDYN_IREF_M = @as(c_uint, 0x0000F000);
pub const CKMD_HFXTDYN_IREF_S = @as(c_uint, 12);
pub const CKMD_HFXTDYN_Q2CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTDYN_Q2CAP_M = @as(c_uint, 0x00000FC0);
pub const CKMD_HFXTDYN_Q2CAP_S = @as(c_uint, 6);
pub const CKMD_HFXTDYN_Q1CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTDYN_Q1CAP_M = @as(c_uint, 0x0000003F);
pub const CKMD_HFXTDYN_Q1CAP_S = @as(c_uint, 0);
pub const CKMD_AMPCFG0_Q2DLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG0_Q2DLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xF0000000, .hexadecimal);
pub const CKMD_AMPCFG0_Q2DLY_S = @as(c_uint, 28);
pub const CKMD_AMPCFG0_Q1DLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG0_Q1DLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hexadecimal);
pub const CKMD_AMPCFG0_Q1DLY_S = @as(c_uint, 24);
pub const CKMD_AMPCFG0_ADCDLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG0_ADCDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hexadecimal);
pub const CKMD_AMPCFG0_ADCDLY_S = @as(c_uint, 20);
pub const CKMD_AMPCFG0_LDOSTART_W = @as(c_uint, 5);
pub const CKMD_AMPCFG0_LDOSTART_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F8000, .hexadecimal);
pub const CKMD_AMPCFG0_LDOSTART_S = @as(c_uint, 15);
pub const CKMD_AMPCFG0_INJWAIT_W = @as(c_uint, 5);
pub const CKMD_AMPCFG0_INJWAIT_M = @as(c_uint, 0x00007C00);
pub const CKMD_AMPCFG0_INJWAIT_S = @as(c_uint, 10);
pub const CKMD_AMPCFG0_INJTIME_W = @as(c_uint, 5);
pub const CKMD_AMPCFG0_INJTIME_M = @as(c_uint, 0x000003E0);
pub const CKMD_AMPCFG0_INJTIME_S = @as(c_uint, 5);
pub const CKMD_AMPCFG0_FSMRATE_W = @as(c_uint, 5);
pub const CKMD_AMPCFG0_FSMRATE_M = @as(c_uint, 0x0000001F);
pub const CKMD_AMPCFG0_FSMRATE_S = @as(c_uint, 0);
pub const CKMD_AMPCFG0_FSMRATE__250K = @as(c_uint, 0x00000017);
pub const CKMD_AMPCFG0_FSMRATE__500K = @as(c_uint, 0x0000000B);
pub const CKMD_AMPCFG0_FSMRATE__1M = @as(c_uint, 0x00000005);
pub const CKMD_AMPCFG0_FSMRATE__2M = @as(c_uint, 0x00000002);
pub const CKMD_AMPCFG0_FSMRATE__3M = @as(c_uint, 0x00000001);
pub const CKMD_AMPCFG0_FSMRATE__6M = @as(c_uint, 0x00000000);
pub const CKMD_AMPCFG1_IDACDLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG1_IDACDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xF0000000, .hexadecimal);
pub const CKMD_AMPCFG1_IDACDLY_S = @as(c_uint, 28);
pub const CKMD_AMPCFG1_IREFDLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG1_IREFDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hexadecimal);
pub const CKMD_AMPCFG1_IREFDLY_S = @as(c_uint, 24);
pub const CKMD_AMPCFG1_BIASLT_W = @as(c_uint, 12);
pub const CKMD_AMPCFG1_BIASLT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFF000, .hexadecimal);
pub const CKMD_AMPCFG1_BIASLT_S = @as(c_uint, 12);
pub const CKMD_AMPCFG1_INTERVAL_W = @as(c_uint, 12);
pub const CKMD_AMPCFG1_INTERVAL_M = @as(c_uint, 0x00000FFF);
pub const CKMD_AMPCFG1_INTERVAL_S = @as(c_uint, 0);
pub const CKMD_LOOPCFG_FINETRIM_INIT_W = @as(c_uint, 6);
pub const CKMD_LOOPCFG_FINETRIM_INIT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFC000000, .hexadecimal);
pub const CKMD_LOOPCFG_FINETRIM_INIT_S = @as(c_uint, 26);
pub const CKMD_LOOPCFG_BOOST_TARGET_W = @as(c_uint, 5);
pub const CKMD_LOOPCFG_BOOST_TARGET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03E00000, .hexadecimal);
pub const CKMD_LOOPCFG_BOOST_TARGET_S = @as(c_uint, 21);
pub const CKMD_LOOPCFG_KP_BOOST_W = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KP_BOOST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001C0000, .hexadecimal);
pub const CKMD_LOOPCFG_KP_BOOST_S = @as(c_uint, 18);
pub const CKMD_LOOPCFG_KI_BOOST_W = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KI_BOOST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00038000, .hexadecimal);
pub const CKMD_LOOPCFG_KI_BOOST_S = @as(c_uint, 15);
pub const CKMD_LOOPCFG_SETTLED_TARGET_W = @as(c_uint, 5);
pub const CKMD_LOOPCFG_SETTLED_TARGET_M = @as(c_uint, 0x00007C00);
pub const CKMD_LOOPCFG_SETTLED_TARGET_S = @as(c_uint, 10);
pub const CKMD_LOOPCFG_OOR_LIMIT_W = @as(c_uint, 4);
pub const CKMD_LOOPCFG_OOR_LIMIT_M = @as(c_uint, 0x000003C0);
pub const CKMD_LOOPCFG_OOR_LIMIT_S = @as(c_uint, 6);
pub const CKMD_LOOPCFG_KP_W = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KP_M = @as(c_uint, 0x00000038);
pub const CKMD_LOOPCFG_KP_S = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KI_W = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KI_M = @as(c_uint, 0x00000007);
pub const CKMD_LOOPCFG_KI_S = @as(c_uint, 0);
pub const CKMD_TDCCTL_CMD_W = @as(c_uint, 2);
pub const CKMD_TDCCTL_CMD_M = @as(c_uint, 0x00000003);
pub const CKMD_TDCCTL_CMD_S = @as(c_uint, 0);
pub const CKMD_TDCCTL_CMD_ABORT = @as(c_uint, 0x00000003);
pub const CKMD_TDCCTL_CMD_RUN = @as(c_uint, 0x00000002);
pub const CKMD_TDCCTL_CMD_RUN_SYNC_START = @as(c_uint, 0x00000001);
pub const CKMD_TDCCTL_CMD_CLR_RESULT = @as(c_uint, 0x00000000);
pub const CKMD_TDCSTAT_STOP_BF = @as(c_uint, 0x00000200);
pub const CKMD_TDCSTAT_STOP_BF_M = @as(c_uint, 0x00000200);
pub const CKMD_TDCSTAT_STOP_BF_S = @as(c_uint, 9);
pub const CKMD_TDCSTAT_START_BF = @as(c_uint, 0x00000100);
pub const CKMD_TDCSTAT_START_BF_M = @as(c_uint, 0x00000100);
pub const CKMD_TDCSTAT_START_BF_S = @as(c_uint, 8);
pub const CKMD_TDCSTAT_SAT = @as(c_uint, 0x00000080);
pub const CKMD_TDCSTAT_SAT_M = @as(c_uint, 0x00000080);
pub const CKMD_TDCSTAT_SAT_S = @as(c_uint, 7);
pub const CKMD_TDCSTAT_DONE = @as(c_uint, 0x00000040);
pub const CKMD_TDCSTAT_DONE_M = @as(c_uint, 0x00000040);
pub const CKMD_TDCSTAT_DONE_S = @as(c_uint, 6);
pub const CKMD_TDCSTAT_STATE_W = @as(c_uint, 6);
pub const CKMD_TDCSTAT_STATE_M = @as(c_uint, 0x0000003F);
pub const CKMD_TDCSTAT_STATE_S = @as(c_uint, 0);
pub const CKMD_TDCSTAT_STATE_FORCE_STOP = @as(c_uint, 0x0000002E);
pub const CKMD_TDCSTAT_STATE_START_FALL = @as(c_uint, 0x0000001E);
pub const CKMD_TDCSTAT_STATE_WAIT_CLR_CNT_DONE = @as(c_uint, 0x00000016);
pub const CKMD_TDCSTAT_STATE_POR = @as(c_uint, 0x0000000F);
pub const CKMD_TDCSTAT_STATE_GET_RESULT = @as(c_uint, 0x0000000E);
pub const CKMD_TDCSTAT_STATE_WAIT_STOP_CNTDWN = @as(c_uint, 0x0000000C);
pub const CKMD_TDCSTAT_STATE_WAIT_STOP = @as(c_uint, 0x00000008);
pub const CKMD_TDCSTAT_STATE_CLR_CNT = @as(c_uint, 0x00000007);
pub const CKMD_TDCSTAT_STATE_IDLE = @as(c_uint, 0x00000006);
pub const CKMD_TDCSTAT_STATE_WAIT_START_STOP_CNT_EN = @as(c_uint, 0x00000004);
pub const CKMD_TDCSTAT_STATE_WAIT_START = @as(c_uint, 0x00000000);
pub const CKMD_TDCRESULT_VALUE_W = @as(c_uint, 32);
pub const CKMD_TDCRESULT_VALUE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hexadecimal);
pub const CKMD_TDCRESULT_VALUE_S = @as(c_uint, 0);
pub const CKMD_TDCSATCFG_LIMIT_W = @as(c_uint, 5);
pub const CKMD_TDCSATCFG_LIMIT_M = @as(c_uint, 0x0000001F);
pub const CKMD_TDCSATCFG_LIMIT_S = @as(c_uint, 0);
pub const CKMD_TDCSATCFG_LIMIT_R30 = @as(c_uint, 0x00000015);
pub const CKMD_TDCSATCFG_LIMIT_R29 = @as(c_uint, 0x00000014);
pub const CKMD_TDCSATCFG_LIMIT_R28 = @as(c_uint, 0x00000013);
pub const CKMD_TDCSATCFG_LIMIT_R27 = @as(c_uint, 0x00000012);
pub const CKMD_TDCSATCFG_LIMIT_R26 = @as(c_uint, 0x00000011);
pub const CKMD_TDCSATCFG_LIMIT_R25 = @as(c_uint, 0x00000010);
pub const CKMD_TDCSATCFG_LIMIT_R24 = @as(c_uint, 0x0000000F);
pub const CKMD_TDCSATCFG_LIMIT_R23 = @as(c_uint, 0x0000000E);
pub const CKMD_TDCSATCFG_LIMIT_R22 = @as(c_uint, 0x0000000D);
pub const CKMD_TDCSATCFG_LIMIT_R21 = @as(c_uint, 0x0000000C);
pub const CKMD_TDCSATCFG_LIMIT_R20 = @as(c_uint, 0x0000000B);
pub const CKMD_TDCSATCFG_LIMIT_R19 = @as(c_uint, 0x0000000A);
pub const CKMD_TDCSATCFG_LIMIT_R18 = @as(c_uint, 0x00000009);
pub const CKMD_TDCSATCFG_LIMIT_R17 = @as(c_uint, 0x00000008);
pub const CKMD_TDCSATCFG_LIMIT_R16 = @as(c_uint, 0x00000007);
pub const CKMD_TDCSATCFG_LIMIT_R15 = @as(c_uint, 0x00000006);
pub const CKMD_TDCSATCFG_LIMIT_R14 = @as(c_uint, 0x00000005);
pub const CKMD_TDCSATCFG_LIMIT_R13 = @as(c_uint, 0x00000004);
pub const CKMD_TDCSATCFG_LIMIT_R12 = @as(c_uint, 0x00000003);
pub const CKMD_TDCSATCFG_LIMIT_NONE = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGSRC_STOP_POL = @as(c_uint, 0x00008000);
pub const CKMD_TDCTRIGSRC_STOP_POL_M = @as(c_uint, 0x00008000);
pub const CKMD_TDCTRIGSRC_STOP_POL_S = @as(c_uint, 15);
pub const CKMD_TDCTRIGSRC_STOP_POL_LOW = @as(c_uint, 0x00008000);
pub const CKMD_TDCTRIGSRC_STOP_POL_HIGH = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGSRC_STOP_SRC_W = @as(c_uint, 5);
pub const CKMD_TDCTRIGSRC_STOP_SRC_M = @as(c_uint, 0x00001F00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_S = @as(c_uint, 8);
pub const CKMD_TDCTRIGSRC_STOP_SRC_TDC_PRE = @as(c_uint, 0x00001F00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB15 = @as(c_uint, 0x00001400);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB14 = @as(c_uint, 0x00001300);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB13 = @as(c_uint, 0x00001200);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB12 = @as(c_uint, 0x00001100);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB11 = @as(c_uint, 0x00001000);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB10 = @as(c_uint, 0x00000F00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB9 = @as(c_uint, 0x00000E00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB8 = @as(c_uint, 0x00000D00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB7 = @as(c_uint, 0x00000C00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB6 = @as(c_uint, 0x00000B00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB5 = @as(c_uint, 0x00000A00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB4 = @as(c_uint, 0x00000900);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB3 = @as(c_uint, 0x00000800);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB2 = @as(c_uint, 0x00000700);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB1 = @as(c_uint, 0x00000600);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB0 = @as(c_uint, 0x00000500);
pub const CKMD_TDCTRIGSRC_STOP_SRC_GPI = @as(c_uint, 0x00000400);
pub const CKMD_TDCTRIGSRC_STOP_SRC_LFCLK_DLY = @as(c_uint, 0x00000300);
pub const CKMD_TDCTRIGSRC_STOP_SRC_LFXT = @as(c_uint, 0x00000200);
pub const CKMD_TDCTRIGSRC_STOP_SRC_LFOSC = @as(c_uint, 0x00000100);
pub const CKMD_TDCTRIGSRC_STOP_SRC_LFTICK = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGSRC_START_POL = @as(c_uint, 0x00000080);
pub const CKMD_TDCTRIGSRC_START_POL_M = @as(c_uint, 0x00000080);
pub const CKMD_TDCTRIGSRC_START_POL_S = @as(c_uint, 7);
pub const CKMD_TDCTRIGSRC_START_POL_LOW = @as(c_uint, 0x00000080);
pub const CKMD_TDCTRIGSRC_START_POL_HIGH = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGSRC_START_SRC_W = @as(c_uint, 5);
pub const CKMD_TDCTRIGSRC_START_SRC_M = @as(c_uint, 0x0000001F);
pub const CKMD_TDCTRIGSRC_START_SRC_S = @as(c_uint, 0);
pub const CKMD_TDCTRIGSRC_START_SRC_TDC_PRE = @as(c_uint, 0x0000001F);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB15 = @as(c_uint, 0x00000014);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB14 = @as(c_uint, 0x00000013);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB13 = @as(c_uint, 0x00000012);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB12 = @as(c_uint, 0x00000011);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB11 = @as(c_uint, 0x00000010);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB10 = @as(c_uint, 0x0000000F);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB9 = @as(c_uint, 0x0000000E);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB8 = @as(c_uint, 0x0000000D);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB7 = @as(c_uint, 0x0000000C);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB6 = @as(c_uint, 0x0000000B);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB5 = @as(c_uint, 0x0000000A);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB4 = @as(c_uint, 0x00000009);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB3 = @as(c_uint, 0x00000008);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB2 = @as(c_uint, 0x00000007);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB1 = @as(c_uint, 0x00000006);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB0 = @as(c_uint, 0x00000005);
pub const CKMD_TDCTRIGSRC_START_SRC_GPI = @as(c_uint, 0x00000004);
pub const CKMD_TDCTRIGSRC_START_SRC_LFCLK_DLY = @as(c_uint, 0x00000003);
pub const CKMD_TDCTRIGSRC_START_SRC_LFXT = @as(c_uint, 0x00000002);
pub const CKMD_TDCTRIGSRC_START_SRC_LFOSC = @as(c_uint, 0x00000001);
pub const CKMD_TDCTRIGSRC_START_SRC_LFTICK = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGCNT_CNT_W = @as(c_uint, 16);
pub const CKMD_TDCTRIGCNT_CNT_M = @as(c_uint, 0x0000FFFF);
pub const CKMD_TDCTRIGCNT_CNT_S = @as(c_uint, 0);
pub const CKMD_TDCTRIGCNTLOAD_CNT_W = @as(c_uint, 16);
pub const CKMD_TDCTRIGCNTLOAD_CNT_M = @as(c_uint, 0x0000FFFF);
pub const CKMD_TDCTRIGCNTLOAD_CNT_S = @as(c_uint, 0);
pub const CKMD_TDCTRIGCNTCFG_EN = @as(c_uint, 0x00000001);
pub const CKMD_TDCTRIGCNTCFG_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_TDCTRIGCNTCFG_EN_S = @as(c_uint, 0);
pub const CKMD_TDCPRECTL_RESET_N = @as(c_uint, 0x00000080);
pub const CKMD_TDCPRECTL_RESET_N_M = @as(c_uint, 0x00000080);
pub const CKMD_TDCPRECTL_RESET_N_S = @as(c_uint, 7);
pub const CKMD_TDCPRECTL_RATIO = @as(c_uint, 0x00000040);
pub const CKMD_TDCPRECTL_RATIO_M = @as(c_uint, 0x00000040);
pub const CKMD_TDCPRECTL_RATIO_S = @as(c_uint, 6);
pub const CKMD_TDCPRECTL_RATIO_DIV64 = @as(c_uint, 0x00000040);
pub const CKMD_TDCPRECTL_RATIO_DIV16 = @as(c_uint, 0x00000000);
pub const CKMD_TDCPRECTL_SRC_W = @as(c_uint, 5);
pub const CKMD_TDCPRECTL_SRC_M = @as(c_uint, 0x0000001F);
pub const CKMD_TDCPRECTL_SRC_S = @as(c_uint, 0);
pub const CKMD_TDCPRECTL_SRC_HFXT = @as(c_uint, 0x00000016);
pub const CKMD_TDCPRECTL_SRC_HFOSC = @as(c_uint, 0x00000015);
pub const CKMD_TDCPRECTL_SRC_DTB15 = @as(c_uint, 0x00000014);
pub const CKMD_TDCPRECTL_SRC_DTB14 = @as(c_uint, 0x00000013);
pub const CKMD_TDCPRECTL_SRC_DTB13 = @as(c_uint, 0x00000012);
pub const CKMD_TDCPRECTL_SRC_DTB12 = @as(c_uint, 0x00000011);
pub const CKMD_TDCPRECTL_SRC_DTB11 = @as(c_uint, 0x00000010);
pub const CKMD_TDCPRECTL_SRC_DTB10 = @as(c_uint, 0x0000000F);
pub const CKMD_TDCPRECTL_SRC_DTB9 = @as(c_uint, 0x0000000E);
pub const CKMD_TDCPRECTL_SRC_DTB8 = @as(c_uint, 0x0000000D);
pub const CKMD_TDCPRECTL_SRC_DTB7 = @as(c_uint, 0x0000000C);
pub const CKMD_TDCPRECTL_SRC_DTB6 = @as(c_uint, 0x0000000B);
pub const CKMD_TDCPRECTL_SRC_DTB5 = @as(c_uint, 0x0000000A);
pub const CKMD_TDCPRECTL_SRC_DTB4 = @as(c_uint, 0x00000009);
pub const CKMD_TDCPRECTL_SRC_DTB3 = @as(c_uint, 0x00000008);
pub const CKMD_TDCPRECTL_SRC_DTB2 = @as(c_uint, 0x00000007);
pub const CKMD_TDCPRECTL_SRC_DTB1 = @as(c_uint, 0x00000006);
pub const CKMD_TDCPRECTL_SRC_DTB0 = @as(c_uint, 0x00000005);
pub const CKMD_TDCPRECTL_SRC_GPI = @as(c_uint, 0x00000004);
pub const CKMD_TDCPRECTL_SRC_LFCLK_DLY = @as(c_uint, 0x00000003);
pub const CKMD_TDCPRECTL_SRC_LFXT = @as(c_uint, 0x00000002);
pub const CKMD_TDCPRECTL_SRC_LFOSC = @as(c_uint, 0x00000001);
pub const CKMD_TDCPRECTL_SRC_LFTICK = @as(c_uint, 0x00000000);
pub const CKMD_TDCPRECNTR_CAPT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_TDCPRECNTR_CAPT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hexadecimal);
pub const CKMD_TDCPRECNTR_CAPT_S = @as(c_uint, 16);
pub const CKMD_TDCPRECNTR_CNT_W = @as(c_uint, 16);
pub const CKMD_TDCPRECNTR_CNT_M = @as(c_uint, 0x0000FFFF);
pub const CKMD_TDCPRECNTR_CNT_S = @as(c_uint, 0);
pub const CKMD_WDTCNT_VAL_W = @as(c_uint, 32);
pub const CKMD_WDTCNT_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hexadecimal);
pub const CKMD_WDTCNT_VAL_S = @as(c_uint, 0);
pub const CKMD_WDTTEST_STALLEN = @as(c_uint, 0x00000001);
pub const CKMD_WDTTEST_STALLEN_M = @as(c_uint, 0x00000001);
pub const CKMD_WDTTEST_STALLEN_S = @as(c_uint, 0);
pub const CKMD_WDTTEST_STALLEN_EN = @as(c_uint, 0x00000001);
pub const CKMD_WDTTEST_STALLEN_DIS = @as(c_uint, 0x00000000);
pub const CKMD_WDTLOCK_STAT_W = @as(c_uint, 32);
pub const CKMD_WDTLOCK_STAT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hexadecimal);
pub const CKMD_WDTLOCK_STAT_S = @as(c_uint, 0);
