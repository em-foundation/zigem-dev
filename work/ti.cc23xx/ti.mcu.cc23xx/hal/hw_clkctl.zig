pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):89:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):95:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):193:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):215:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):223:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 17);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "17.0.6 (https://github.com/ziglang/zig-bootstrap 4c78aa1bba84dbd324e178932cd52221417f63da)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 17.0.6 (https://github.com/ziglang/zig-bootstrap 4c78aa1bba84dbd324e178932cd52221417f63da)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _ILP32 = @as(c_int, 1);
pub const __ILP32__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 32);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 32);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 32);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 32);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 4);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 4);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 4);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __PTRDIFF_TYPE__ = c_int;
pub const __PTRDIFF_FMTd__ = "d";
pub const __PTRDIFF_FMTi__ = "i";
pub const __INTPTR_TYPE__ = c_int;
pub const __INTPTR_FMTd__ = "d";
pub const __INTPTR_FMTi__ = "i";
pub const __SIZE_TYPE__ = c_uint;
pub const __SIZE_FMTo__ = "o";
pub const __SIZE_FMTu__ = "u";
pub const __SIZE_FMTx__ = "x";
pub const __SIZE_FMTX__ = "X";
pub const __WCHAR_TYPE__ = c_uint;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_uint;
pub const __UINTPTR_FMTo__ = "o";
pub const __UINTPTR_FMTu__ = "u";
pub const __UINTPTR_FMTx__ = "x";
pub const __UINTPTR_FMTX__ = "X";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 15);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 53);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __LDBL_MAX_EXP__ = @as(c_int, 1024);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = @as(c_int, 32);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 8);
pub const __CHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 1);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 1);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __ELF__ = @as(c_int, 1);
pub const __ARMEL__ = @as(c_int, 1);
pub const __arm = @as(c_int, 1);
pub const __arm__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __ARM_ARCH_4T__ = @as(c_int, 1);
pub const __ARM_ARCH = @as(c_int, 4);
pub const __ARM_ARCH_ISA_ARM = @as(c_int, 1);
pub const __ARM_ARCH_ISA_THUMB = @as(c_int, 1);
pub const __ARM_32BIT_STATE = @as(c_int, 1);
pub const __ARM_FEATURE_UNALIGNED = @as(c_int, 1);
pub const __ARM_FP = @as(c_int, 0xc);
pub const __ARM_ACLE = @as(c_int, 200);
pub const __ARM_FP16_FORMAT_IEEE = @as(c_int, 1);
pub const __ARM_FP16_ARGS = @as(c_int, 1);
pub const __ARM_EABI__ = @as(c_int, 1);
pub const __ARM_PCS = @as(c_int, 1);
pub const __THUMBEL__ = @as(c_int, 1);
pub const __thumb__ = @as(c_int, 1);
pub const __APCS_32__ = @as(c_int, 1);
pub const __VFP_FP__ = @as(c_int, 1);
pub const __ARM_VFPV2__ = @as(c_int, 1);
pub const __ARM_VFPV3__ = @as(c_int, 1);
pub const __ARM_SIZEOF_WCHAR_T = @as(c_int, 4);
pub const __ARM_SIZEOF_MINIMAL_ENUM = @as(c_int, 4);
pub const __ARM_FEATURE_DSP = @as(c_int, 1);
pub const __ARM_FEATURE_QBIT = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 0);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const __HW_CLKCTL_H__ = "";
pub const CLKCTL_O_DESC = @as(c_uint, 0x00000000);
pub const CLKCTL_O_DESCEX0 = @as(c_uint, 0x00000004);
pub const CLKCTL_O_DESCEX1 = @as(c_uint, 0x00000008);
pub const CLKCTL_O_CLKCFG0 = @as(c_uint, 0x0000000C);
pub const CLKCTL_O_CLKCFG1 = @as(c_uint, 0x00000010);
pub const CLKCTL_O_CLKENSET0 = @as(c_uint, 0x00000014);
pub const CLKCTL_O_CLKENSET1 = @as(c_uint, 0x00000018);
pub const CLKCTL_O_CLKENCLR0 = @as(c_uint, 0x00000020);
pub const CLKCTL_O_CLKENCLR1 = @as(c_uint, 0x00000024);
pub const CLKCTL_O_STBYPTR = @as(c_uint, 0x0000003C);
pub const CLKCTL_O_IDLECFG = @as(c_uint, 0x00000048);
pub const CLKCTL_DESC_MODID_W = @as(c_uint, 16);
pub const CLKCTL_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const CLKCTL_DESC_MODID_S = @as(c_uint, 16);
pub const CLKCTL_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const CLKCTL_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const CLKCTL_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const CLKCTL_DESC_INSTIDX_W = @as(c_uint, 4);
pub const CLKCTL_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const CLKCTL_DESC_INSTIDX_S = @as(c_uint, 8);
pub const CLKCTL_DESC_MAJREV_W = @as(c_uint, 4);
pub const CLKCTL_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const CLKCTL_DESC_MAJREV_S = @as(c_uint, 4);
pub const CLKCTL_DESC_MINREV_W = @as(c_uint, 4);
pub const CLKCTL_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const CLKCTL_DESC_MINREV_S = @as(c_uint, 0);
pub const CLKCTL_DESCEX0_LGPT3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_DESCEX0_LGPT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_DESCEX0_LGPT3_S = @as(c_uint, 30);
pub const CLKCTL_DESCEX0_LGPT3_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_DESCEX0_LGPT3_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LGPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_DESCEX0_LGPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_DESCEX0_LGPT2_S = @as(c_uint, 29);
pub const CLKCTL_DESCEX0_LGPT2_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_DESCEX0_LGPT2_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LGPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_DESCEX0_LGPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_DESCEX0_LGPT1_S = @as(c_uint, 28);
pub const CLKCTL_DESCEX0_LGPT1_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_DESCEX0_LGPT1_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LGPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_DESCEX0_LGPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_DESCEX0_LGPT0_S = @as(c_uint, 27);
pub const CLKCTL_DESCEX0_LGPT0_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_DESCEX0_LGPT0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_DMA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_DESCEX0_DMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_DESCEX0_DMA_S = @as(c_uint, 17);
pub const CLKCTL_DESCEX0_DMA_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_DESCEX0_DMA_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LAES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_DESCEX0_LAES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_DESCEX0_LAES_S = @as(c_uint, 16);
pub const CLKCTL_DESCEX0_LAES_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_DESCEX0_LAES_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_ADC0 = @as(c_uint, 0x00004000);
pub const CLKCTL_DESCEX0_ADC0_M = @as(c_uint, 0x00004000);
pub const CLKCTL_DESCEX0_ADC0_S = @as(c_uint, 14);
pub const CLKCTL_DESCEX0_ADC0_IP_AVAIL = @as(c_uint, 0x00004000);
pub const CLKCTL_DESCEX0_ADC0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_SPI0 = @as(c_uint, 0x00000400);
pub const CLKCTL_DESCEX0_SPI0_M = @as(c_uint, 0x00000400);
pub const CLKCTL_DESCEX0_SPI0_S = @as(c_uint, 10);
pub const CLKCTL_DESCEX0_SPI0_IP_AVAIL = @as(c_uint, 0x00000400);
pub const CLKCTL_DESCEX0_SPI0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_I2C0 = @as(c_uint, 0x00000040);
pub const CLKCTL_DESCEX0_I2C0_M = @as(c_uint, 0x00000040);
pub const CLKCTL_DESCEX0_I2C0_S = @as(c_uint, 6);
pub const CLKCTL_DESCEX0_I2C0_IP_AVAIL = @as(c_uint, 0x00000040);
pub const CLKCTL_DESCEX0_I2C0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_UART0 = @as(c_uint, 0x00000004);
pub const CLKCTL_DESCEX0_UART0_M = @as(c_uint, 0x00000004);
pub const CLKCTL_DESCEX0_UART0_S = @as(c_uint, 2);
pub const CLKCTL_DESCEX0_UART0_IP_AVAIL = @as(c_uint, 0x00000004);
pub const CLKCTL_DESCEX0_UART0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LRFD = @as(c_uint, 0x00000002);
pub const CLKCTL_DESCEX0_LRFD_M = @as(c_uint, 0x00000002);
pub const CLKCTL_DESCEX0_LRFD_S = @as(c_uint, 1);
pub const CLKCTL_DESCEX0_LRFD_IP_AVAIL = @as(c_uint, 0x00000002);
pub const CLKCTL_DESCEX0_LRFD_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_GPIO = @as(c_uint, 0x00000001);
pub const CLKCTL_DESCEX0_GPIO_M = @as(c_uint, 0x00000001);
pub const CLKCTL_DESCEX0_GPIO_S = @as(c_uint, 0);
pub const CLKCTL_DESCEX0_GPIO_IP_AVAIL = @as(c_uint, 0x00000001);
pub const CLKCTL_DESCEX0_GPIO_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX1_FLASHSZ_W = @as(c_uint, 2);
pub const CLKCTL_DESCEX1_FLASHSZ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const CLKCTL_DESCEX1_FLASHSZ_S = @as(c_uint, 30);
pub const CLKCTL_DESCEX1_FLASHSZ_SZ3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const CLKCTL_DESCEX1_FLASHSZ_SZ2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CLKCTL_DESCEX1_FLASHSZ_SZ1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_DESCEX1_FLASHSZ_SZ0 = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX1_SRAMSZ_W = @as(c_uint, 2);
pub const CLKCTL_DESCEX1_SRAMSZ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const CLKCTL_DESCEX1_SRAMSZ_S = @as(c_uint, 28);
pub const CLKCTL_DESCEX1_SRAMSZ_SZ3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const CLKCTL_DESCEX1_SRAMSZ_SZ2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_DESCEX1_SRAMSZ_SZ1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_DESCEX1_SRAMSZ_SZ0 = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX1_ROPT_W = @as(c_uint, 8);
pub const CLKCTL_DESCEX1_ROPT_M = @as(c_uint, 0x0000FF00);
pub const CLKCTL_DESCEX1_ROPT_S = @as(c_uint, 8);
pub const CLKCTL_DESCEX1_ROPT_MAX = @as(c_uint, 0x0000FF00);
pub const CLKCTL_CLKCFG0_LGPT3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT3_S = @as(c_uint, 30);
pub const CLKCTL_CLKCFG0_LGPT3_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT3_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LGPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT2_S = @as(c_uint, 29);
pub const CLKCTL_CLKCFG0_LGPT2_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT2_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LGPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT1_S = @as(c_uint, 28);
pub const CLKCTL_CLKCFG0_LGPT1_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT1_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LGPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT0_S = @as(c_uint, 27);
pub const CLKCTL_CLKCFG0_LGPT0_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_DMA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKCFG0_DMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKCFG0_DMA_S = @as(c_uint, 17);
pub const CLKCTL_CLKCFG0_DMA_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKCFG0_DMA_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LAES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKCFG0_LAES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKCFG0_LAES_S = @as(c_uint, 16);
pub const CLKCTL_CLKCFG0_LAES_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKCFG0_LAES_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_ADC0 = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKCFG0_ADC0_M = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKCFG0_ADC0_S = @as(c_uint, 14);
pub const CLKCTL_CLKCFG0_ADC0_CLK_EN = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKCFG0_ADC0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_SPI0 = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKCFG0_SPI0_M = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKCFG0_SPI0_S = @as(c_uint, 10);
pub const CLKCTL_CLKCFG0_SPI0_CLK_EN = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKCFG0_SPI0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_I2C0 = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKCFG0_I2C0_M = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKCFG0_I2C0_S = @as(c_uint, 6);
pub const CLKCTL_CLKCFG0_I2C0_CLK_EN = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKCFG0_I2C0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_UART0 = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKCFG0_UART0_M = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKCFG0_UART0_S = @as(c_uint, 2);
pub const CLKCTL_CLKCFG0_UART0_CLK_EN = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKCFG0_UART0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LRFD = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKCFG0_LRFD_M = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKCFG0_LRFD_S = @as(c_uint, 1);
pub const CLKCTL_CLKCFG0_LRFD_CLK_EN = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKCFG0_LRFD_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_GPIO = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKCFG0_GPIO_M = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKCFG0_GPIO_S = @as(c_uint, 0);
pub const CLKCTL_CLKCFG0_GPIO_CLK_EN = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKCFG0_GPIO_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LGPT3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT3_S = @as(c_uint, 30);
pub const CLKCTL_CLKENSET0_LGPT3_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT3_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LGPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT2_S = @as(c_uint, 29);
pub const CLKCTL_CLKENSET0_LGPT2_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT2_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LGPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT1_S = @as(c_uint, 28);
pub const CLKCTL_CLKENSET0_LGPT1_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT1_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LGPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT0_S = @as(c_uint, 27);
pub const CLKCTL_CLKENSET0_LGPT0_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_DMA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENSET0_DMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENSET0_DMA_S = @as(c_uint, 17);
pub const CLKCTL_CLKENSET0_DMA_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENSET0_DMA_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LAES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENSET0_LAES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENSET0_LAES_S = @as(c_uint, 16);
pub const CLKCTL_CLKENSET0_LAES_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENSET0_LAES_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_ADC0 = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENSET0_ADC0_M = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENSET0_ADC0_S = @as(c_uint, 14);
pub const CLKCTL_CLKENSET0_ADC0_CLK_SET = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENSET0_ADC0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_SPI0 = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENSET0_SPI0_M = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENSET0_SPI0_S = @as(c_uint, 10);
pub const CLKCTL_CLKENSET0_SPI0_CLK_SET = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENSET0_SPI0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_I2C0 = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENSET0_I2C0_M = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENSET0_I2C0_S = @as(c_uint, 6);
pub const CLKCTL_CLKENSET0_I2C0_CLK_SET = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENSET0_I2C0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_UART0 = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENSET0_UART0_M = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENSET0_UART0_S = @as(c_uint, 2);
pub const CLKCTL_CLKENSET0_UART0_CLK_SET = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENSET0_UART0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LRFD = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENSET0_LRFD_M = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENSET0_LRFD_S = @as(c_uint, 1);
pub const CLKCTL_CLKENSET0_LRFD_CLK_SET = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENSET0_LRFD_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_GPIO = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENSET0_GPIO_M = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENSET0_GPIO_S = @as(c_uint, 0);
pub const CLKCTL_CLKENSET0_GPIO_CLK_SET = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENSET0_GPIO_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LGPT3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT3_S = @as(c_uint, 30);
pub const CLKCTL_CLKENCLR0_LGPT3_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT3_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LGPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT2_S = @as(c_uint, 29);
pub const CLKCTL_CLKENCLR0_LGPT2_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT2_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LGPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT1_S = @as(c_uint, 28);
pub const CLKCTL_CLKENCLR0_LGPT1_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT1_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LGPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT0_S = @as(c_uint, 27);
pub const CLKCTL_CLKENCLR0_LGPT0_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_DMA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENCLR0_DMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENCLR0_DMA_S = @as(c_uint, 17);
pub const CLKCTL_CLKENCLR0_DMA_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENCLR0_DMA_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LAES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENCLR0_LAES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENCLR0_LAES_S = @as(c_uint, 16);
pub const CLKCTL_CLKENCLR0_LAES_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENCLR0_LAES_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_ADC0 = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENCLR0_ADC0_M = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENCLR0_ADC0_S = @as(c_uint, 14);
pub const CLKCTL_CLKENCLR0_ADC0_CLK_CLR = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENCLR0_ADC0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_SPI0 = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENCLR0_SPI0_M = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENCLR0_SPI0_S = @as(c_uint, 10);
pub const CLKCTL_CLKENCLR0_SPI0_CLK_CLR = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENCLR0_SPI0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_I2C0 = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENCLR0_I2C0_M = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENCLR0_I2C0_S = @as(c_uint, 6);
pub const CLKCTL_CLKENCLR0_I2C0_CLK_CLR = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENCLR0_I2C0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_UART0 = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENCLR0_UART0_M = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENCLR0_UART0_S = @as(c_uint, 2);
pub const CLKCTL_CLKENCLR0_UART0_CLK_CLR = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENCLR0_UART0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LRFD = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENCLR0_LRFD_M = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENCLR0_LRFD_S = @as(c_uint, 1);
pub const CLKCTL_CLKENCLR0_LRFD_CLK_CLR = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENCLR0_LRFD_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_GPIO = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENCLR0_GPIO_M = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENCLR0_GPIO_S = @as(c_uint, 0);
pub const CLKCTL_CLKENCLR0_GPIO_CLK_CLR = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENCLR0_GPIO_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_STBYPTR_VAL_W = @as(c_uint, 32);
pub const CLKCTL_STBYPTR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const CLKCTL_STBYPTR_VAL_S = @as(c_uint, 0);
pub const CLKCTL_STBYPTR_VAL_MIN = @as(c_uint, 0x00000000);
pub const CLKCTL_IDLECFG_MODE = @as(c_uint, 0x00000001);
pub const CLKCTL_IDLECFG_MODE_M = @as(c_uint, 0x00000001);
pub const CLKCTL_IDLECFG_MODE_S = @as(c_uint, 0);
pub const CLKCTL_IDLECFG_MODE_LDO_OFF = @as(c_uint, 0x00000001);
pub const CLKCTL_IDLECFG_MODE_LDO_ON = @as(c_uint, 0x00000000);
