pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const int_least64_t = i64;
pub const uint_least64_t = u64;
pub const int_fast64_t = i64;
pub const uint_fast64_t = u64;
pub const int_least32_t = i32;
pub const uint_least32_t = u32;
pub const int_fast32_t = i32;
pub const uint_fast32_t = u32;
pub const int_least16_t = i16;
pub const uint_least16_t = u16;
pub const int_fast16_t = i16;
pub const uint_fast16_t = u16;
pub const int_least8_t = i8;
pub const uint_least8_t = u8;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const intmax_t = c_longlong;
pub const uintmax_t = c_ulonglong;
pub const __copy_table_t = c_int;
pub const NonMaskableInt_IRQn: c_int = -14;
pub const HardFault_IRQn: c_int = -13;
pub const SVCall_IRQn: c_int = -5;
pub const PendSV_IRQn: c_int = -2;
pub const SysTick_IRQn: c_int = -1;
pub const CPUIRQ0_IRQn: c_int = 0;
pub const CPUIRQ1_IRQn: c_int = 1;
pub const CPUIRQ2_IRQn: c_int = 2;
pub const CPUIRQ3_IRQn: c_int = 3;
pub const CPUIRQ4_IRQn: c_int = 4;
pub const GPIO_COMB_IRQn: c_int = 5;
pub const LRFD_IRQ0_IRQn: c_int = 6;
pub const LRFD_IRQ1_IRQn: c_int = 7;
pub const DMA_DONE_COMB_IRQn: c_int = 8;
pub const AES_COMB_IRQn: c_int = 9;
pub const SPI0_COMB_IRQn: c_int = 10;
pub const UART0_COMB_IRQn: c_int = 11;
pub const I2C0_IRQ_IRQn: c_int = 12;
pub const LGPT0_COMB_IRQn: c_int = 13;
pub const LGPT1_COMB_IRQn: c_int = 14;
pub const ADC_COMB_IRQn: c_int = 15;
pub const CPUIRQ16_IRQn: c_int = 16;
pub const LGPT2_COMB_IRQn: c_int = 17;
pub const LGPT3_COMB_IRQn: c_int = 18;
pub const enum_IRQn = c_int;
pub const IRQn_Type = enum_IRQn;
pub const struct_T_UINT32 = extern struct {
    v: u32 align(1) = @import("std").mem.zeroes(u32),
};
pub const struct_T_UINT16_WRITE = extern struct {
    v: u16 align(1) = @import("std").mem.zeroes(u16),
};
pub const struct_T_UINT16_READ = extern struct {
    v: u16 align(1) = @import("std").mem.zeroes(u16),
};
pub const struct_T_UINT32_WRITE = extern struct {
    v: u32 align(1) = @import("std").mem.zeroes(u32),
};
pub const struct_T_UINT32_READ = extern struct {
    v: u32 align(1) = @import("std").mem.zeroes(u32),
}; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:199:27: warning: unable to translate function, demoted to extern
pub extern fn __enable_irq() void; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:210:27: warning: unable to translate function, demoted to extern
pub extern fn __disable_irq() void; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:221:31: warning: unable to translate function, demoted to extern
pub extern fn __get_CONTROL() u32; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:251:27: warning: unable to translate function, demoted to extern
pub extern fn __set_CONTROL(arg_control: u32) void; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:275:31: warning: unable to translate function, demoted to extern
pub extern fn __get_IPSR() u32; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:289:31: warning: unable to translate function, demoted to extern
pub extern fn __get_APSR() u32; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:303:31: warning: unable to translate function, demoted to extern
pub extern fn __get_xPSR() u32; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:317:31: warning: unable to translate function, demoted to extern
pub extern fn __get_PSP() u32; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:347:27: warning: unable to translate function, demoted to extern
pub extern fn __set_PSP(arg_topOfProcStack: u32) void; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:371:31: warning: unable to translate function, demoted to extern
pub extern fn __get_MSP() u32; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:401:27: warning: unable to translate function, demoted to extern
pub extern fn __set_MSP(arg_topOfMainStack: u32) void; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:452:31: warning: unable to translate function, demoted to extern
pub extern fn __get_PRIMASK() u32; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:482:27: warning: unable to translate function, demoted to extern
pub extern fn __set_PRIMASK(arg_priMask: u32) void;
pub inline fn __get_FPSCR() u32 {
    return @as(c_uint, 0);
}
pub inline fn __set_FPSCR(arg_fpscr: u32) void {
    var fpscr = arg_fpscr;
    _ = &fpscr;
    _ = &fpscr;
} // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:936:27: warning: unable to translate function, demoted to extern
pub extern fn __ISB() void; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:947:27: warning: unable to translate function, demoted to extern
pub extern fn __DSB() void; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:958:27: warning: unable to translate function, demoted to extern
pub extern fn __DMB() void;
pub inline fn __REV(arg_value: u32) u32 {
    var value = arg_value;
    _ = &value;
    return __builtin_bswap32(value);
} // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:989:31: warning: unable to translate function, demoted to extern
pub extern fn __REV16(arg_value: u32) u32;
pub inline fn __REVSH(arg_value: i16) i16 {
    var value = arg_value;
    _ = &value;
    return @as(i16, @bitCast(__builtin_bswap16(@as(c_ushort, @bitCast(value)))));
}
pub inline fn __ROR(arg_op1: u32, arg_op2: u32) u32 {
    var op1 = arg_op1;
    _ = &op1;
    var op2 = arg_op2;
    _ = &op2;
    op2 %= @as(u32, @bitCast(@as(c_uint, 32)));
    if (op2 == @as(c_uint, 0)) {
        return op1;
    }
    return (op1 >> @intCast(op2)) | (op1 << @intCast(@as(c_uint, 32) -% op2));
}
pub inline fn __RBIT(arg_value: u32) u32 {
    var value = arg_value;
    _ = &value;
    var result: u32 = undefined;
    _ = &result;
    var s: u32 = (@as(c_uint, 4) *% @as(c_uint, 8)) -% @as(c_uint, 1);
    _ = &s;
    result = value;
    {
        value >>= @intCast(@as(c_uint, 1));
        while (value != @as(c_uint, 0)) : (value >>= @intCast(@as(c_uint, 1))) {
            result <<= @intCast(@as(c_uint, 1));
            result |= @as(u32, @bitCast(value & @as(c_uint, 1)));
            s -%= 1;
        }
    }
    result <<= @intCast(s);
    return result;
}
pub inline fn __CLZ(arg_value: u32) u8 {
    var value = arg_value;
    _ = &value;
    if (value == @as(c_uint, 0)) {
        return 32;
    }
    return @as(u8, @bitCast(@as(i8, @truncate(__builtin_clz(value)))));
}
pub inline fn __SSAT(arg_val: i32, arg_sat: u32) i32 {
    var val = arg_val;
    _ = &val;
    var sat = arg_sat;
    _ = &sat;
    if ((sat >= @as(c_uint, 1)) and (sat <= @as(c_uint, 32))) {
        const max: i32 = @as(i32, @bitCast((@as(c_uint, 1) << @intCast(sat -% @as(c_uint, 1))) -% @as(c_uint, 1)));
        _ = &max;
        const min: i32 = -@as(c_int, 1) - max;
        _ = &min;
        if (val > max) {
            return max;
        } else if (val < min) {
            return min;
        }
    }
    return val;
}
pub inline fn __USAT(arg_val: i32, arg_sat: u32) u32 {
    var val = arg_val;
    _ = &val;
    var sat = arg_sat;
    _ = &sat;
    if (sat <= @as(c_uint, 31)) {
        const max: u32 = (@as(c_uint, 1) << @intCast(sat)) -% @as(c_uint, 1);
        _ = &max;
        if (val > @as(i32, @bitCast(max))) {
            return max;
        } else if (val < @as(c_int, 0)) {
            return 0;
        }
    }
    return @as(u32, @bitCast(val));
} // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:214:14: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_1 = opaque {};
pub const APSR_Type = extern union {
    b: struct_unnamed_1,
    w: u32,
}; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:244:14: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_2 = opaque {};
pub const IPSR_Type = extern union {
    b: struct_unnamed_2,
    w: u32,
}; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:262:14: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_3 = opaque {};
pub const xPSR_Type = extern union {
    b: struct_unnamed_3,
    w: u32,
}; // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:301:14: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_4 = opaque {};
pub const CONTROL_Type = extern union {
    b: struct_unnamed_4,
    w: u32,
};
pub const NVIC_Type = extern struct {
    ISER: [1]u32 = @import("std").mem.zeroes([1]u32),
    RESERVED0: [31]u32 = @import("std").mem.zeroes([31]u32),
    ICER: [1]u32 = @import("std").mem.zeroes([1]u32),
    RESERVED1: [31]u32 = @import("std").mem.zeroes([31]u32),
    ISPR: [1]u32 = @import("std").mem.zeroes([1]u32),
    RESERVED2: [31]u32 = @import("std").mem.zeroes([31]u32),
    ICPR: [1]u32 = @import("std").mem.zeroes([1]u32),
    RESERVED3: [31]u32 = @import("std").mem.zeroes([31]u32),
    RESERVED4: [64]u32 = @import("std").mem.zeroes([64]u32),
    IP: [8]u32 = @import("std").mem.zeroes([8]u32),
};
pub const SCB_Type = extern struct {
    CPUID: u32 = @import("std").mem.zeroes(u32),
    ICSR: u32 = @import("std").mem.zeroes(u32),
    VTOR: u32 = @import("std").mem.zeroes(u32),
    AIRCR: u32 = @import("std").mem.zeroes(u32),
    SCR: u32 = @import("std").mem.zeroes(u32),
    CCR: u32 = @import("std").mem.zeroes(u32),
    RESERVED1: u32 = @import("std").mem.zeroes(u32),
    SHP: [2]u32 = @import("std").mem.zeroes([2]u32),
    SHCSR: u32 = @import("std").mem.zeroes(u32),
};
pub const SysTick_Type = extern struct {
    CTRL: u32 = @import("std").mem.zeroes(u32),
    LOAD: u32 = @import("std").mem.zeroes(u32),
    VAL: u32 = @import("std").mem.zeroes(u32),
    CALIB: u32 = @import("std").mem.zeroes(u32),
};
pub fn __NVIC_EnableIRQ(arg_IRQn_1: IRQn_Type) callconv(.C) void {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.ISER[@as(c_uint, 0)] = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 1) << @intCast(@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(IRQn_1))))) & @as(c_ulong, 31))))));
    }
}
pub fn __NVIC_GetEnableIRQ(arg_IRQn_1: IRQn_Type) callconv(.C) u32 {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        return @as(u32, @bitCast(@as(c_uint, @truncate(if ((@as(c_ulong, @bitCast(@as(c_ulong, @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.ISER[@as(c_uint, 0)]))) & (@as(c_ulong, 1) << @intCast(@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(IRQn_1))))) & @as(c_ulong, 31)))) != @as(c_ulong, 0)) @as(c_ulong, 1) else @as(c_ulong, 0)))));
    } else {
        return @as(c_uint, 0);
    }
    return @import("std").mem.zeroes(u32);
}
pub fn __NVIC_DisableIRQ(arg_IRQn_1: IRQn_Type) callconv(.C) void {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.ICER[@as(c_uint, 0)] = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 1) << @intCast(@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(IRQn_1))))) & @as(c_ulong, 31))))));
    }
}
pub fn __NVIC_GetPendingIRQ(arg_IRQn_1: IRQn_Type) callconv(.C) u32 {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        return @as(u32, @bitCast(@as(c_uint, @truncate(if ((@as(c_ulong, @bitCast(@as(c_ulong, @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.ISPR[@as(c_uint, 0)]))) & (@as(c_ulong, 1) << @intCast(@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(IRQn_1))))) & @as(c_ulong, 31)))) != @as(c_ulong, 0)) @as(c_ulong, 1) else @as(c_ulong, 0)))));
    } else {
        return @as(c_uint, 0);
    }
    return @import("std").mem.zeroes(u32);
}
pub fn __NVIC_SetPendingIRQ(arg_IRQn_1: IRQn_Type) callconv(.C) void {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.ISPR[@as(c_uint, 0)] = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 1) << @intCast(@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(IRQn_1))))) & @as(c_ulong, 31))))));
    }
}
pub fn __NVIC_ClearPendingIRQ(arg_IRQn_1: IRQn_Type) callconv(.C) void {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.ICPR[@as(c_uint, 0)] = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 1) << @intCast(@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(IRQn_1))))) & @as(c_ulong, 31))))));
    }
}
pub fn __NVIC_SetPriority(arg_IRQn_1: IRQn_Type, arg_priority: u32) callconv(.C) void {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    var priority = arg_priority;
    _ = &priority;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.IP[@as(u32, @bitCast(@as(i32, @bitCast(IRQn_1)))) >> @intCast(2)] = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, @bitCast(@as(c_ulong, @as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.IP[@as(u32, @bitCast(@as(i32, @bitCast(IRQn_1)))) >> @intCast(2)]))) & ~(@as(c_ulong, 255) << @intCast((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 3)) *% @as(c_ulong, 8))))))) | (((priority << @intCast(@as(c_uint, 8) -% @as(c_uint, 2))) & @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 255)))))) << @intCast((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 3)) *% @as(c_ulong, 8)));
    } else {
        @as([*c]SCB_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 3328))).*.SHP[((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 15)) -% @as(c_ulong, 8)) >> @intCast(2)] = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, @bitCast(@as(c_ulong, @as([*c]SCB_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 3328))).*.SHP[((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 15)) -% @as(c_ulong, 8)) >> @intCast(2)]))) & ~(@as(c_ulong, 255) << @intCast((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 3)) *% @as(c_ulong, 8))))))) | (((priority << @intCast(@as(c_uint, 8) -% @as(c_uint, 2))) & @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 255)))))) << @intCast((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 3)) *% @as(c_ulong, 8)));
    }
}
pub fn __NVIC_GetPriority(arg_IRQn_1: IRQn_Type) callconv(.C) u32 {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    if (@as(i32, @bitCast(IRQn_1)) >= @as(c_int, 0)) {
        return ((@as([*c]NVIC_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 256))).*.IP[@as(u32, @bitCast(@as(i32, @bitCast(IRQn_1)))) >> @intCast(2)] >> @intCast((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 3)) *% @as(c_ulong, 8))) & @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 255)))))) >> @intCast(@as(c_uint, 8) -% @as(c_uint, 2));
    } else {
        return ((@as([*c]SCB_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 3328))).*.SHP[((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 15)) -% @as(c_ulong, 8)) >> @intCast(2)] >> @intCast((@as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(i32, @bitCast(IRQn_1))))))) & @as(c_ulong, 3)) *% @as(c_ulong, 8))) & @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 255)))))) >> @intCast(@as(c_uint, 8) -% @as(c_uint, 2));
    }
    return @import("std").mem.zeroes(u32);
}
pub fn NVIC_EncodePriority(arg_PriorityGroup: u32, arg_PreemptPriority: u32, arg_SubPriority: u32) callconv(.C) u32 {
    var PriorityGroup = arg_PriorityGroup;
    _ = &PriorityGroup;
    var PreemptPriority = arg_PreemptPriority;
    _ = &PreemptPriority;
    var SubPriority = arg_SubPriority;
    _ = &SubPriority;
    var PriorityGroupTmp: u32 = PriorityGroup & @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 7)))));
    _ = &PriorityGroupTmp;
    var PreemptPriorityBits: u32 = undefined;
    _ = &PreemptPriorityBits;
    var SubPriorityBits: u32 = undefined;
    _ = &SubPriorityBits;
    PreemptPriorityBits = if ((@as(c_ulong, 7) -% @as(c_ulong, @bitCast(@as(c_ulong, PriorityGroupTmp)))) > @as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(c_uint, 2))))))) @as(u32, @bitCast(@as(c_uint, 2))) else @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 7) -% @as(c_ulong, @bitCast(@as(c_ulong, PriorityGroupTmp)))))));
    SubPriorityBits = if ((PriorityGroupTmp +% @as(u32, @bitCast(@as(c_uint, 2)))) < @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 7)))))) @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 0))))) else @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, @bitCast(@as(c_ulong, PriorityGroupTmp))) -% @as(c_ulong, 7)) +% @as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(c_uint, 2))))))))));
    return ((PreemptPriority & @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, 1) << @intCast(PreemptPriorityBits)) -% @as(c_ulong, 1)))))) << @intCast(SubPriorityBits)) | (SubPriority & @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, 1) << @intCast(SubPriorityBits)) -% @as(c_ulong, 1))))));
}
pub fn NVIC_DecodePriority(arg_Priority: u32, arg_PriorityGroup: u32, pPreemptPriority: [*c]u32, pSubPriority: [*c]u32) callconv(.C) void {
    var Priority = arg_Priority;
    _ = &Priority;
    var PriorityGroup = arg_PriorityGroup;
    _ = &PriorityGroup;
    _ = &pPreemptPriority;
    _ = &pSubPriority;
    var PriorityGroupTmp: u32 = PriorityGroup & @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 7)))));
    _ = &PriorityGroupTmp;
    var PreemptPriorityBits: u32 = undefined;
    _ = &PreemptPriorityBits;
    var SubPriorityBits: u32 = undefined;
    _ = &SubPriorityBits;
    PreemptPriorityBits = if ((@as(c_ulong, 7) -% @as(c_ulong, @bitCast(@as(c_ulong, PriorityGroupTmp)))) > @as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(c_uint, 2))))))) @as(u32, @bitCast(@as(c_uint, 2))) else @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 7) -% @as(c_ulong, @bitCast(@as(c_ulong, PriorityGroupTmp)))))));
    SubPriorityBits = if ((PriorityGroupTmp +% @as(u32, @bitCast(@as(c_uint, 2)))) < @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 7)))))) @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 0))))) else @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, @bitCast(@as(c_ulong, PriorityGroupTmp))) -% @as(c_ulong, 7)) +% @as(c_ulong, @bitCast(@as(c_ulong, @as(u32, @bitCast(@as(c_uint, 2))))))))));
    pPreemptPriority.* = (Priority >> @intCast(SubPriorityBits)) & @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, 1) << @intCast(PreemptPriorityBits)) -% @as(c_ulong, 1)))));
    pSubPriority.* = Priority & @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, 1) << @intCast(SubPriorityBits)) -% @as(c_ulong, 1)))));
}
pub fn __NVIC_SetVector(arg_IRQn_1: IRQn_Type, arg_vector: u32) callconv(.C) void {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    var vector = arg_vector;
    _ = &vector;
    var vectors: [*c]u32 = @as([*c]u32, @ptrFromInt(@as([*c]SCB_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 3328))).*.VTOR));
    _ = &vectors;
    (blk: {
        const tmp = @as(i32, @bitCast(IRQn_1)) + @as(c_int, 16);
        if (tmp >= 0) break :blk vectors + @as(usize, @intCast(tmp)) else break :blk vectors - ~@as(usize, @bitCast(@as(isize, @intCast(tmp)) +% -1));
    }).* = vector;
}
pub fn __NVIC_GetVector(arg_IRQn_1: IRQn_Type) callconv(.C) u32 {
    var IRQn_1 = arg_IRQn_1;
    _ = &IRQn_1;
    var vectors: [*c]u32 = @as([*c]u32, @ptrFromInt(@as([*c]SCB_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 3328))).*.VTOR));
    _ = &vectors;
    return (blk: {
        const tmp = @as(i32, @bitCast(IRQn_1)) + @as(c_int, 16);
        if (tmp >= 0) break :blk vectors + @as(usize, @intCast(tmp)) else break :blk vectors - ~@as(usize, @bitCast(@as(isize, @intCast(tmp)) +% -1));
    }).*;
} // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
// ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:987:34: warning: unable to translate function, demoted to extern
pub extern fn __NVIC_SystemReset() callconv(.C) noreturn;
pub fn SCB_GetFPUType() callconv(.C) u32 {
    return 0;
}
pub fn SysTick_Config(arg_ticks: u32) callconv(.C) u32 {
    var ticks = arg_ticks;
    _ = &ticks;
    if ((@as(c_ulong, @bitCast(@as(c_ulong, ticks))) -% @as(c_ulong, 1)) > @as(c_ulong, 16777215)) {
        return @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 1)))));
    }
    @as([*c]SysTick_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 16))).*.LOAD = @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, @bitCast(@as(c_ulong, ticks))) -% @as(c_ulong, 1)))));
    __NVIC_SetPriority(SysTick_IRQn, @as(u32, @bitCast(@as(c_uint, @truncate((@as(c_ulong, 1) << @intCast(2)) -% @as(c_ulong, 1))))));
    @as([*c]SysTick_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 16))).*.VAL = 0;
    @as([*c]SysTick_Type, @ptrFromInt(@as(c_ulong, 3758153728) +% @as(c_ulong, 16))).*.CTRL = @as(u32, @bitCast(@as(c_uint, @truncate(((@as(c_ulong, 1) << @intCast(2)) | (@as(c_ulong, 1) << @intCast(1))) | @as(c_ulong, 1)))));
    return @as(u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 0)))));
} // ti.cc23xx/ti.distro.cc23xx/inc/hw_platform.h:77:18: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_5 = opaque {};
pub const bldrEntryFlags_t = extern union {
    val32: u32,
    bldr: struct_unnamed_5,
}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_ccfg.h:61:26: warning: struct demoted to opaque type - has bitfield
pub const struct_serialRomBldrParam_struct_8 = opaque {};
const union_unnamed_7 = extern union {
    val32: u32,
    serialRomBldrParamStruct: struct_serialRomBldrParam_struct_8,
};
const struct_unnamed_6 = extern struct {
    pBldrVtor: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    bldrParam: union_unnamed_7 = @import("std").mem.zeroes(union_unnamed_7),
    pAppVtor: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    crc32: u32 = @import("std").mem.zeroes(u32),
}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_ccfg.h:98:18: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_9 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_ccfg.h:113:18: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_10 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_ccfg.h:134:30: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_14 = opaque {};
const union_unnamed_13 = extern union {
    auxSectors: u32,
    unnamed_0: struct_unnamed_14,
};
const struct_unnamed_12 = extern struct {
    mainSectors0_31: u32 = @import("std").mem.zeroes(u32),
    mainSectors32_255: u32 = @import("std").mem.zeroes(u32),
    unnamed_0: union_unnamed_13 = @import("std").mem.zeroes(union_unnamed_13),
};
const struct_unnamed_15 = extern struct {
    mainSectors0_31: u32 = @import("std").mem.zeroes(u32),
    mainSectors32_255: u32 = @import("std").mem.zeroes(u32),
};
const struct_unnamed_11 = extern struct {
    writeEraseProt: struct_unnamed_12 = @import("std").mem.zeroes(struct_unnamed_12),
    res: u32 = @import("std").mem.zeroes(u32),
    chipEraseRetain: struct_unnamed_15 = @import("std").mem.zeroes(struct_unnamed_15),
    res0: [2]u32 = @import("std").mem.zeroes([2]u32),
};
const union_unnamed_18 = extern union {
    val32: [31]u32,
    val8: [124]u8,
};
const struct_unnamed_17 = extern struct {
    unnamed_0: union_unnamed_18 = @import("std").mem.zeroes(union_unnamed_18),
    crc32: u32 = @import("std").mem.zeroes(u32),
};
const union_unnamed_16 = extern union {
    unnamed_0: struct_unnamed_17,
};
const struct_unnamed_19 = extern struct {
    authorization: u8 = @import("std").mem.zeroes(u8),
    allowBldr: u8 = @import("std").mem.zeroes(u8),
    res0: [2]u8 = @import("std").mem.zeroes([2]u8),
    pwdId: [8]u8 = @import("std").mem.zeroes([8]u8),
    pwdHash: [32]u8 = @import("std").mem.zeroes([32]u8),
    crc32: u32 = @import("std").mem.zeroes(u32),
};
pub const ccfg_t = extern struct {
    bootCfg: struct_unnamed_6 = @import("std").mem.zeroes(struct_unnamed_6),
    hwOpts: [2]u32 = @import("std").mem.zeroes([2]u32),
    permissions: struct_unnamed_9 = @import("std").mem.zeroes(struct_unnamed_9),
    misc: struct_unnamed_10 = @import("std").mem.zeroes(struct_unnamed_10),
    flashProt: struct_unnamed_11 = @import("std").mem.zeroes(struct_unnamed_11),
    hwInitCopyList: [451]u32 = @import("std").mem.zeroes([451]u32),
    crc32: u32 = @import("std").mem.zeroes(u32),
    userRecord: union_unnamed_16 = @import("std").mem.zeroes(union_unnamed_16),
    debugCfg: struct_unnamed_19 = @import("std").mem.zeroes(struct_unnamed_19),
};
pub const serialRomBldrParam_t = struct_serialRomBldrParam_struct_8;
pub extern const ccfg: ccfg_t;
const struct_unnamed_21 = extern struct {
    magicWord: u32 = @import("std").mem.zeroes(u32),
    numBits: u8 = @import("std").mem.zeroes(u8),
    data: [23]u8 = @import("std").mem.zeroes([23]u8),
}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:62:30: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_24 = opaque {};
const union_unnamed_23 = extern union {
    val16: u16,
    unnamed_0: struct_unnamed_24,
}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:71:30: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_26 = opaque {};
const union_unnamed_25 = extern union {
    val16: u16,
    unnamed_0: struct_unnamed_26,
};
const struct_unnamed_22 = extern struct {
    initial: union_unnamed_23 = @import("std").mem.zeroes(union_unnamed_23),
    final: union_unnamed_25 = @import("std").mem.zeroes(union_unnamed_25),
};
const struct_unnamed_28 = extern struct {
    initial: u8 = @import("std").mem.zeroes(u8),
    final: u8 = @import("std").mem.zeroes(u8),
};
const struct_unnamed_29 = extern struct {
    initial: u8 = @import("std").mem.zeroes(u8),
    final: u8 = @import("std").mem.zeroes(u8),
};
const struct_unnamed_27 = extern struct {
    flws1t: struct_unnamed_28 = @import("std").mem.zeroes(struct_unnamed_28),
    flws2t: struct_unnamed_29 = @import("std").mem.zeroes(struct_unnamed_29),
    ptrmc0: u32 = @import("std").mem.zeroes(u32),
    b0trmc1: u32 = @import("std").mem.zeroes(u32),
    b0trmc0: u32 = @import("std").mem.zeroes(u32),
}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:99:30: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_32 = opaque {};
const union_unnamed_31 = extern union {
    val32: u32,
    unnamed_0: struct_unnamed_32,
}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:116:30: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_34 = opaque {};
const union_unnamed_33 = extern union {
    val32: u32,
    unnamed_0: struct_unnamed_34,
};
const struct_unnamed_30 = extern struct {
    timmute0: union_unnamed_31 = @import("std").mem.zeroes(union_unnamed_31),
    timmute1: union_unnamed_33 = @import("std").mem.zeroes(union_unnamed_33),
}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:131:17: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_20 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:155:18: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_35 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:171:18: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_36 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:198:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_39 = opaque {};
const union_unnamed_38 = extern union {
    val32: u32,
    unnamed_0: struct_unnamed_39,
};
const struct_unnamed_37 = extern struct {
    uuid: [8]u8 = @import("std").mem.zeroes([8]u8),
    bleAddr: [6]u8 = @import("std").mem.zeroes([6]u8),
    res0: [2]u8 = @import("std").mem.zeroes([2]u8),
    macAddr: [8]u8 = @import("std").mem.zeroes([8]u8),
    dieId: [16]u8 = @import("std").mem.zeroes([16]u8),
    res1: u32 = @import("std").mem.zeroes(u32),
    partId: union_unnamed_38 = @import("std").mem.zeroes(union_unnamed_38),
}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:224:30: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_43 = opaque {};
const union_unnamed_42 = extern union {
    auxSectors: u32,
    unnamed_0: struct_unnamed_43,
};
const struct_unnamed_41 = extern struct {
    mainSectors0_31: u32 = @import("std").mem.zeroes(u32),
    mainSectors32_255: u32 = @import("std").mem.zeroes(u32),
    unnamed_0: union_unnamed_42 = @import("std").mem.zeroes(union_unnamed_42),
};
const struct_unnamed_40 = extern struct {
    writeEraseProt: struct_unnamed_41 = @import("std").mem.zeroes(struct_unnamed_41),
    res: u32 = @import("std").mem.zeroes(u32),
};
const struct_unnamed_46 = extern struct {
    odpNmos: u16 = @import("std").mem.zeroes(u16),
    odpPmos: u16 = @import("std").mem.zeroes(u16),
};
const struct_unnamed_47 = extern struct {
    odpNmos: u16 = @import("std").mem.zeroes(u16),
    odpPmos: u16 = @import("std").mem.zeroes(u16),
}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:275:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_48 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:283:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_49 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:291:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_50 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:298:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_51 = opaque {};
pub const struct_appTrimsExtCc23x0r5_s_45 = extern struct {
    res: [40]u8 = @import("std").mem.zeroes([40]u8),
    odpVal1p8v: struct_unnamed_46 = @import("std").mem.zeroes(struct_unnamed_46),
    odpVal1p2v: struct_unnamed_47 = @import("std").mem.zeroes(struct_unnamed_47),
    tfwMp: struct_unnamed_48 = @import("std").mem.zeroes(struct_unnamed_48),
    tfwFt: struct_unnamed_49 = @import("std").mem.zeroes(struct_unnamed_49),
    ateMpRev: struct_unnamed_50 = @import("std").mem.zeroes(struct_unnamed_50),
    ateFtRev: struct_unnamed_51 = @import("std").mem.zeroes(struct_unnamed_51),
};
pub const struct_appTrimsExt_struct_44 = extern struct {
    cc23x0r5: struct_appTrimsExtCc23x0r5_s_45 = @import("std").mem.zeroes(struct_appTrimsExtCc23x0r5_s_45),
}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:327:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_54 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:332:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_55 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:338:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_56 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:344:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_57 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:349:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_58 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:355:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_59 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:361:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_60 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:368:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_61 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:374:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_62 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:380:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_63 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:386:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_64 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:391:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_65 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:401:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_66 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:407:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_67 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:414:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_68 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:419:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_69 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:429:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_70 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:435:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_71 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:445:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_72 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:491:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_73 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:530:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_74 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:538:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_75 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:544:25: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_76 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:549:25: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_77 = opaque {};
const struct_unnamed_78 = extern struct {
    auxDiodeGnd: u16 = @import("std").mem.zeroes(u16),
    auxDiodeVoltage: u16 = @import("std").mem.zeroes(u16),
};
const struct_unnamed_79 = extern struct {
    auxDiodeGnd: u16 = @import("std").mem.zeroes(u16),
    auxDiodeVoltage: u16 = @import("std").mem.zeroes(u16),
}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:564:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_80 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:573:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_81 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:580:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_82 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:585:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_83 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:593:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_84 = opaque {}; // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:602:26: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_85 = opaque {};
pub const struct_appTrimsCc23x0r5_s_53 = extern struct {
    pa0: struct_unnamed_54 = @import("std").mem.zeroes(struct_unnamed_54),
    atstRefH: struct_unnamed_55 = @import("std").mem.zeroes(struct_unnamed_55),
    lna: struct_unnamed_56 = @import("std").mem.zeroes(struct_unnamed_56),
    ifampRfLdo: struct_unnamed_57 = @import("std").mem.zeroes(struct_unnamed_57),
    divLdo: struct_unnamed_58 = @import("std").mem.zeroes(struct_unnamed_58),
    tdcLdo: struct_unnamed_59 = @import("std").mem.zeroes(struct_unnamed_59),
    dcoLdo0: struct_unnamed_60 = @import("std").mem.zeroes(struct_unnamed_60),
    ifadcAldo: struct_unnamed_61 = @import("std").mem.zeroes(struct_unnamed_61),
    ifadcDldo: struct_unnamed_62 = @import("std").mem.zeroes(struct_unnamed_62),
    dco: struct_unnamed_63 = @import("std").mem.zeroes(struct_unnamed_63),
    ifadcQuant: struct_unnamed_64 = @import("std").mem.zeroes(struct_unnamed_64),
    ifadc0: struct_unnamed_65 = @import("std").mem.zeroes(struct_unnamed_65),
    ifadc1: struct_unnamed_66 = @import("std").mem.zeroes(struct_unnamed_66),
    ifadclf: struct_unnamed_67 = @import("std").mem.zeroes(struct_unnamed_67),
    ifadcQuantWbw: struct_unnamed_68 = @import("std").mem.zeroes(struct_unnamed_68),
    ifadc0Wbw: struct_unnamed_69 = @import("std").mem.zeroes(struct_unnamed_69),
    ifadc1Wbw: struct_unnamed_70 = @import("std").mem.zeroes(struct_unnamed_70),
    ifadclfWbw: struct_unnamed_71 = @import("std").mem.zeroes(struct_unnamed_71),
    lrfdrfeExtTrim1: struct_unnamed_72 = @import("std").mem.zeroes(struct_unnamed_72),
    lrfdrfeExtTrim0: struct_unnamed_73 = @import("std").mem.zeroes(struct_unnamed_73),
    fend0Rssi: struct_unnamed_74 = @import("std").mem.zeroes(struct_unnamed_74),
    syntDiv0: struct_unnamed_75 = @import("std").mem.zeroes(struct_unnamed_75),
    res1: [2]u8 = @import("std").mem.zeroes([2]u8),
    ifamprfldo: struct_unnamed_76 = @import("std").mem.zeroes(struct_unnamed_76),
    ifamprfldoWbw: struct_unnamed_77 = @import("std").mem.zeroes(struct_unnamed_77),
    auxDiodeCal30C: struct_unnamed_78 = @import("std").mem.zeroes(struct_unnamed_78),
    auxDiodeCal125C: struct_unnamed_79 = @import("std").mem.zeroes(struct_unnamed_79),
    lfOscParams: struct_unnamed_80 = @import("std").mem.zeroes(struct_unnamed_80),
    res2: [16]u8 = @import("std").mem.zeroes([16]u8),
    adcOffset: struct_unnamed_81 = @import("std").mem.zeroes(struct_unnamed_81),
    adcGainWord0: struct_unnamed_82 = @import("std").mem.zeroes(struct_unnamed_82),
    adcGainWord1: struct_unnamed_83 = @import("std").mem.zeroes(struct_unnamed_83),
    auxDiodeCoeff: struct_unnamed_84 = @import("std").mem.zeroes(struct_unnamed_84),
    res3: [20]u8 = @import("std").mem.zeroes([20]u8),
    i2vCompact: struct_unnamed_85 = @import("std").mem.zeroes(struct_unnamed_85),
};
pub const struct_appTrims_struct_52 = extern struct {
    revision: u8 = @import("std").mem.zeroes(u8),
    nToolsClientOffset: u8 = @import("std").mem.zeroes(u8),
    res: [2]u8 = @import("std").mem.zeroes([2]u8),
    cc23x0r5: struct_appTrimsCc23x0r5_s_53 = @import("std").mem.zeroes(struct_appTrimsCc23x0r5_s_53),
};
const union_unnamed_87 = extern union {
    val32: u32,
    params: serialRomBldrParam_t,
};
const struct_unnamed_86 = extern struct {
    pBldrVtor: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    bldrParam: union_unnamed_87 = @import("std").mem.zeroes(union_unnamed_87),
};
const struct_unnamed_88 = extern struct {
    states: [4]u32 = @import("std").mem.zeroes([4]u32),
};
pub const fcfg_t = extern struct {
    criticalTrim: struct_unnamed_20 = @import("std").mem.zeroes(struct_unnamed_20),
    hwOpts: [2]u32 = @import("std").mem.zeroes([2]u32),
    permissions: struct_unnamed_35 = @import("std").mem.zeroes(struct_unnamed_35),
    misc: struct_unnamed_36 = @import("std").mem.zeroes(struct_unnamed_36),
    deviceInfo: struct_unnamed_37 = @import("std").mem.zeroes(struct_unnamed_37),
    flashProt: struct_unnamed_40 = @import("std").mem.zeroes(struct_unnamed_40),
    generalTrims: [152]u32 = @import("std").mem.zeroes([152]u32),
    appTrimsExt: struct_appTrimsExt_struct_44 = @import("std").mem.zeroes(struct_appTrimsExt_struct_44),
    appTrims: struct_appTrims_struct_52 = @import("std").mem.zeroes(struct_appTrims_struct_52),
    bootCfg: struct_unnamed_86 = @import("std").mem.zeroes(struct_unnamed_86),
    res1: u32 = @import("std").mem.zeroes(u32),
    crc32: u32 = @import("std").mem.zeroes(u32),
    lifecycle: struct_unnamed_88 = @import("std").mem.zeroes(struct_unnamed_88),
};
pub const fcfg_appTrims_t = struct_appTrims_struct_52;
pub const FPTR_VOID_VOID_T = ?*const fn () callconv(.C) void;
pub const FPTR_VOID_UINT8_T = ?*const fn (u8) callconv(.C) void;
pub const __UINT32 = c_uint;
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):89:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):95:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):193:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):215:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):223:9
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`"); // (no file):351:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`"); // (no file):352:9
pub const __declspec = @compileError("unable to translate C expr: unexpected token '__attribute__'"); // (no file):414:9
pub const _cdecl = @compileError("unable to translate macro: undefined identifier `__cdecl__`"); // (no file):415:9
pub const __cdecl = @compileError("unable to translate macro: undefined identifier `__cdecl__`"); // (no file):416:9
pub const _stdcall = @compileError("unable to translate macro: undefined identifier `__stdcall__`"); // (no file):417:9
pub const __stdcall = @compileError("unable to translate macro: undefined identifier `__stdcall__`"); // (no file):418:9
pub const _fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`"); // (no file):419:9
pub const __fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`"); // (no file):420:9
pub const _thiscall = @compileError("unable to translate macro: undefined identifier `__thiscall__`"); // (no file):421:9
pub const __thiscall = @compileError("unable to translate macro: undefined identifier `__thiscall__`"); // (no file):422:9
pub const _pascal = @compileError("unable to translate macro: undefined identifier `__pascal__`"); // (no file):423:9
pub const __pascal = @compileError("unable to translate macro: undefined identifier `__pascal__`"); // (no file):424:9
pub const __stdint_join3 = @compileError("unable to translate C expr: unexpected token '##'"); // C:\tools\zig-dev\lib\include/stdint.h:287:9
pub const __int_c_join = @compileError("unable to translate C expr: unexpected token '##'"); // C:\tools\zig-dev\lib\include/stdint.h:324:9
pub const __uint_c = @compileError("unable to translate macro: undefined identifier `U`"); // C:\tools\zig-dev\lib\include/stdint.h:326:9
pub const __INTN_MIN = @compileError("unable to translate macro: undefined identifier `INT`"); // C:\tools\zig-dev\lib\include/stdint.h:894:10
pub const __INTN_MAX = @compileError("unable to translate macro: undefined identifier `INT`"); // C:\tools\zig-dev\lib\include/stdint.h:895:10
pub const __UINTN_MAX = @compileError("unable to translate macro: undefined identifier `UINT`"); // C:\tools\zig-dev\lib\include/stdint.h:896:9
pub const __INTN_C = @compileError("unable to translate macro: undefined identifier `INT`"); // C:\tools\zig-dev\lib\include/stdint.h:897:10
pub const __UINTN_C = @compileError("unable to translate macro: undefined identifier `UINT`"); // C:\tools\zig-dev\lib\include/stdint.h:898:9
pub const __ASM = @compileError("unable to translate C expr: unexpected token '__asm'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:41:11
pub const __INLINE = @compileError("unable to translate C expr: unexpected token 'inline'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:44:11
pub const __STATIC_INLINE = @compileError("unable to translate C expr: unexpected token 'static'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:47:11
pub const __STATIC_FORCEINLINE = @compileError("unable to translate macro: undefined identifier `always_inline`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:50:11
pub const __NO_RETURN = @compileError("unable to translate macro: undefined identifier `__noreturn__`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:53:11
pub const __USED = @compileError("unable to translate macro: undefined identifier `used`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:56:11
pub const __WEAK = @compileError("unable to translate macro: undefined identifier `weak`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:59:11
pub const __PACKED = @compileError("unable to translate macro: undefined identifier `packed`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:62:11
pub const __PACKED_STRUCT = @compileError("unable to translate macro: undefined identifier `packed`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:65:11
pub const __PACKED_UNION = @compileError("unable to translate macro: undefined identifier `packed`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:68:11
pub const __UNALIGNED_UINT16_WRITE = @compileError("unable to translate C expr: expected ')' instead got '='"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:84:11
pub const __UNALIGNED_UINT16_READ = @compileError("unable to translate C expr: unexpected token 'const'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:92:11
pub const __UNALIGNED_UINT32_WRITE = @compileError("unable to translate C expr: expected ')' instead got '='"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:100:11
pub const __UNALIGNED_UINT32_READ = @compileError("unable to translate C expr: unexpected token 'const'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:108:11
pub const __ALIGNED = @compileError("unable to translate macro: undefined identifier `aligned`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:111:11
pub const __RESTRICT = @compileError("unable to translate C expr: unexpected token '__restrict'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:114:11
pub const __COMPILER_BARRIER = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:117:11
pub const __PROGRAM_START = @compileError("unable to translate macro: undefined identifier `__cmsis_start`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:169:9
pub const __INITIAL_SP = @compileError("unable to translate macro: undefined identifier `__StackTop`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:173:9
pub const __STACK_LIMIT = @compileError("unable to translate macro: undefined identifier `__StackLimit`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:177:9
pub const __VECTOR_TABLE = @compileError("unable to translate macro: undefined identifier `__Vectors`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:181:9
pub const __VECTOR_TABLE_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `used`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:185:9
pub const __NOP = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:906:9
pub const __WFI = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:912:9
pub const __WFE = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:920:9
pub const __SEV = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:927:9
pub const __BKPT = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/cmsis_gcc.h:1042:9
pub const __I = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:172:13
pub const __O = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:174:13
pub const __IO = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:175:13
pub const __IM = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:178:13
pub const __OM = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:179:13
pub const __IOM = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:180:13
pub const _VAL2FLD = @compileError("unable to translate macro: undefined identifier `_Pos`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:627:9
pub const _FLD2VAL = @compileError("unable to translate macro: undefined identifier `_Msk`"); // ti.cc23xx/ti.distro.cc23xx/../../em.arch/em.arch.arm/cmsis/core_cm0plus.h:635:9
pub const CCFG_DEFAULT_VALUES = @compileError("unable to translate C expr: unexpected token '.'"); // ti.cc23xx/ti.distro.cc23xx/inc/hw_device.h:65:9
pub const FCFG_LC_TESTPT = @compileError("unable to translate C expr: unexpected token '{'"); // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:645:21
pub const FCFG_LC_TESTFT = @compileError("unable to translate C expr: unexpected token '{'"); // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:646:21
pub const FCFG_LC_ENGRDEV = @compileError("unable to translate C expr: unexpected token '{'"); // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:647:21
pub const FCFG_LC_PRODDEV = @compileError("unable to translate C expr: unexpected token '{'"); // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:648:21
pub const FCFG_LC_RETEST = @compileError("unable to translate C expr: unexpected token '{'"); // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:649:21
pub const fcfg = @compileError("unable to translate C expr: unexpected token 'const'"); // ti.cc23xx/ti.distro.cc23xx/inc/hw_fcfg.h:657:9
pub const HWREG = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/inc/hw_types.h:79:9
pub const HWREGH = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/inc/hw_types.h:85:9
pub const HWREGB = @compileError("unable to translate C expr: unexpected token 'volatile'"); // ti.cc23xx/ti.distro.cc23xx/inc/hw_types.h:91:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 17);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "17.0.6 (https://github.com/ziglang/zig-bootstrap 4c78aa1bba84dbd324e178932cd52221417f63da)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 17.0.6 (https://github.com/ziglang/zig-bootstrap 4c78aa1bba84dbd324e178932cd52221417f63da)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __SEH__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-16";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 16);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 16);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 2);
pub const __SIZEOF_WINT_T__ = @as(c_int, 2);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __PTRDIFF_TYPE__ = c_longlong;
pub const __PTRDIFF_FMTd__ = "lld";
pub const __PTRDIFF_FMTi__ = "lli";
pub const __INTPTR_TYPE__ = c_longlong;
pub const __INTPTR_FMTd__ = "lld";
pub const __INTPTR_FMTi__ = "lli";
pub const __SIZE_TYPE__ = c_ulonglong;
pub const __SIZE_FMTo__ = "llo";
pub const __SIZE_FMTu__ = "llu";
pub const __SIZE_FMTx__ = "llx";
pub const __SIZE_FMTX__ = "llX";
pub const __WCHAR_TYPE__ = c_ushort;
pub const __WINT_TYPE__ = c_ushort;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulonglong;
pub const __UINTPTR_FMTo__ = "llo";
pub const __UINTPTR_FMTu__ = "llu";
pub const __UINTPTR_FMTx__ = "llx";
pub const __UINTPTR_FMTX__ = "llX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __corei7 = @as(c_int, 1);
pub const __corei7__ = @as(c_int, 1);
pub const __tune_corei7__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __RTM__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __SGX__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const _WIN32 = @as(c_int, 1);
pub const _WIN64 = @as(c_int, 1);
pub const WIN32 = @as(c_int, 1);
pub const __WIN32 = @as(c_int, 1);
pub const __WIN32__ = @as(c_int, 1);
pub const WINNT = @as(c_int, 1);
pub const __WINNT = @as(c_int, 1);
pub const __WINNT__ = @as(c_int, 1);
pub const WIN64 = @as(c_int, 1);
pub const __WIN64 = @as(c_int, 1);
pub const __WIN64__ = @as(c_int, 1);
pub const __MINGW64__ = @as(c_int, 1);
pub const __MSVCRT__ = @as(c_int, 1);
pub const __MINGW32__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __CLANG_STDINT_H = "";
pub const __int_least64_t = i64;
pub const __uint_least64_t = u64;
pub const __int_least32_t = i64;
pub const __uint_least32_t = u64;
pub const __int_least16_t = i64;
pub const __uint_least16_t = u64;
pub const __int_least8_t = i64;
pub const __uint_least8_t = u64;
pub const __uint32_t_defined = "";
pub const __int8_t_defined = "";
pub const __intptr_t_defined = "";
pub const _INTPTR_T = "";
pub const _UINTPTR_T = "";
pub inline fn __int_c(v: anytype, suffix: anytype) @TypeOf(__int_c_join(v, suffix)) {
    _ = &v;
    _ = &suffix;
    return __int_c_join(v, suffix);
}
pub const __int64_c_suffix = __INT64_C_SUFFIX__;
pub const __int32_c_suffix = __INT64_C_SUFFIX__;
pub const __int16_c_suffix = __INT64_C_SUFFIX__;
pub const __int8_c_suffix = __INT64_C_SUFFIX__;
pub inline fn INT64_C(v: anytype) @TypeOf(__int_c(v, __int64_c_suffix)) {
    _ = &v;
    return __int_c(v, __int64_c_suffix);
}
pub inline fn UINT64_C(v: anytype) @TypeOf(__uint_c(v, __int64_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int64_c_suffix);
}
pub inline fn INT32_C(v: anytype) @TypeOf(__int_c(v, __int32_c_suffix)) {
    _ = &v;
    return __int_c(v, __int32_c_suffix);
}
pub inline fn UINT32_C(v: anytype) @TypeOf(__uint_c(v, __int32_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int32_c_suffix);
}
pub inline fn INT16_C(v: anytype) @TypeOf(__int_c(v, __int16_c_suffix)) {
    _ = &v;
    return __int_c(v, __int16_c_suffix);
}
pub inline fn UINT16_C(v: anytype) @TypeOf(__uint_c(v, __int16_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int16_c_suffix);
}
pub inline fn INT8_C(v: anytype) @TypeOf(__int_c(v, __int8_c_suffix)) {
    _ = &v;
    return __int_c(v, __int8_c_suffix);
}
pub inline fn UINT8_C(v: anytype) @TypeOf(__uint_c(v, __int8_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int8_c_suffix);
}
pub const INT64_MAX = INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const INT64_MIN = -INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const UINT64_MAX = UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const __INT_LEAST64_MIN = INT64_MIN;
pub const __INT_LEAST64_MAX = INT64_MAX;
pub const __UINT_LEAST64_MAX = UINT64_MAX;
pub const __INT_LEAST32_MIN = INT64_MIN;
pub const __INT_LEAST32_MAX = INT64_MAX;
pub const __UINT_LEAST32_MAX = UINT64_MAX;
pub const __INT_LEAST16_MIN = INT64_MIN;
pub const __INT_LEAST16_MAX = INT64_MAX;
pub const __UINT_LEAST16_MAX = UINT64_MAX;
pub const __INT_LEAST8_MIN = INT64_MIN;
pub const __INT_LEAST8_MAX = INT64_MAX;
pub const __UINT_LEAST8_MAX = UINT64_MAX;
pub const INT_LEAST64_MIN = __INT_LEAST64_MIN;
pub const INT_LEAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_LEAST64_MAX = __UINT_LEAST64_MAX;
pub const INT_FAST64_MIN = __INT_LEAST64_MIN;
pub const INT_FAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_FAST64_MAX = __UINT_LEAST64_MAX;
pub const INT32_MAX = INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal));
pub const INT32_MIN = -INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal)) - @as(c_int, 1);
pub const UINT32_MAX = UINT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 4294967295, .decimal));
pub const INT_LEAST32_MIN = __INT_LEAST32_MIN;
pub const INT_LEAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_LEAST32_MAX = __UINT_LEAST32_MAX;
pub const INT_FAST32_MIN = __INT_LEAST32_MIN;
pub const INT_FAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_FAST32_MAX = __UINT_LEAST32_MAX;
pub const INT16_MAX = INT16_C(@as(c_int, 32767));
pub const INT16_MIN = -INT16_C(@as(c_int, 32767)) - @as(c_int, 1);
pub const UINT16_MAX = UINT16_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal));
pub const INT_LEAST16_MIN = __INT_LEAST16_MIN;
pub const INT_LEAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_LEAST16_MAX = __UINT_LEAST16_MAX;
pub const INT_FAST16_MIN = __INT_LEAST16_MIN;
pub const INT_FAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_FAST16_MAX = __UINT_LEAST16_MAX;
pub const INT8_MAX = INT8_C(@as(c_int, 127));
pub const INT8_MIN = -INT8_C(@as(c_int, 127)) - @as(c_int, 1);
pub const UINT8_MAX = UINT8_C(@as(c_int, 255));
pub const INT_LEAST8_MIN = __INT_LEAST8_MIN;
pub const INT_LEAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_LEAST8_MAX = __UINT_LEAST8_MAX;
pub const INT_FAST8_MIN = __INT_LEAST8_MIN;
pub const INT_FAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_FAST8_MAX = __UINT_LEAST8_MAX;
pub const INTPTR_MIN = -__INTPTR_MAX__ - @as(c_int, 1);
pub const INTPTR_MAX = __INTPTR_MAX__;
pub const UINTPTR_MAX = __UINTPTR_MAX__;
pub const PTRDIFF_MIN = -__PTRDIFF_MAX__ - @as(c_int, 1);
pub const PTRDIFF_MAX = __PTRDIFF_MAX__;
pub const SIZE_MAX = __SIZE_MAX__;
pub const INTMAX_MIN = -__INTMAX_MAX__ - @as(c_int, 1);
pub const INTMAX_MAX = __INTMAX_MAX__;
pub const UINTMAX_MAX = __UINTMAX_MAX__;
pub const SIG_ATOMIC_MIN = __INTN_MIN(__SIG_ATOMIC_WIDTH__);
pub const SIG_ATOMIC_MAX = __INTN_MAX(__SIG_ATOMIC_WIDTH__);
pub const WINT_MIN = __UINTN_C(__WINT_WIDTH__, @as(c_int, 0));
pub const WINT_MAX = __UINTN_MAX(__WINT_WIDTH__);
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WCHAR_MIN = __UINTN_C(__WCHAR_WIDTH__, @as(c_int, 0));
pub inline fn INTMAX_C(v: anytype) @TypeOf(__int_c(v, __INTMAX_C_SUFFIX__)) {
    _ = &v;
    return __int_c(v, __INTMAX_C_SUFFIX__);
}
pub inline fn UINTMAX_C(v: anytype) @TypeOf(__int_c(v, __UINTMAX_C_SUFFIX__)) {
    _ = &v;
    return __int_c(v, __UINTMAX_C_SUFFIX__);
}
pub const __CC23X0R5_H__ = "";
pub const __SAUREGION_PRESENT = @as(c_uint, 0x0000);
pub const __DSP_PRESENT = @as(c_uint, 0x0000);
pub const __Vendor_SysTickConfig = @as(c_uint, 0x0000);
pub const __MPU_PRESENT = @as(c_uint, 0x0000);
pub const __FPU_PRESENT = @as(c_uint, 0x0000);
pub const __VTOR_PRESENT = @as(c_uint, 0x0001);
pub const __NVIC_PRIO_BITS = @as(c_uint, 0x0002);
pub const __CMSIS_GCC_H = "";
pub inline fn __UNALIGNED_UINT32(x: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]struct_T_UINT32, x).*.v) {
    _ = &x;
    return @import("std").zig.c_translation.cast([*c]struct_T_UINT32, x).*.v;
}
pub inline fn __CMSIS_GCC_OUT_REG(r: anytype) @TypeOf("=r"(r)) {
    _ = &r;
    return "=r"(r);
}
pub inline fn __CMSIS_GCC_RW_REG(r: anytype) @TypeOf("+r"(r)) {
    _ = &r;
    return "+r"(r);
}
pub inline fn __CMSIS_GCC_USE_REG(r: anytype) @TypeOf("r"(r)) {
    _ = &r;
    return "r"(r);
}
pub const __CORE_CM0PLUS_H_GENERIC = "";
pub const __CMSIS_VERSION_H = "";
pub const __CM_CMSIS_VERSION_MAIN = @as(c_uint, 5);
pub const __CM_CMSIS_VERSION_SUB = @as(c_uint, 4);
pub const __CM_CMSIS_VERSION = (__CM_CMSIS_VERSION_MAIN << @as(c_uint, 16)) | __CM_CMSIS_VERSION_SUB;
pub const __CM0PLUS_CMSIS_VERSION_MAIN = __CM_CMSIS_VERSION_MAIN;
pub const __CM0PLUS_CMSIS_VERSION_SUB = __CM_CMSIS_VERSION_SUB;
pub const __CM0PLUS_CMSIS_VERSION = (__CM0PLUS_CMSIS_VERSION_MAIN << @as(c_uint, 16)) | __CM0PLUS_CMSIS_VERSION_SUB;
pub const __CORTEX_M = @as(c_uint, 0);
pub const __FPU_USED = @as(c_uint, 0);
pub const __CMSIS_COMPILER_H = "";
pub const __CORE_CM0PLUS_H_DEPENDANT = "";
pub const APSR_N_Pos = @as(c_uint, 31);
pub const APSR_N_Msk = @as(c_ulong, 1) << APSR_N_Pos;
pub const APSR_Z_Pos = @as(c_uint, 30);
pub const APSR_Z_Msk = @as(c_ulong, 1) << APSR_Z_Pos;
pub const APSR_C_Pos = @as(c_uint, 29);
pub const APSR_C_Msk = @as(c_ulong, 1) << APSR_C_Pos;
pub const APSR_V_Pos = @as(c_uint, 28);
pub const APSR_V_Msk = @as(c_ulong, 1) << APSR_V_Pos;
pub const IPSR_ISR_Pos = @as(c_uint, 0);
pub const IPSR_ISR_Msk = @as(c_ulong, 0x1FF);
pub const xPSR_N_Pos = @as(c_uint, 31);
pub const xPSR_N_Msk = @as(c_ulong, 1) << xPSR_N_Pos;
pub const xPSR_Z_Pos = @as(c_uint, 30);
pub const xPSR_Z_Msk = @as(c_ulong, 1) << xPSR_Z_Pos;
pub const xPSR_C_Pos = @as(c_uint, 29);
pub const xPSR_C_Msk = @as(c_ulong, 1) << xPSR_C_Pos;
pub const xPSR_V_Pos = @as(c_uint, 28);
pub const xPSR_V_Msk = @as(c_ulong, 1) << xPSR_V_Pos;
pub const xPSR_T_Pos = @as(c_uint, 24);
pub const xPSR_T_Msk = @as(c_ulong, 1) << xPSR_T_Pos;
pub const xPSR_ISR_Pos = @as(c_uint, 0);
pub const xPSR_ISR_Msk = @as(c_ulong, 0x1FF);
pub const CONTROL_SPSEL_Pos = @as(c_uint, 1);
pub const CONTROL_SPSEL_Msk = @as(c_ulong, 1) << CONTROL_SPSEL_Pos;
pub const CONTROL_nPRIV_Pos = @as(c_uint, 0);
pub const CONTROL_nPRIV_Msk = @as(c_ulong, 1);
pub const SCB_CPUID_IMPLEMENTER_Pos = @as(c_uint, 24);
pub const SCB_CPUID_IMPLEMENTER_Msk = @as(c_ulong, 0xFF) << SCB_CPUID_IMPLEMENTER_Pos;
pub const SCB_CPUID_VARIANT_Pos = @as(c_uint, 20);
pub const SCB_CPUID_VARIANT_Msk = @as(c_ulong, 0xF) << SCB_CPUID_VARIANT_Pos;
pub const SCB_CPUID_ARCHITECTURE_Pos = @as(c_uint, 16);
pub const SCB_CPUID_ARCHITECTURE_Msk = @as(c_ulong, 0xF) << SCB_CPUID_ARCHITECTURE_Pos;
pub const SCB_CPUID_PARTNO_Pos = @as(c_uint, 4);
pub const SCB_CPUID_PARTNO_Msk = @as(c_ulong, 0xFFF) << SCB_CPUID_PARTNO_Pos;
pub const SCB_CPUID_REVISION_Pos = @as(c_uint, 0);
pub const SCB_CPUID_REVISION_Msk = @as(c_ulong, 0xF);
pub const SCB_ICSR_NMIPENDSET_Pos = @as(c_uint, 31);
pub const SCB_ICSR_NMIPENDSET_Msk = @as(c_ulong, 1) << SCB_ICSR_NMIPENDSET_Pos;
pub const SCB_ICSR_PENDSVSET_Pos = @as(c_uint, 28);
pub const SCB_ICSR_PENDSVSET_Msk = @as(c_ulong, 1) << SCB_ICSR_PENDSVSET_Pos;
pub const SCB_ICSR_PENDSVCLR_Pos = @as(c_uint, 27);
pub const SCB_ICSR_PENDSVCLR_Msk = @as(c_ulong, 1) << SCB_ICSR_PENDSVCLR_Pos;
pub const SCB_ICSR_PENDSTSET_Pos = @as(c_uint, 26);
pub const SCB_ICSR_PENDSTSET_Msk = @as(c_ulong, 1) << SCB_ICSR_PENDSTSET_Pos;
pub const SCB_ICSR_PENDSTCLR_Pos = @as(c_uint, 25);
pub const SCB_ICSR_PENDSTCLR_Msk = @as(c_ulong, 1) << SCB_ICSR_PENDSTCLR_Pos;
pub const SCB_ICSR_ISRPREEMPT_Pos = @as(c_uint, 23);
pub const SCB_ICSR_ISRPREEMPT_Msk = @as(c_ulong, 1) << SCB_ICSR_ISRPREEMPT_Pos;
pub const SCB_ICSR_ISRPENDING_Pos = @as(c_uint, 22);
pub const SCB_ICSR_ISRPENDING_Msk = @as(c_ulong, 1) << SCB_ICSR_ISRPENDING_Pos;
pub const SCB_ICSR_VECTPENDING_Pos = @as(c_uint, 12);
pub const SCB_ICSR_VECTPENDING_Msk = @as(c_ulong, 0x1FF) << SCB_ICSR_VECTPENDING_Pos;
pub const SCB_ICSR_VECTACTIVE_Pos = @as(c_uint, 0);
pub const SCB_ICSR_VECTACTIVE_Msk = @as(c_ulong, 0x1FF);
pub const SCB_VTOR_TBLOFF_Pos = @as(c_uint, 8);
pub const SCB_VTOR_TBLOFF_Msk = @as(c_ulong, 0xFFFFFF) << SCB_VTOR_TBLOFF_Pos;
pub const SCB_AIRCR_VECTKEY_Pos = @as(c_uint, 16);
pub const SCB_AIRCR_VECTKEY_Msk = @as(c_ulong, 0xFFFF) << SCB_AIRCR_VECTKEY_Pos;
pub const SCB_AIRCR_VECTKEYSTAT_Pos = @as(c_uint, 16);
pub const SCB_AIRCR_VECTKEYSTAT_Msk = @as(c_ulong, 0xFFFF) << SCB_AIRCR_VECTKEYSTAT_Pos;
pub const SCB_AIRCR_ENDIANESS_Pos = @as(c_uint, 15);
pub const SCB_AIRCR_ENDIANESS_Msk = @as(c_ulong, 1) << SCB_AIRCR_ENDIANESS_Pos;
pub const SCB_AIRCR_SYSRESETREQ_Pos = @as(c_uint, 2);
pub const SCB_AIRCR_SYSRESETREQ_Msk = @as(c_ulong, 1) << SCB_AIRCR_SYSRESETREQ_Pos;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos = @as(c_uint, 1);
pub const SCB_AIRCR_VECTCLRACTIVE_Msk = @as(c_ulong, 1) << SCB_AIRCR_VECTCLRACTIVE_Pos;
pub const SCB_SCR_SEVONPEND_Pos = @as(c_uint, 4);
pub const SCB_SCR_SEVONPEND_Msk = @as(c_ulong, 1) << SCB_SCR_SEVONPEND_Pos;
pub const SCB_SCR_SLEEPDEEP_Pos = @as(c_uint, 2);
pub const SCB_SCR_SLEEPDEEP_Msk = @as(c_ulong, 1) << SCB_SCR_SLEEPDEEP_Pos;
pub const SCB_SCR_SLEEPONEXIT_Pos = @as(c_uint, 1);
pub const SCB_SCR_SLEEPONEXIT_Msk = @as(c_ulong, 1) << SCB_SCR_SLEEPONEXIT_Pos;
pub const SCB_CCR_STKALIGN_Pos = @as(c_uint, 9);
pub const SCB_CCR_STKALIGN_Msk = @as(c_ulong, 1) << SCB_CCR_STKALIGN_Pos;
pub const SCB_CCR_UNALIGN_TRP_Pos = @as(c_uint, 3);
pub const SCB_CCR_UNALIGN_TRP_Msk = @as(c_ulong, 1) << SCB_CCR_UNALIGN_TRP_Pos;
pub const SCB_SHCSR_SVCALLPENDED_Pos = @as(c_uint, 15);
pub const SCB_SHCSR_SVCALLPENDED_Msk = @as(c_ulong, 1) << SCB_SHCSR_SVCALLPENDED_Pos;
pub const SysTick_CTRL_COUNTFLAG_Pos = @as(c_uint, 16);
pub const SysTick_CTRL_COUNTFLAG_Msk = @as(c_ulong, 1) << SysTick_CTRL_COUNTFLAG_Pos;
pub const SysTick_CTRL_CLKSOURCE_Pos = @as(c_uint, 2);
pub const SysTick_CTRL_CLKSOURCE_Msk = @as(c_ulong, 1) << SysTick_CTRL_CLKSOURCE_Pos;
pub const SysTick_CTRL_TICKINT_Pos = @as(c_uint, 1);
pub const SysTick_CTRL_TICKINT_Msk = @as(c_ulong, 1) << SysTick_CTRL_TICKINT_Pos;
pub const SysTick_CTRL_ENABLE_Pos = @as(c_uint, 0);
pub const SysTick_CTRL_ENABLE_Msk = @as(c_ulong, 1);
pub const SysTick_LOAD_RELOAD_Pos = @as(c_uint, 0);
pub const SysTick_LOAD_RELOAD_Msk = @as(c_ulong, 0xFFFFFF);
pub const SysTick_VAL_CURRENT_Pos = @as(c_uint, 0);
pub const SysTick_VAL_CURRENT_Msk = @as(c_ulong, 0xFFFFFF);
pub const SysTick_CALIB_NOREF_Pos = @as(c_uint, 31);
pub const SysTick_CALIB_NOREF_Msk = @as(c_ulong, 1) << SysTick_CALIB_NOREF_Pos;
pub const SysTick_CALIB_SKEW_Pos = @as(c_uint, 30);
pub const SysTick_CALIB_SKEW_Msk = @as(c_ulong, 1) << SysTick_CALIB_SKEW_Pos;
pub const SysTick_CALIB_TENMS_Pos = @as(c_uint, 0);
pub const SysTick_CALIB_TENMS_Msk = @as(c_ulong, 0xFFFFFF);
pub const SCS_BASE = @as(c_ulong, 0xE000E000);
pub const SysTick_BASE = SCS_BASE + @as(c_ulong, 0x0010);
pub const NVIC_BASE = SCS_BASE + @as(c_ulong, 0x0100);
pub const SCB_BASE = SCS_BASE + @as(c_ulong, 0x0D00);
pub const SCB = @import("std").zig.c_translation.cast([*c]SCB_Type, SCB_BASE);
pub const SysTick = @import("std").zig.c_translation.cast([*c]SysTick_Type, SysTick_BASE);
pub const NVIC = @import("std").zig.c_translation.cast([*c]NVIC_Type, NVIC_BASE);
pub const NVIC_SetPriorityGrouping = __NVIC_SetPriorityGrouping;
pub const NVIC_GetPriorityGrouping = __NVIC_GetPriorityGrouping;
pub const NVIC_EnableIRQ = __NVIC_EnableIRQ;
pub const NVIC_GetEnableIRQ = __NVIC_GetEnableIRQ;
pub const NVIC_DisableIRQ = __NVIC_DisableIRQ;
pub const NVIC_GetPendingIRQ = __NVIC_GetPendingIRQ;
pub const NVIC_SetPendingIRQ = __NVIC_SetPendingIRQ;
pub const NVIC_ClearPendingIRQ = __NVIC_ClearPendingIRQ;
pub const NVIC_SetPriority = __NVIC_SetPriority;
pub const NVIC_GetPriority = __NVIC_GetPriority;
pub const NVIC_SystemReset = __NVIC_SystemReset;
pub const NVIC_SetVector = __NVIC_SetVector;
pub const NVIC_GetVector = __NVIC_GetVector;
pub const NVIC_USER_IRQ_OFFSET = @as(c_int, 16);
pub const EXC_RETURN_HANDLER = @as(c_ulong, 0xFFFFFFF1);
pub const EXC_RETURN_THREAD_MSP = @as(c_ulong, 0xFFFFFFF9);
pub const EXC_RETURN_THREAD_PSP = @as(c_ulong, 0xFFFFFFFD);
pub inline fn _BIT_SHIFT(IRQn_1: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(i32, IRQn_1)) & @as(c_ulong, 0x03)) * @as(c_ulong, 8)) {
    _ = &IRQn_1;
    return (@import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(i32, IRQn_1)) & @as(c_ulong, 0x03)) * @as(c_ulong, 8);
}
pub inline fn _SHP_IDX(IRQn_1: anytype) @TypeOf(((@import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(i32, IRQn_1)) & @as(c_ulong, 0x0F)) - @as(c_ulong, 8)) >> @as(c_ulong, 2)) {
    _ = &IRQn_1;
    return ((@import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(i32, IRQn_1)) & @as(c_ulong, 0x0F)) - @as(c_ulong, 8)) >> @as(c_ulong, 2);
}
pub inline fn _IP_IDX(IRQn_1: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(i32, IRQn_1)) >> @as(c_ulong, 2)) {
    _ = &IRQn_1;
    return @import("std").zig.c_translation.cast(u32, @import("std").zig.c_translation.cast(i32, IRQn_1)) >> @as(c_ulong, 2);
}
pub const __NVIC_SetPriorityGrouping = @import("std").zig.c_translation.Macros.DISCARD;
pub inline fn __NVIC_GetPriorityGrouping() @TypeOf(@as(c_uint, 0)) {
    return @as(c_uint, 0);
}
pub const __HW_CKMD_H__ = "";
pub const CKMD_O_DESC = @as(c_uint, 0x00000000);
pub const CKMD_O_IMASK = @as(c_uint, 0x00000044);
pub const CKMD_O_RIS = @as(c_uint, 0x00000048);
pub const CKMD_O_MIS = @as(c_uint, 0x0000004C);
pub const CKMD_O_ISET = @as(c_uint, 0x00000050);
pub const CKMD_O_ICLR = @as(c_uint, 0x00000054);
pub const CKMD_O_IMSET = @as(c_uint, 0x00000058);
pub const CKMD_O_IMCLR = @as(c_uint, 0x0000005C);
pub const CKMD_O_HFOSCCTL = @as(c_uint, 0x00000080);
pub const CKMD_O_HFXTCTL = @as(c_uint, 0x00000084);
pub const CKMD_O_LFOSCCTL = @as(c_uint, 0x0000008C);
pub const CKMD_O_LFXTCTL = @as(c_uint, 0x00000090);
pub const CKMD_O_LFQUALCTL = @as(c_uint, 0x00000094);
pub const CKMD_O_LFINCCTL = @as(c_uint, 0x00000098);
pub const CKMD_O_LFINCOVR = @as(c_uint, 0x0000009C);
pub const CKMD_O_AMPADCCTL = @as(c_uint, 0x000000A0);
pub const CKMD_O_HFTRACKCTL = @as(c_uint, 0x000000A4);
pub const CKMD_O_LDOCTL = @as(c_uint, 0x000000A8);
pub const CKMD_O_NABIASCTL = @as(c_uint, 0x000000AC);
pub const CKMD_O_LFMONCTL = @as(c_uint, 0x000000B0);
pub const CKMD_O_LFCLKSEL = @as(c_uint, 0x000000C0);
pub const CKMD_O_TDCCLKSEL = @as(c_uint, 0x000000C4);
pub const CKMD_O_ADCCLKSEL = @as(c_uint, 0x000000C8);
pub const CKMD_O_LFCLKSTAT = @as(c_uint, 0x000000E0);
pub const CKMD_O_HFXTSTAT = @as(c_uint, 0x000000E4);
pub const CKMD_O_AMPADCSTAT = @as(c_uint, 0x000000E8);
pub const CKMD_O_TRACKSTAT = @as(c_uint, 0x000000EC);
pub const CKMD_O_AMPSTAT = @as(c_uint, 0x000000F0);
pub const CKMD_O_ATBCTL0 = @as(c_uint, 0x00000100);
pub const CKMD_O_ATBCTL1 = @as(c_uint, 0x00000104);
pub const CKMD_O_DTBCTL = @as(c_uint, 0x00000108);
pub const CKMD_O_TRIM0 = @as(c_uint, 0x00000110);
pub const CKMD_O_TRIM1 = @as(c_uint, 0x00000114);
pub const CKMD_O_HFXTINIT = @as(c_uint, 0x00000118);
pub const CKMD_O_HFXTTARG = @as(c_uint, 0x0000011C);
pub const CKMD_O_HFXTDYN = @as(c_uint, 0x00000120);
pub const CKMD_O_AMPCFG0 = @as(c_uint, 0x00000124);
pub const CKMD_O_AMPCFG1 = @as(c_uint, 0x00000128);
pub const CKMD_O_LOOPCFG = @as(c_uint, 0x0000012C);
pub const CKMD_O_TDCCTL = @as(c_uint, 0x00000200);
pub const CKMD_O_TDCSTAT = @as(c_uint, 0x00000204);
pub const CKMD_O_TDCRESULT = @as(c_uint, 0x00000208);
pub const CKMD_O_TDCSATCFG = @as(c_uint, 0x0000020C);
pub const CKMD_O_TDCTRIGSRC = @as(c_uint, 0x00000210);
pub const CKMD_O_TDCTRIGCNT = @as(c_uint, 0x00000214);
pub const CKMD_O_TDCTRIGCNTLOAD = @as(c_uint, 0x00000218);
pub const CKMD_O_TDCTRIGCNTCFG = @as(c_uint, 0x0000021C);
pub const CKMD_O_TDCPRECTL = @as(c_uint, 0x00000220);
pub const CKMD_O_TDCPRECNTR = @as(c_uint, 0x00000224);
pub const CKMD_O_WDTCNT = @as(c_uint, 0x00000300);
pub const CKMD_O_WDTTEST = @as(c_uint, 0x00000304);
pub const CKMD_O_WDTLOCK = @as(c_uint, 0x00000308);
pub const CKMD_DESC_MODID_W = @as(c_uint, 16);
pub const CKMD_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const CKMD_DESC_MODID_S = @as(c_uint, 16);
pub const CKMD_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const CKMD_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const CKMD_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const CKMD_DESC_MAJREV_W = @as(c_uint, 4);
pub const CKMD_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const CKMD_DESC_MAJREV_S = @as(c_uint, 4);
pub const CKMD_DESC_MINREV_W = @as(c_uint, 4);
pub const CKMD_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const CKMD_DESC_MINREV_S = @as(c_uint, 0);
pub const CKMD_IMASK_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_IMASK_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_IMASK_LFTICK_S = @as(c_uint, 17);
pub const CKMD_IMASK_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_IMASK_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_IMASK_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_IMASK_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_IMASK_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_IMASK_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_IMASK_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_IMASK_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_IMASK_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_IMASK_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_IMASK_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_IMASK_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_IMASK_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_IMASK_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_IMASK_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_IMASK_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_IMASK_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_IMASK_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_IMASK_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_IMASK_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_IMASK_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_IMASK_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_IMASK_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_IMASK_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_IMASK_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_IMASK_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_IMASK_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_IMASK_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_IMASK_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_IMASK_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_IMASK_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_IMASK_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_IMASK_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_IMASK_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_IMASK_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_IMASK_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_IMASK_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_IMASK_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_IMASK_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_IMASK_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_IMASK_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_IMASK_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_IMASK_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_IMASK_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_IMASK_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_IMASK_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_IMASK_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_IMASK_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_IMASK_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_IMASK_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_IMASK_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_RIS_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_RIS_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_RIS_LFTICK_S = @as(c_uint, 17);
pub const CKMD_RIS_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_RIS_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_RIS_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_RIS_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_RIS_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_RIS_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_RIS_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_RIS_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_RIS_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_RIS_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_RIS_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_RIS_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_RIS_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_RIS_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_RIS_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_RIS_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_RIS_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_RIS_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_RIS_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_RIS_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_RIS_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_RIS_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_RIS_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_RIS_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_RIS_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_RIS_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_RIS_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_RIS_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_RIS_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_RIS_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_RIS_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_RIS_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_RIS_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_RIS_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_RIS_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_RIS_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_RIS_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_RIS_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_RIS_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_RIS_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_RIS_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_RIS_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_RIS_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_RIS_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_RIS_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_RIS_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_RIS_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_RIS_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_RIS_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_RIS_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_RIS_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_MIS_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_MIS_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_MIS_LFTICK_S = @as(c_uint, 17);
pub const CKMD_MIS_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_MIS_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_MIS_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_MIS_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_MIS_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_MIS_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_MIS_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_MIS_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_MIS_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_MIS_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_MIS_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_MIS_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_MIS_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_MIS_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_MIS_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_MIS_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_MIS_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_MIS_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_MIS_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_MIS_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_MIS_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_MIS_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_MIS_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_MIS_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_MIS_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_MIS_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_MIS_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_MIS_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_MIS_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_MIS_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_MIS_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_MIS_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_MIS_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_MIS_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_MIS_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_MIS_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_MIS_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_MIS_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_MIS_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_MIS_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_MIS_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_MIS_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_MIS_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_MIS_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_MIS_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_MIS_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_MIS_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_MIS_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_MIS_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_MIS_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_MIS_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_ISET_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_ISET_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_ISET_LFTICK_S = @as(c_uint, 17);
pub const CKMD_ISET_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_ISET_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_ISET_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_ISET_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_ISET_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_ISET_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_ISET_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_ISET_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_ISET_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_ISET_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_ISET_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_ISET_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_ISET_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_ISET_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_ISET_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_ISET_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_ISET_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_ISET_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_ISET_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_ISET_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_ISET_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_ISET_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_ISET_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_ISET_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_ISET_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_ISET_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_ISET_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_ISET_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_ISET_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_ISET_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_ISET_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_ISET_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_ISET_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_ISET_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_ISET_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_ISET_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_ISET_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_ISET_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_ISET_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_ISET_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_ISET_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_ISET_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_ISET_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_ISET_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_ISET_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_ISET_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_ISET_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_ISET_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_ISET_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_ISET_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_ISET_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_ICLR_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_ICLR_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_ICLR_LFTICK_S = @as(c_uint, 17);
pub const CKMD_ICLR_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_ICLR_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_ICLR_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_ICLR_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_ICLR_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_ICLR_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_ICLR_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_ICLR_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_ICLR_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_ICLR_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_ICLR_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_ICLR_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_ICLR_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_ICLR_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_ICLR_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_ICLR_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_ICLR_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_ICLR_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_ICLR_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_ICLR_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_ICLR_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_ICLR_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_ICLR_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_ICLR_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_ICLR_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_ICLR_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_ICLR_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_ICLR_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_ICLR_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_ICLR_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_ICLR_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_ICLR_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_ICLR_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_ICLR_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_ICLR_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_ICLR_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_ICLR_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_ICLR_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_ICLR_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_ICLR_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_ICLR_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_ICLR_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_ICLR_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_ICLR_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_ICLR_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_ICLR_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_ICLR_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_ICLR_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_ICLR_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_ICLR_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_ICLR_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_IMSET_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_IMSET_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_IMSET_LFTICK_S = @as(c_uint, 17);
pub const CKMD_IMSET_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_IMSET_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_IMSET_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_IMSET_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_IMSET_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_IMSET_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_IMSET_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_IMSET_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_IMSET_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_IMSET_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_IMSET_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_IMSET_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_IMSET_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_IMSET_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_IMSET_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_IMSET_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_IMSET_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_IMSET_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_IMSET_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_IMSET_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_IMSET_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_IMSET_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_IMSET_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_IMSET_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_IMSET_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_IMSET_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_IMSET_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_IMSET_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_IMSET_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_IMSET_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_IMSET_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_IMSET_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_IMSET_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_IMSET_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_IMSET_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_IMSET_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_IMSET_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_IMSET_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_IMSET_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_IMSET_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_IMSET_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_IMSET_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_IMSET_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_IMSET_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_IMSET_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_IMSET_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_IMSET_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_IMSET_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_IMSET_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_IMSET_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_IMSET_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_IMCLR_LFTICK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_IMCLR_LFTICK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_IMCLR_LFTICK_S = @as(c_uint, 17);
pub const CKMD_IMCLR_LFGEARRSTRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_IMCLR_LFGEARRSTRT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_IMCLR_LFGEARRSTRT_S = @as(c_uint, 16);
pub const CKMD_IMCLR_AMPSETTLED = @as(c_uint, 0x00008000);
pub const CKMD_IMCLR_AMPSETTLED_M = @as(c_uint, 0x00008000);
pub const CKMD_IMCLR_AMPSETTLED_S = @as(c_uint, 15);
pub const CKMD_IMCLR_AMPCTRLATTARG = @as(c_uint, 0x00004000);
pub const CKMD_IMCLR_AMPCTRLATTARG_M = @as(c_uint, 0x00004000);
pub const CKMD_IMCLR_AMPCTRLATTARG_S = @as(c_uint, 14);
pub const CKMD_IMCLR_PRELFEDGE = @as(c_uint, 0x00002000);
pub const CKMD_IMCLR_PRELFEDGE_M = @as(c_uint, 0x00002000);
pub const CKMD_IMCLR_PRELFEDGE_S = @as(c_uint, 13);
pub const CKMD_IMCLR_LFCLKLOSS = @as(c_uint, 0x00001000);
pub const CKMD_IMCLR_LFCLKLOSS_M = @as(c_uint, 0x00001000);
pub const CKMD_IMCLR_LFCLKLOSS_S = @as(c_uint, 12);
pub const CKMD_IMCLR_LFCLKOOR = @as(c_uint, 0x00000800);
pub const CKMD_IMCLR_LFCLKOOR_M = @as(c_uint, 0x00000800);
pub const CKMD_IMCLR_LFCLKOOR_S = @as(c_uint, 11);
pub const CKMD_IMCLR_LFCLKGOOD = @as(c_uint, 0x00000400);
pub const CKMD_IMCLR_LFCLKGOOD_M = @as(c_uint, 0x00000400);
pub const CKMD_IMCLR_LFCLKGOOD_S = @as(c_uint, 10);
pub const CKMD_IMCLR_LFINCUPD = @as(c_uint, 0x00000200);
pub const CKMD_IMCLR_LFINCUPD_M = @as(c_uint, 0x00000200);
pub const CKMD_IMCLR_LFINCUPD_S = @as(c_uint, 9);
pub const CKMD_IMCLR_TDCDONE = @as(c_uint, 0x00000100);
pub const CKMD_IMCLR_TDCDONE_M = @as(c_uint, 0x00000100);
pub const CKMD_IMCLR_TDCDONE_S = @as(c_uint, 8);
pub const CKMD_IMCLR_ADCPEAKUPD = @as(c_uint, 0x00000080);
pub const CKMD_IMCLR_ADCPEAKUPD_M = @as(c_uint, 0x00000080);
pub const CKMD_IMCLR_ADCPEAKUPD_S = @as(c_uint, 7);
pub const CKMD_IMCLR_ADCBIASUPD = @as(c_uint, 0x00000040);
pub const CKMD_IMCLR_ADCBIASUPD_M = @as(c_uint, 0x00000040);
pub const CKMD_IMCLR_ADCBIASUPD_S = @as(c_uint, 6);
pub const CKMD_IMCLR_ADCCOMPUPD = @as(c_uint, 0x00000020);
pub const CKMD_IMCLR_ADCCOMPUPD_M = @as(c_uint, 0x00000020);
pub const CKMD_IMCLR_ADCCOMPUPD_S = @as(c_uint, 5);
pub const CKMD_IMCLR_TRACKREFOOR = @as(c_uint, 0x00000010);
pub const CKMD_IMCLR_TRACKREFOOR_M = @as(c_uint, 0x00000010);
pub const CKMD_IMCLR_TRACKREFOOR_S = @as(c_uint, 4);
pub const CKMD_IMCLR_TRACKREFLOSS = @as(c_uint, 0x00000008);
pub const CKMD_IMCLR_TRACKREFLOSS_M = @as(c_uint, 0x00000008);
pub const CKMD_IMCLR_TRACKREFLOSS_S = @as(c_uint, 3);
pub const CKMD_IMCLR_HFXTAMPGOOD = @as(c_uint, 0x00000004);
pub const CKMD_IMCLR_HFXTAMPGOOD_M = @as(c_uint, 0x00000004);
pub const CKMD_IMCLR_HFXTAMPGOOD_S = @as(c_uint, 2);
pub const CKMD_IMCLR_HFXTFAULT = @as(c_uint, 0x00000002);
pub const CKMD_IMCLR_HFXTFAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_IMCLR_HFXTFAULT_S = @as(c_uint, 1);
pub const CKMD_IMCLR_HFXTGOOD = @as(c_uint, 0x00000001);
pub const CKMD_IMCLR_HFXTGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_IMCLR_HFXTGOOD_S = @as(c_uint, 0);
pub const CKMD_HFOSCCTL_PW_W = @as(c_uint, 8);
pub const CKMD_HFOSCCTL_PW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFF000000, .hex);
pub const CKMD_HFOSCCTL_PW_S = @as(c_uint, 24);
pub const CKMD_HFOSCCTL_CLKSVTOVR = @as(c_uint, 0x00000100);
pub const CKMD_HFOSCCTL_CLKSVTOVR_M = @as(c_uint, 0x00000100);
pub const CKMD_HFOSCCTL_CLKSVTOVR_S = @as(c_uint, 8);
pub const CKMD_HFOSCCTL_CLKSVTOVR_HFXT = @as(c_uint, 0x00000100);
pub const CKMD_HFOSCCTL_CLKSVTOVR_HFOSC = @as(c_uint, 0x00000000);
pub const CKMD_HFOSCCTL_FORCEOFF = @as(c_uint, 0x00000002);
pub const CKMD_HFOSCCTL_FORCEOFF_M = @as(c_uint, 0x00000002);
pub const CKMD_HFOSCCTL_FORCEOFF_S = @as(c_uint, 1);
pub const CKMD_HFOSCCTL_QUALBYP = @as(c_uint, 0x00000001);
pub const CKMD_HFOSCCTL_QUALBYP_M = @as(c_uint, 0x00000001);
pub const CKMD_HFOSCCTL_QUALBYP_S = @as(c_uint, 0);
pub const CKMD_HFXTCTL_AMPOVR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFXTCTL_AMPOVR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFXTCTL_AMPOVR_S = @as(c_uint, 31);
pub const CKMD_HFXTCTL_BIASEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const CKMD_HFXTCTL_BIASEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const CKMD_HFXTCTL_BIASEN_S = @as(c_uint, 26);
pub const CKMD_HFXTCTL_LPBUFEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const CKMD_HFXTCTL_LPBUFEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const CKMD_HFXTCTL_LPBUFEN_S = @as(c_uint, 25);
pub const CKMD_HFXTCTL_INJECT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_HFXTCTL_INJECT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_HFXTCTL_INJECT_S = @as(c_uint, 24);
pub const CKMD_HFXTCTL_QUALBYP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const CKMD_HFXTCTL_QUALBYP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const CKMD_HFXTCTL_QUALBYP_S = @as(c_uint, 23);
pub const CKMD_HFXTCTL_QUALDLY_W = @as(c_uint, 12);
pub const CKMD_HFXTCTL_QUALDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000FFF00, .hex);
pub const CKMD_HFXTCTL_QUALDLY_S = @as(c_uint, 8);
pub const CKMD_HFXTCTL_TCXOMODE = @as(c_uint, 0x00000080);
pub const CKMD_HFXTCTL_TCXOMODE_M = @as(c_uint, 0x00000080);
pub const CKMD_HFXTCTL_TCXOMODE_S = @as(c_uint, 7);
pub const CKMD_HFXTCTL_TCXOTYPE = @as(c_uint, 0x00000040);
pub const CKMD_HFXTCTL_TCXOTYPE_M = @as(c_uint, 0x00000040);
pub const CKMD_HFXTCTL_TCXOTYPE_S = @as(c_uint, 6);
pub const CKMD_HFXTCTL_TCXOTYPE_CMOS = @as(c_uint, 0x00000040);
pub const CKMD_HFXTCTL_TCXOTYPE_CLIPPEDSINE = @as(c_uint, 0x00000000);
pub const CKMD_HFXTCTL_AUTOEN = @as(c_uint, 0x00000004);
pub const CKMD_HFXTCTL_AUTOEN_M = @as(c_uint, 0x00000004);
pub const CKMD_HFXTCTL_AUTOEN_S = @as(c_uint, 2);
pub const CKMD_HFXTCTL_HPBUFEN = @as(c_uint, 0x00000002);
pub const CKMD_HFXTCTL_HPBUFEN_M = @as(c_uint, 0x00000002);
pub const CKMD_HFXTCTL_HPBUFEN_S = @as(c_uint, 1);
pub const CKMD_HFXTCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_HFXTCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_HFXTCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFOSCCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_LFOSCCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_LFOSCCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFXTCTL_LEAKCOMP_W = @as(c_uint, 2);
pub const CKMD_LFXTCTL_LEAKCOMP_M = @as(c_uint, 0x00006000);
pub const CKMD_LFXTCTL_LEAKCOMP_S = @as(c_uint, 13);
pub const CKMD_LFXTCTL_LEAKCOMP_OFF = @as(c_uint, 0x00006000);
pub const CKMD_LFXTCTL_LEAKCOMP_HALF = @as(c_uint, 0x00002000);
pub const CKMD_LFXTCTL_LEAKCOMP_FULL = @as(c_uint, 0x00000000);
pub const CKMD_LFXTCTL_BUFBIAS = @as(c_uint, 0x00001000);
pub const CKMD_LFXTCTL_BUFBIAS_M = @as(c_uint, 0x00001000);
pub const CKMD_LFXTCTL_BUFBIAS_S = @as(c_uint, 12);
pub const CKMD_LFXTCTL_BUFBIAS_MAX = @as(c_uint, 0x00001000);
pub const CKMD_LFXTCTL_BUFBIAS_MIN = @as(c_uint, 0x00000000);
pub const CKMD_LFXTCTL_AMPBIAS_W = @as(c_uint, 4);
pub const CKMD_LFXTCTL_AMPBIAS_M = @as(c_uint, 0x00000F00);
pub const CKMD_LFXTCTL_AMPBIAS_S = @as(c_uint, 8);
pub const CKMD_LFXTCTL_BIASBOOST_W = @as(c_uint, 2);
pub const CKMD_LFXTCTL_BIASBOOST_M = @as(c_uint, 0x000000C0);
pub const CKMD_LFXTCTL_BIASBOOST_S = @as(c_uint, 6);
pub const CKMD_LFXTCTL_REGBIAS_W = @as(c_uint, 2);
pub const CKMD_LFXTCTL_REGBIAS_M = @as(c_uint, 0x00000030);
pub const CKMD_LFXTCTL_REGBIAS_S = @as(c_uint, 4);
pub const CKMD_LFXTCTL_HPBUFEN = @as(c_uint, 0x00000004);
pub const CKMD_LFXTCTL_HPBUFEN_M = @as(c_uint, 0x00000004);
pub const CKMD_LFXTCTL_HPBUFEN_S = @as(c_uint, 2);
pub const CKMD_LFXTCTL_AMPREGMODE = @as(c_uint, 0x00000002);
pub const CKMD_LFXTCTL_AMPREGMODE_M = @as(c_uint, 0x00000002);
pub const CKMD_LFXTCTL_AMPREGMODE_S = @as(c_uint, 1);
pub const CKMD_LFXTCTL_AMPREGMODE_LOOPDIS = @as(c_uint, 0x00000002);
pub const CKMD_LFXTCTL_AMPREGMODE_LOOPEN = @as(c_uint, 0x00000000);
pub const CKMD_LFXTCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_LFXTCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_LFXTCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFQUALCTL_MAXERR_W = @as(c_uint, 6);
pub const CKMD_LFQUALCTL_MAXERR_M = @as(c_uint, 0x00003F00);
pub const CKMD_LFQUALCTL_MAXERR_S = @as(c_uint, 8);
pub const CKMD_LFQUALCTL_CONSEC_W = @as(c_uint, 8);
pub const CKMD_LFQUALCTL_CONSEC_M = @as(c_uint, 0x000000FF);
pub const CKMD_LFQUALCTL_CONSEC_S = @as(c_uint, 0);
pub const CKMD_LFINCCTL_PREVENTSTBY = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFINCCTL_PREVENTSTBY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFINCCTL_PREVENTSTBY_S = @as(c_uint, 31);
pub const CKMD_LFINCCTL_PREVENTSTBY_ON = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFINCCTL_PREVENTSTBY_OFF = @as(c_uint, 0x00000000);
pub const CKMD_LFINCCTL_INT_W = @as(c_uint, 22);
pub const CKMD_LFINCCTL_INT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3FFFFF00, .hex);
pub const CKMD_LFINCCTL_INT_S = @as(c_uint, 8);
pub const CKMD_LFINCCTL_STOPGEAR = @as(c_uint, 0x00000080);
pub const CKMD_LFINCCTL_STOPGEAR_M = @as(c_uint, 0x00000080);
pub const CKMD_LFINCCTL_STOPGEAR_S = @as(c_uint, 7);
pub const CKMD_LFINCCTL_STOPGEAR_HIGH = @as(c_uint, 0x00000080);
pub const CKMD_LFINCCTL_STOPGEAR_LOW = @as(c_uint, 0x00000000);
pub const CKMD_LFINCCTL_ERRTHR_W = @as(c_uint, 2);
pub const CKMD_LFINCCTL_ERRTHR_M = @as(c_uint, 0x00000060);
pub const CKMD_LFINCCTL_ERRTHR_S = @as(c_uint, 5);
pub const CKMD_LFINCCTL_ERRTHR_SMALL = @as(c_uint, 0x00000060);
pub const CKMD_LFINCCTL_ERRTHR_MIDSMALL = @as(c_uint, 0x00000040);
pub const CKMD_LFINCCTL_ERRTHR_MIDLARGE = @as(c_uint, 0x00000020);
pub const CKMD_LFINCCTL_ERRTHR_LARGE = @as(c_uint, 0x00000000);
pub const CKMD_LFINCCTL_GEARRSTRT_W = @as(c_uint, 2);
pub const CKMD_LFINCCTL_GEARRSTRT_M = @as(c_uint, 0x00000018);
pub const CKMD_LFINCCTL_GEARRSTRT_S = @as(c_uint, 3);
pub const CKMD_LFINCCTL_GEARRSTRT_TWOTHR = @as(c_uint, 0x00000010);
pub const CKMD_LFINCCTL_GEARRSTRT_ONETHR = @as(c_uint, 0x00000008);
pub const CKMD_LFINCCTL_GEARRSTRT_NEVER = @as(c_uint, 0x00000000);
pub const CKMD_LFINCCTL_SOFTRSTRT = @as(c_uint, 0x00000004);
pub const CKMD_LFINCCTL_SOFTRSTRT_M = @as(c_uint, 0x00000004);
pub const CKMD_LFINCCTL_SOFTRSTRT_S = @as(c_uint, 2);
pub const CKMD_LFINCCTL_SOFTRSTRT_ON = @as(c_uint, 0x00000004);
pub const CKMD_LFINCCTL_SOFTRSTRT_OFF = @as(c_uint, 0x00000000);
pub const CKMD_LFINCOVR_OVERRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFINCOVR_OVERRIDE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFINCOVR_OVERRIDE_S = @as(c_uint, 31);
pub const CKMD_LFINCOVR_LFINC_W = @as(c_uint, 22);
pub const CKMD_LFINCOVR_LFINC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003FFFFF, .hex);
pub const CKMD_LFINCOVR_LFINC_S = @as(c_uint, 0);
pub const CKMD_AMPADCCTL_SWOVR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_AMPADCCTL_SWOVR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_AMPADCCTL_SWOVR_S = @as(c_uint, 31);
pub const CKMD_AMPADCCTL_PEAKDETEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_AMPADCCTL_PEAKDETEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_AMPADCCTL_PEAKDETEN_S = @as(c_uint, 17);
pub const CKMD_AMPADCCTL_PEAKDETEN_ENABLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CKMD_AMPADCCTL_PEAKDETEN_DISABLE = @as(c_uint, 0x00000000);
pub const CKMD_AMPADCCTL_ADCEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_AMPADCCTL_ADCEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_AMPADCCTL_ADCEN_S = @as(c_uint, 16);
pub const CKMD_AMPADCCTL_ADCEN_ENABLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_AMPADCCTL_ADCEN_DISABLE = @as(c_uint, 0x00000000);
pub const CKMD_AMPADCCTL_COMPVAL_W = @as(c_uint, 7);
pub const CKMD_AMPADCCTL_COMPVAL_M = @as(c_uint, 0x00007F00);
pub const CKMD_AMPADCCTL_COMPVAL_S = @as(c_uint, 8);
pub const CKMD_AMPADCCTL_SRCSEL = @as(c_uint, 0x00000010);
pub const CKMD_AMPADCCTL_SRCSEL_M = @as(c_uint, 0x00000010);
pub const CKMD_AMPADCCTL_SRCSEL_S = @as(c_uint, 4);
pub const CKMD_AMPADCCTL_SRCSEL_PEAK = @as(c_uint, 0x00000010);
pub const CKMD_AMPADCCTL_SRCSEL_BIAS = @as(c_uint, 0x00000000);
pub const CKMD_AMPADCCTL_COMPSTRT = @as(c_uint, 0x00000002);
pub const CKMD_AMPADCCTL_COMPSTRT_M = @as(c_uint, 0x00000002);
pub const CKMD_AMPADCCTL_COMPSTRT_S = @as(c_uint, 1);
pub const CKMD_AMPADCCTL_SARSTRT = @as(c_uint, 0x00000001);
pub const CKMD_AMPADCCTL_SARSTRT_M = @as(c_uint, 0x00000001);
pub const CKMD_AMPADCCTL_SARSTRT_S = @as(c_uint, 0);
pub const CKMD_HFTRACKCTL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFTRACKCTL_EN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFTRACKCTL_EN_S = @as(c_uint, 31);
pub const CKMD_HFTRACKCTL_DSMBYP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CKMD_HFTRACKCTL_DSMBYP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CKMD_HFTRACKCTL_DSMBYP_S = @as(c_uint, 30);
pub const CKMD_HFTRACKCTL_REFCLK_W = @as(c_uint, 2);
pub const CKMD_HFTRACKCTL_REFCLK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const CKMD_HFTRACKCTL_REFCLK_S = @as(c_uint, 26);
pub const CKMD_HFTRACKCTL_REFCLK_GPI = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CKMD_HFTRACKCTL_REFCLK_LRF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const CKMD_HFTRACKCTL_REFCLK_HFXT = @as(c_uint, 0x00000000);
pub const CKMD_HFTRACKCTL_RATIO_W = @as(c_uint, 26);
pub const CKMD_HFTRACKCTL_RATIO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03FFFFFF, .hex);
pub const CKMD_HFTRACKCTL_RATIO_S = @as(c_uint, 0);
pub const CKMD_HFTRACKCTL_RATIO_REF4M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const CKMD_HFTRACKCTL_RATIO_REF8M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01800000, .hex);
pub const CKMD_HFTRACKCTL_RATIO_REF48M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const CKMD_LDOCTL_SWOVR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LDOCTL_SWOVR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LDOCTL_SWOVR_S = @as(c_uint, 31);
pub const CKMD_LDOCTL_HFXTLVLEN = @as(c_uint, 0x00000010);
pub const CKMD_LDOCTL_HFXTLVLEN_M = @as(c_uint, 0x00000010);
pub const CKMD_LDOCTL_HFXTLVLEN_S = @as(c_uint, 4);
pub const CKMD_LDOCTL_STARTCTL = @as(c_uint, 0x00000008);
pub const CKMD_LDOCTL_STARTCTL_M = @as(c_uint, 0x00000008);
pub const CKMD_LDOCTL_STARTCTL_S = @as(c_uint, 3);
pub const CKMD_LDOCTL_START = @as(c_uint, 0x00000004);
pub const CKMD_LDOCTL_START_M = @as(c_uint, 0x00000004);
pub const CKMD_LDOCTL_START_S = @as(c_uint, 2);
pub const CKMD_LDOCTL_BYPASS = @as(c_uint, 0x00000002);
pub const CKMD_LDOCTL_BYPASS_M = @as(c_uint, 0x00000002);
pub const CKMD_LDOCTL_BYPASS_S = @as(c_uint, 1);
pub const CKMD_LDOCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_LDOCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_LDOCTL_EN_S = @as(c_uint, 0);
pub const CKMD_NABIASCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_NABIASCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_NABIASCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFMONCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_LFMONCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_LFMONCTL_EN_S = @as(c_uint, 0);
pub const CKMD_LFCLKSEL_PRE_W = @as(c_uint, 2);
pub const CKMD_LFCLKSEL_PRE_M = @as(c_uint, 0x0000000C);
pub const CKMD_LFCLKSEL_PRE_S = @as(c_uint, 2);
pub const CKMD_LFCLKSEL_PRE_EXTLF = @as(c_uint, 0x0000000C);
pub const CKMD_LFCLKSEL_PRE_LFXT = @as(c_uint, 0x00000008);
pub const CKMD_LFCLKSEL_PRE_LFOSC = @as(c_uint, 0x00000004);
pub const CKMD_LFCLKSEL_PRE_NONE = @as(c_uint, 0x00000000);
pub const CKMD_LFCLKSEL_MAIN_W = @as(c_uint, 2);
pub const CKMD_LFCLKSEL_MAIN_M = @as(c_uint, 0x00000003);
pub const CKMD_LFCLKSEL_MAIN_S = @as(c_uint, 0);
pub const CKMD_LFCLKSEL_MAIN_EXTLF = @as(c_uint, 0x00000003);
pub const CKMD_LFCLKSEL_MAIN_LFXT = @as(c_uint, 0x00000002);
pub const CKMD_LFCLKSEL_MAIN_LFOSC = @as(c_uint, 0x00000001);
pub const CKMD_LFCLKSEL_MAIN_FAKE = @as(c_uint, 0x00000000);
pub const CKMD_TDCCLKSEL_REFCLK_W = @as(c_uint, 2);
pub const CKMD_TDCCLKSEL_REFCLK_M = @as(c_uint, 0x00000003);
pub const CKMD_TDCCLKSEL_REFCLK_S = @as(c_uint, 0);
pub const CKMD_TDCCLKSEL_REFCLK_GPI = @as(c_uint, 0x00000003);
pub const CKMD_TDCCLKSEL_REFCLK_CLKULL = @as(c_uint, 0x00000002);
pub const CKMD_TDCCLKSEL_REFCLK_CLKSVT = @as(c_uint, 0x00000001);
pub const CKMD_TDCCLKSEL_REFCLK_NONE = @as(c_uint, 0x00000000);
pub const CKMD_ADCCLKSEL_SRC_W = @as(c_uint, 2);
pub const CKMD_ADCCLKSEL_SRC_M = @as(c_uint, 0x00000003);
pub const CKMD_ADCCLKSEL_SRC_S = @as(c_uint, 0);
pub const CKMD_ADCCLKSEL_SRC_HFXT = @as(c_uint, 0x00000001);
pub const CKMD_ADCCLKSEL_SRC_CLKSVT = @as(c_uint, 0x00000000);
pub const CKMD_LFCLKSTAT_GOOD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFCLKSTAT_GOOD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_LFCLKSTAT_GOOD_S = @as(c_uint, 31);
pub const CKMD_LFCLKSTAT_FLTSETTLED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const CKMD_LFCLKSTAT_FLTSETTLED_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const CKMD_LFCLKSTAT_FLTSETTLED_S = @as(c_uint, 25);
pub const CKMD_LFCLKSTAT_LFTICKSRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_LFCLKSTAT_LFTICKSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_LFCLKSTAT_LFTICKSRC_S = @as(c_uint, 24);
pub const CKMD_LFCLKSTAT_LFTICKSRC_FAKE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_LFCLKSTAT_LFTICKSRC_LFCLK = @as(c_uint, 0x00000000);
pub const CKMD_LFCLKSTAT_LFINCSRC_W = @as(c_uint, 2);
pub const CKMD_LFCLKSTAT_LFINCSRC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00C00000, .hex);
pub const CKMD_LFCLKSTAT_LFINCSRC_S = @as(c_uint, 22);
pub const CKMD_LFCLKSTAT_LFINCSRC_FAKE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00C00000, .hex);
pub const CKMD_LFCLKSTAT_LFINCSRC_OVERRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const CKMD_LFCLKSTAT_LFINCSRC_AVG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const CKMD_LFCLKSTAT_LFINCSRC_MEAS = @as(c_uint, 0x00000000);
pub const CKMD_LFCLKSTAT_LFINC_W = @as(c_uint, 22);
pub const CKMD_LFCLKSTAT_LFINC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003FFFFF, .hex);
pub const CKMD_LFCLKSTAT_LFINC_S = @as(c_uint, 0);
pub const CKMD_HFXTSTAT_STARTUPTIME_W = @as(c_uint, 15);
pub const CKMD_HFXTSTAT_STARTUPTIME_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x7FFF0000, .hex);
pub const CKMD_HFXTSTAT_STARTUPTIME_S = @as(c_uint, 16);
pub const CKMD_HFXTSTAT_FAULT = @as(c_uint, 0x00000002);
pub const CKMD_HFXTSTAT_FAULT_M = @as(c_uint, 0x00000002);
pub const CKMD_HFXTSTAT_FAULT_S = @as(c_uint, 1);
pub const CKMD_HFXTSTAT_GOOD = @as(c_uint, 0x00000001);
pub const CKMD_HFXTSTAT_GOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_HFXTSTAT_GOOD_S = @as(c_uint, 0);
pub const CKMD_AMPADCSTAT_COMPOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_AMPADCSTAT_COMPOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const CKMD_AMPADCSTAT_COMPOUT_S = @as(c_uint, 24);
pub const CKMD_AMPADCSTAT_PEAKRAW_W = @as(c_uint, 7);
pub const CKMD_AMPADCSTAT_PEAKRAW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const CKMD_AMPADCSTAT_PEAKRAW_S = @as(c_uint, 16);
pub const CKMD_AMPADCSTAT_PEAK_W = @as(c_uint, 8);
pub const CKMD_AMPADCSTAT_PEAK_M = @as(c_uint, 0x0000FF00);
pub const CKMD_AMPADCSTAT_PEAK_S = @as(c_uint, 8);
pub const CKMD_AMPADCSTAT_BIAS_W = @as(c_uint, 7);
pub const CKMD_AMPADCSTAT_BIAS_M = @as(c_uint, 0x0000007F);
pub const CKMD_AMPADCSTAT_BIAS_S = @as(c_uint, 0);
pub const CKMD_TRACKSTAT_LOOPERRVLD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_TRACKSTAT_LOOPERRVLD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_TRACKSTAT_LOOPERRVLD_S = @as(c_uint, 31);
pub const CKMD_TRACKSTAT_LOOPERR_W = @as(c_uint, 14);
pub const CKMD_TRACKSTAT_LOOPERR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3FFF0000, .hex);
pub const CKMD_TRACKSTAT_LOOPERR_S = @as(c_uint, 16);
pub const CKMD_TRACKSTAT_FINETRIM_W = @as(c_uint, 13);
pub const CKMD_TRACKSTAT_FINETRIM_M = @as(c_uint, 0x00001FFF);
pub const CKMD_TRACKSTAT_FINETRIM_S = @as(c_uint, 0);
pub const CKMD_AMPSTAT_STATE_W = @as(c_uint, 4);
pub const CKMD_AMPSTAT_STATE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1E000000, .hex);
pub const CKMD_AMPSTAT_STATE_S = @as(c_uint, 25);
pub const CKMD_AMPSTAT_STATE_SETTLED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1E000000, .hex);
pub const CKMD_AMPSTAT_STATE_UPDATEUP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1C000000, .hex);
pub const CKMD_AMPSTAT_STATE_TXCOMODE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x18000000, .hex);
pub const CKMD_AMPSTAT_STATE_SHUTDN0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x14000000, .hex);
pub const CKMD_AMPSTAT_STATE_INJWAIT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0E000000, .hex);
pub const CKMD_AMPSTAT_STATE_UPDATEDN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const CKMD_AMPSTAT_STATE_RAMP0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0A000000, .hex);
pub const CKMD_AMPSTAT_STATE_RAMP1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CKMD_AMPSTAT_STATE_INJECT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x06000000, .hex);
pub const CKMD_AMPSTAT_STATE_SHUTDN1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const CKMD_AMPSTAT_STATE_LDOSTART = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const CKMD_AMPSTAT_STATE_IDLE = @as(c_uint, 0x00000000);
pub const CKMD_AMPSTAT_IDAC_W = @as(c_uint, 7);
pub const CKMD_AMPSTAT_IDAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01FC0000, .hex);
pub const CKMD_AMPSTAT_IDAC_S = @as(c_uint, 18);
pub const CKMD_AMPSTAT_IREF_W = @as(c_uint, 4);
pub const CKMD_AMPSTAT_IREF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003C000, .hex);
pub const CKMD_AMPSTAT_IREF_S = @as(c_uint, 14);
pub const CKMD_AMPSTAT_Q2CAP_W = @as(c_uint, 6);
pub const CKMD_AMPSTAT_Q2CAP_M = @as(c_uint, 0x00003F00);
pub const CKMD_AMPSTAT_Q2CAP_S = @as(c_uint, 8);
pub const CKMD_AMPSTAT_Q1CAP_W = @as(c_uint, 6);
pub const CKMD_AMPSTAT_Q1CAP_M = @as(c_uint, 0x000000FC);
pub const CKMD_AMPSTAT_Q1CAP_S = @as(c_uint, 2);
pub const CKMD_AMPSTAT_CTRLATTARGET = @as(c_uint, 0x00000002);
pub const CKMD_AMPSTAT_CTRLATTARGET_M = @as(c_uint, 0x00000002);
pub const CKMD_AMPSTAT_CTRLATTARGET_S = @as(c_uint, 1);
pub const CKMD_AMPSTAT_AMPGOOD = @as(c_uint, 0x00000001);
pub const CKMD_AMPSTAT_AMPGOOD_M = @as(c_uint, 0x00000001);
pub const CKMD_AMPSTAT_AMPGOOD_S = @as(c_uint, 0);
pub const CKMD_ATBCTL0_SEL_W = @as(c_uint, 19);
pub const CKMD_ATBCTL0_SEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0007FFFF, .hex);
pub const CKMD_ATBCTL0_SEL_S = @as(c_uint, 0);
pub const CKMD_ATBCTL0_SEL_LFXTTESTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const CKMD_ATBCTL0_SEL_LFOSCTESTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hex);
pub const CKMD_ATBCTL0_SEL_HFXTTESTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const CKMD_ATBCTL0_SEL_HFOSCTESTCLK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_ATBCTL0_SEL_LFMONVTEST = @as(c_uint, 0x00001000);
pub const CKMD_ATBCTL0_SEL_LFOSCVDDL = @as(c_uint, 0x00000800);
pub const CKMD_ATBCTL0_SEL_HFOSCIBIAS = @as(c_uint, 0x00000400);
pub const CKMD_ATBCTL0_SEL_HFOSCVDDL = @as(c_uint, 0x00000200);
pub const CKMD_ATBCTL0_SEL_HFOSCVREF = @as(c_uint, 0x00000100);
pub const CKMD_ATBCTL0_SEL_NABIASITEST = @as(c_uint, 0x00000080);
pub const CKMD_ATBCTL0_SEL_ADCDACOUT = @as(c_uint, 0x00000040);
pub const CKMD_ATBCTL0_SEL_ADCCOMPIN = @as(c_uint, 0x00000020);
pub const CKMD_ATBCTL0_SEL_ADCCOMPOUT = @as(c_uint, 0x00000010);
pub const CKMD_ATBCTL0_SEL_LFXTANA = @as(c_uint, 0x00000008);
pub const CKMD_ATBCTL0_SEL_LDOITEST = @as(c_uint, 0x00000004);
pub const CKMD_ATBCTL0_SEL_VDDCKM = @as(c_uint, 0x00000002);
pub const CKMD_ATBCTL0_SEL_HFXTANA = @as(c_uint, 0x00000001);
pub const CKMD_ATBCTL0_SEL_OFF = @as(c_uint, 0x00000000);
pub const CKMD_ATBCTL1_LFOSC_W = @as(c_uint, 2);
pub const CKMD_ATBCTL1_LFOSC_M = @as(c_uint, 0x00006000);
pub const CKMD_ATBCTL1_LFOSC_S = @as(c_uint, 13);
pub const CKMD_ATBCTL1_LFOSC_BOTH = @as(c_uint, 0x00006000);
pub const CKMD_ATBCTL1_LFOSC_VDDLOCAL = @as(c_uint, 0x00004000);
pub const CKMD_ATBCTL1_LFOSC_TESTCLK = @as(c_uint, 0x00002000);
pub const CKMD_ATBCTL1_LFOSC_OFF = @as(c_uint, 0x00000000);
pub const CKMD_ATBCTL1_NABIAS = @as(c_uint, 0x00001000);
pub const CKMD_ATBCTL1_NABIAS_M = @as(c_uint, 0x00001000);
pub const CKMD_ATBCTL1_NABIAS_S = @as(c_uint, 12);
pub const CKMD_ATBCTL1_LFXT = @as(c_uint, 0x00000400);
pub const CKMD_ATBCTL1_LFXT_M = @as(c_uint, 0x00000400);
pub const CKMD_ATBCTL1_LFXT_S = @as(c_uint, 10);
pub const CKMD_ATBCTL1_LFXT_TESTCLK = @as(c_uint, 0x00000400);
pub const CKMD_ATBCTL1_LFXT_OFF = @as(c_uint, 0x00000000);
pub const CKMD_ATBCTL1_LFMON_W = @as(c_uint, 2);
pub const CKMD_ATBCTL1_LFMON_M = @as(c_uint, 0x00000300);
pub const CKMD_ATBCTL1_LFMON_S = @as(c_uint, 8);
pub const CKMD_ATBCTL1_LFMON_TEST2 = @as(c_uint, 0x00000200);
pub const CKMD_ATBCTL1_LFMON_TEST1 = @as(c_uint, 0x00000100);
pub const CKMD_ATBCTL1_LFMON_OFF = @as(c_uint, 0x00000000);
pub const CKMD_ATBCTL1_HFXT = @as(c_uint, 0x00000080);
pub const CKMD_ATBCTL1_HFXT_M = @as(c_uint, 0x00000080);
pub const CKMD_ATBCTL1_HFXT_S = @as(c_uint, 7);
pub const CKMD_ATBCTL1_HFOSC = @as(c_uint, 0x00000001);
pub const CKMD_ATBCTL1_HFOSC_M = @as(c_uint, 0x00000001);
pub const CKMD_ATBCTL1_HFOSC_S = @as(c_uint, 0);
pub const CKMD_DTBCTL_DSEL2_W = @as(c_uint, 5);
pub const CKMD_DTBCTL_DSEL2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007C0000, .hex);
pub const CKMD_DTBCTL_DSEL2_S = @as(c_uint, 18);
pub const CKMD_DTBCTL_DSEL1_W = @as(c_uint, 5);
pub const CKMD_DTBCTL_DSEL1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003E000, .hex);
pub const CKMD_DTBCTL_DSEL1_S = @as(c_uint, 13);
pub const CKMD_DTBCTL_DSEL0_W = @as(c_uint, 5);
pub const CKMD_DTBCTL_DSEL0_M = @as(c_uint, 0x00001F00);
pub const CKMD_DTBCTL_DSEL0_S = @as(c_uint, 8);
pub const CKMD_DTBCTL_CLKSEL_W = @as(c_uint, 4);
pub const CKMD_DTBCTL_CLKSEL_M = @as(c_uint, 0x000000F0);
pub const CKMD_DTBCTL_CLKSEL_S = @as(c_uint, 4);
pub const CKMD_DTBCTL_EN = @as(c_uint, 0x00000001);
pub const CKMD_DTBCTL_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_DTBCTL_EN_S = @as(c_uint, 0);
pub const CKMD_TRIM0_HFOSC_CAP_W = @as(c_uint, 4);
pub const CKMD_TRIM0_HFOSC_CAP_M = @as(c_uint, 0x000001E0);
pub const CKMD_TRIM0_HFOSC_CAP_S = @as(c_uint, 5);
pub const CKMD_TRIM0_HFOSC_COARSE_W = @as(c_uint, 5);
pub const CKMD_TRIM0_HFOSC_COARSE_M = @as(c_uint, 0x0000001F);
pub const CKMD_TRIM0_HFOSC_COARSE_S = @as(c_uint, 0);
pub const CKMD_TRIM1_HFXTSLICER_W = @as(c_uint, 2);
pub const CKMD_TRIM1_HFXTSLICER_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const CKMD_TRIM1_HFXTSLICER_S = @as(c_uint, 30);
pub const CKMD_TRIM1_PEAKIBIAS_W = @as(c_uint, 2);
pub const CKMD_TRIM1_PEAKIBIAS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const CKMD_TRIM1_PEAKIBIAS_S = @as(c_uint, 28);
pub const CKMD_TRIM1_NABIAS_UDIGLDO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CKMD_TRIM1_NABIAS_UDIGLDO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CKMD_TRIM1_NABIAS_UDIGLDO_S = @as(c_uint, 27);
pub const CKMD_TRIM1_LDOBW_W = @as(c_uint, 3);
pub const CKMD_TRIM1_LDOBW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const CKMD_TRIM1_LDOBW_S = @as(c_uint, 24);
pub const CKMD_TRIM1_LDOFB_W = @as(c_uint, 4);
pub const CKMD_TRIM1_LDOFB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const CKMD_TRIM1_LDOFB_S = @as(c_uint, 20);
pub const CKMD_TRIM1_LFDLY_W = @as(c_uint, 4);
pub const CKMD_TRIM1_LFDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const CKMD_TRIM1_LFDLY_S = @as(c_uint, 16);
pub const CKMD_TRIM1_NABIAS_LFOSC = @as(c_uint, 0x00008000);
pub const CKMD_TRIM1_NABIAS_LFOSC_M = @as(c_uint, 0x00008000);
pub const CKMD_TRIM1_NABIAS_LFOSC_S = @as(c_uint, 15);
pub const CKMD_TRIM1_NABIAS_RES_W = @as(c_uint, 7);
pub const CKMD_TRIM1_NABIAS_RES_M = @as(c_uint, 0x00007F00);
pub const CKMD_TRIM1_NABIAS_RES_S = @as(c_uint, 8);
pub const CKMD_TRIM1_LFOSC_CAP_W = @as(c_uint, 8);
pub const CKMD_TRIM1_LFOSC_CAP_M = @as(c_uint, 0x000000FF);
pub const CKMD_TRIM1_LFOSC_CAP_S = @as(c_uint, 0);
pub const CKMD_HFXTINIT_AMPTHR_W = @as(c_uint, 7);
pub const CKMD_HFXTINIT_AMPTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F800000, .hex);
pub const CKMD_HFXTINIT_AMPTHR_S = @as(c_uint, 23);
pub const CKMD_HFXTINIT_IDAC_W = @as(c_uint, 7);
pub const CKMD_HFXTINIT_IDAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const CKMD_HFXTINIT_IDAC_S = @as(c_uint, 16);
pub const CKMD_HFXTINIT_IREF_W = @as(c_uint, 4);
pub const CKMD_HFXTINIT_IREF_M = @as(c_uint, 0x0000F000);
pub const CKMD_HFXTINIT_IREF_S = @as(c_uint, 12);
pub const CKMD_HFXTINIT_Q2CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTINIT_Q2CAP_M = @as(c_uint, 0x00000FC0);
pub const CKMD_HFXTINIT_Q2CAP_S = @as(c_uint, 6);
pub const CKMD_HFXTINIT_Q1CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTINIT_Q1CAP_M = @as(c_uint, 0x0000003F);
pub const CKMD_HFXTINIT_Q1CAP_S = @as(c_uint, 0);
pub const CKMD_HFXTTARG_AMPHYST_W = @as(c_uint, 2);
pub const CKMD_HFXTTARG_AMPHYST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const CKMD_HFXTTARG_AMPHYST_S = @as(c_uint, 30);
pub const CKMD_HFXTTARG_AMPTHR_W = @as(c_uint, 7);
pub const CKMD_HFXTTARG_AMPTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F800000, .hex);
pub const CKMD_HFXTTARG_AMPTHR_S = @as(c_uint, 23);
pub const CKMD_HFXTTARG_IDAC_W = @as(c_uint, 7);
pub const CKMD_HFXTTARG_IDAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const CKMD_HFXTTARG_IDAC_S = @as(c_uint, 16);
pub const CKMD_HFXTTARG_IREF_W = @as(c_uint, 4);
pub const CKMD_HFXTTARG_IREF_M = @as(c_uint, 0x0000F000);
pub const CKMD_HFXTTARG_IREF_S = @as(c_uint, 12);
pub const CKMD_HFXTTARG_Q2CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTTARG_Q2CAP_M = @as(c_uint, 0x00000FC0);
pub const CKMD_HFXTTARG_Q2CAP_S = @as(c_uint, 6);
pub const CKMD_HFXTTARG_Q1CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTTARG_Q1CAP_M = @as(c_uint, 0x0000003F);
pub const CKMD_HFXTTARG_Q1CAP_S = @as(c_uint, 0);
pub const CKMD_HFXTDYN_SEL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFXTDYN_SEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFXTDYN_SEL_S = @as(c_uint, 31);
pub const CKMD_HFXTDYN_SEL_DYNAMIC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CKMD_HFXTDYN_SEL_TARGET = @as(c_uint, 0x00000000);
pub const CKMD_HFXTDYN_AMPTHR_W = @as(c_uint, 7);
pub const CKMD_HFXTDYN_AMPTHR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x3F800000, .hex);
pub const CKMD_HFXTDYN_AMPTHR_S = @as(c_uint, 23);
pub const CKMD_HFXTDYN_IDAC_W = @as(c_uint, 7);
pub const CKMD_HFXTDYN_IDAC_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x007F0000, .hex);
pub const CKMD_HFXTDYN_IDAC_S = @as(c_uint, 16);
pub const CKMD_HFXTDYN_IREF_W = @as(c_uint, 4);
pub const CKMD_HFXTDYN_IREF_M = @as(c_uint, 0x0000F000);
pub const CKMD_HFXTDYN_IREF_S = @as(c_uint, 12);
pub const CKMD_HFXTDYN_Q2CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTDYN_Q2CAP_M = @as(c_uint, 0x00000FC0);
pub const CKMD_HFXTDYN_Q2CAP_S = @as(c_uint, 6);
pub const CKMD_HFXTDYN_Q1CAP_W = @as(c_uint, 6);
pub const CKMD_HFXTDYN_Q1CAP_M = @as(c_uint, 0x0000003F);
pub const CKMD_HFXTDYN_Q1CAP_S = @as(c_uint, 0);
pub const CKMD_AMPCFG0_Q2DLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG0_Q2DLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xF0000000, .hex);
pub const CKMD_AMPCFG0_Q2DLY_S = @as(c_uint, 28);
pub const CKMD_AMPCFG0_Q1DLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG0_Q1DLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const CKMD_AMPCFG0_Q1DLY_S = @as(c_uint, 24);
pub const CKMD_AMPCFG0_ADCDLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG0_ADCDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00F00000, .hex);
pub const CKMD_AMPCFG0_ADCDLY_S = @as(c_uint, 20);
pub const CKMD_AMPCFG0_LDOSTART_W = @as(c_uint, 5);
pub const CKMD_AMPCFG0_LDOSTART_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F8000, .hex);
pub const CKMD_AMPCFG0_LDOSTART_S = @as(c_uint, 15);
pub const CKMD_AMPCFG0_INJWAIT_W = @as(c_uint, 5);
pub const CKMD_AMPCFG0_INJWAIT_M = @as(c_uint, 0x00007C00);
pub const CKMD_AMPCFG0_INJWAIT_S = @as(c_uint, 10);
pub const CKMD_AMPCFG0_INJTIME_W = @as(c_uint, 5);
pub const CKMD_AMPCFG0_INJTIME_M = @as(c_uint, 0x000003E0);
pub const CKMD_AMPCFG0_INJTIME_S = @as(c_uint, 5);
pub const CKMD_AMPCFG0_FSMRATE_W = @as(c_uint, 5);
pub const CKMD_AMPCFG0_FSMRATE_M = @as(c_uint, 0x0000001F);
pub const CKMD_AMPCFG0_FSMRATE_S = @as(c_uint, 0);
pub const CKMD_AMPCFG0_FSMRATE__250K = @as(c_uint, 0x00000017);
pub const CKMD_AMPCFG0_FSMRATE__500K = @as(c_uint, 0x0000000B);
pub const CKMD_AMPCFG0_FSMRATE__1M = @as(c_uint, 0x00000005);
pub const CKMD_AMPCFG0_FSMRATE__2M = @as(c_uint, 0x00000002);
pub const CKMD_AMPCFG0_FSMRATE__3M = @as(c_uint, 0x00000001);
pub const CKMD_AMPCFG0_FSMRATE__6M = @as(c_uint, 0x00000000);
pub const CKMD_AMPCFG1_IDACDLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG1_IDACDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xF0000000, .hex);
pub const CKMD_AMPCFG1_IDACDLY_S = @as(c_uint, 28);
pub const CKMD_AMPCFG1_IREFDLY_W = @as(c_uint, 4);
pub const CKMD_AMPCFG1_IREFDLY_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const CKMD_AMPCFG1_IREFDLY_S = @as(c_uint, 24);
pub const CKMD_AMPCFG1_BIASLT_W = @as(c_uint, 12);
pub const CKMD_AMPCFG1_BIASLT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFF000, .hex);
pub const CKMD_AMPCFG1_BIASLT_S = @as(c_uint, 12);
pub const CKMD_AMPCFG1_INTERVAL_W = @as(c_uint, 12);
pub const CKMD_AMPCFG1_INTERVAL_M = @as(c_uint, 0x00000FFF);
pub const CKMD_AMPCFG1_INTERVAL_S = @as(c_uint, 0);
pub const CKMD_LOOPCFG_FINETRIM_INIT_W = @as(c_uint, 6);
pub const CKMD_LOOPCFG_FINETRIM_INIT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFC000000, .hex);
pub const CKMD_LOOPCFG_FINETRIM_INIT_S = @as(c_uint, 26);
pub const CKMD_LOOPCFG_BOOST_TARGET_W = @as(c_uint, 5);
pub const CKMD_LOOPCFG_BOOST_TARGET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03E00000, .hex);
pub const CKMD_LOOPCFG_BOOST_TARGET_S = @as(c_uint, 21);
pub const CKMD_LOOPCFG_KP_BOOST_W = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KP_BOOST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001C0000, .hex);
pub const CKMD_LOOPCFG_KP_BOOST_S = @as(c_uint, 18);
pub const CKMD_LOOPCFG_KI_BOOST_W = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KI_BOOST_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00038000, .hex);
pub const CKMD_LOOPCFG_KI_BOOST_S = @as(c_uint, 15);
pub const CKMD_LOOPCFG_SETTLED_TARGET_W = @as(c_uint, 5);
pub const CKMD_LOOPCFG_SETTLED_TARGET_M = @as(c_uint, 0x00007C00);
pub const CKMD_LOOPCFG_SETTLED_TARGET_S = @as(c_uint, 10);
pub const CKMD_LOOPCFG_OOR_LIMIT_W = @as(c_uint, 4);
pub const CKMD_LOOPCFG_OOR_LIMIT_M = @as(c_uint, 0x000003C0);
pub const CKMD_LOOPCFG_OOR_LIMIT_S = @as(c_uint, 6);
pub const CKMD_LOOPCFG_KP_W = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KP_M = @as(c_uint, 0x00000038);
pub const CKMD_LOOPCFG_KP_S = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KI_W = @as(c_uint, 3);
pub const CKMD_LOOPCFG_KI_M = @as(c_uint, 0x00000007);
pub const CKMD_LOOPCFG_KI_S = @as(c_uint, 0);
pub const CKMD_TDCCTL_CMD_W = @as(c_uint, 2);
pub const CKMD_TDCCTL_CMD_M = @as(c_uint, 0x00000003);
pub const CKMD_TDCCTL_CMD_S = @as(c_uint, 0);
pub const CKMD_TDCCTL_CMD_ABORT = @as(c_uint, 0x00000003);
pub const CKMD_TDCCTL_CMD_RUN = @as(c_uint, 0x00000002);
pub const CKMD_TDCCTL_CMD_RUN_SYNC_START = @as(c_uint, 0x00000001);
pub const CKMD_TDCCTL_CMD_CLR_RESULT = @as(c_uint, 0x00000000);
pub const CKMD_TDCSTAT_STOP_BF = @as(c_uint, 0x00000200);
pub const CKMD_TDCSTAT_STOP_BF_M = @as(c_uint, 0x00000200);
pub const CKMD_TDCSTAT_STOP_BF_S = @as(c_uint, 9);
pub const CKMD_TDCSTAT_START_BF = @as(c_uint, 0x00000100);
pub const CKMD_TDCSTAT_START_BF_M = @as(c_uint, 0x00000100);
pub const CKMD_TDCSTAT_START_BF_S = @as(c_uint, 8);
pub const CKMD_TDCSTAT_SAT = @as(c_uint, 0x00000080);
pub const CKMD_TDCSTAT_SAT_M = @as(c_uint, 0x00000080);
pub const CKMD_TDCSTAT_SAT_S = @as(c_uint, 7);
pub const CKMD_TDCSTAT_DONE = @as(c_uint, 0x00000040);
pub const CKMD_TDCSTAT_DONE_M = @as(c_uint, 0x00000040);
pub const CKMD_TDCSTAT_DONE_S = @as(c_uint, 6);
pub const CKMD_TDCSTAT_STATE_W = @as(c_uint, 6);
pub const CKMD_TDCSTAT_STATE_M = @as(c_uint, 0x0000003F);
pub const CKMD_TDCSTAT_STATE_S = @as(c_uint, 0);
pub const CKMD_TDCSTAT_STATE_FORCE_STOP = @as(c_uint, 0x0000002E);
pub const CKMD_TDCSTAT_STATE_START_FALL = @as(c_uint, 0x0000001E);
pub const CKMD_TDCSTAT_STATE_WAIT_CLR_CNT_DONE = @as(c_uint, 0x00000016);
pub const CKMD_TDCSTAT_STATE_POR = @as(c_uint, 0x0000000F);
pub const CKMD_TDCSTAT_STATE_GET_RESULT = @as(c_uint, 0x0000000E);
pub const CKMD_TDCSTAT_STATE_WAIT_STOP_CNTDWN = @as(c_uint, 0x0000000C);
pub const CKMD_TDCSTAT_STATE_WAIT_STOP = @as(c_uint, 0x00000008);
pub const CKMD_TDCSTAT_STATE_CLR_CNT = @as(c_uint, 0x00000007);
pub const CKMD_TDCSTAT_STATE_IDLE = @as(c_uint, 0x00000006);
pub const CKMD_TDCSTAT_STATE_WAIT_START_STOP_CNT_EN = @as(c_uint, 0x00000004);
pub const CKMD_TDCSTAT_STATE_WAIT_START = @as(c_uint, 0x00000000);
pub const CKMD_TDCRESULT_VALUE_W = @as(c_uint, 32);
pub const CKMD_TDCRESULT_VALUE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const CKMD_TDCRESULT_VALUE_S = @as(c_uint, 0);
pub const CKMD_TDCSATCFG_LIMIT_W = @as(c_uint, 5);
pub const CKMD_TDCSATCFG_LIMIT_M = @as(c_uint, 0x0000001F);
pub const CKMD_TDCSATCFG_LIMIT_S = @as(c_uint, 0);
pub const CKMD_TDCSATCFG_LIMIT_R30 = @as(c_uint, 0x00000015);
pub const CKMD_TDCSATCFG_LIMIT_R29 = @as(c_uint, 0x00000014);
pub const CKMD_TDCSATCFG_LIMIT_R28 = @as(c_uint, 0x00000013);
pub const CKMD_TDCSATCFG_LIMIT_R27 = @as(c_uint, 0x00000012);
pub const CKMD_TDCSATCFG_LIMIT_R26 = @as(c_uint, 0x00000011);
pub const CKMD_TDCSATCFG_LIMIT_R25 = @as(c_uint, 0x00000010);
pub const CKMD_TDCSATCFG_LIMIT_R24 = @as(c_uint, 0x0000000F);
pub const CKMD_TDCSATCFG_LIMIT_R23 = @as(c_uint, 0x0000000E);
pub const CKMD_TDCSATCFG_LIMIT_R22 = @as(c_uint, 0x0000000D);
pub const CKMD_TDCSATCFG_LIMIT_R21 = @as(c_uint, 0x0000000C);
pub const CKMD_TDCSATCFG_LIMIT_R20 = @as(c_uint, 0x0000000B);
pub const CKMD_TDCSATCFG_LIMIT_R19 = @as(c_uint, 0x0000000A);
pub const CKMD_TDCSATCFG_LIMIT_R18 = @as(c_uint, 0x00000009);
pub const CKMD_TDCSATCFG_LIMIT_R17 = @as(c_uint, 0x00000008);
pub const CKMD_TDCSATCFG_LIMIT_R16 = @as(c_uint, 0x00000007);
pub const CKMD_TDCSATCFG_LIMIT_R15 = @as(c_uint, 0x00000006);
pub const CKMD_TDCSATCFG_LIMIT_R14 = @as(c_uint, 0x00000005);
pub const CKMD_TDCSATCFG_LIMIT_R13 = @as(c_uint, 0x00000004);
pub const CKMD_TDCSATCFG_LIMIT_R12 = @as(c_uint, 0x00000003);
pub const CKMD_TDCSATCFG_LIMIT_NONE = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGSRC_STOP_POL = @as(c_uint, 0x00008000);
pub const CKMD_TDCTRIGSRC_STOP_POL_M = @as(c_uint, 0x00008000);
pub const CKMD_TDCTRIGSRC_STOP_POL_S = @as(c_uint, 15);
pub const CKMD_TDCTRIGSRC_STOP_POL_LOW = @as(c_uint, 0x00008000);
pub const CKMD_TDCTRIGSRC_STOP_POL_HIGH = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGSRC_STOP_SRC_W = @as(c_uint, 5);
pub const CKMD_TDCTRIGSRC_STOP_SRC_M = @as(c_uint, 0x00001F00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_S = @as(c_uint, 8);
pub const CKMD_TDCTRIGSRC_STOP_SRC_TDC_PRE = @as(c_uint, 0x00001F00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB15 = @as(c_uint, 0x00001400);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB14 = @as(c_uint, 0x00001300);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB13 = @as(c_uint, 0x00001200);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB12 = @as(c_uint, 0x00001100);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB11 = @as(c_uint, 0x00001000);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB10 = @as(c_uint, 0x00000F00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB9 = @as(c_uint, 0x00000E00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB8 = @as(c_uint, 0x00000D00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB7 = @as(c_uint, 0x00000C00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB6 = @as(c_uint, 0x00000B00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB5 = @as(c_uint, 0x00000A00);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB4 = @as(c_uint, 0x00000900);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB3 = @as(c_uint, 0x00000800);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB2 = @as(c_uint, 0x00000700);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB1 = @as(c_uint, 0x00000600);
pub const CKMD_TDCTRIGSRC_STOP_SRC_DTB0 = @as(c_uint, 0x00000500);
pub const CKMD_TDCTRIGSRC_STOP_SRC_GPI = @as(c_uint, 0x00000400);
pub const CKMD_TDCTRIGSRC_STOP_SRC_LFCLK_DLY = @as(c_uint, 0x00000300);
pub const CKMD_TDCTRIGSRC_STOP_SRC_LFXT = @as(c_uint, 0x00000200);
pub const CKMD_TDCTRIGSRC_STOP_SRC_LFOSC = @as(c_uint, 0x00000100);
pub const CKMD_TDCTRIGSRC_STOP_SRC_LFTICK = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGSRC_START_POL = @as(c_uint, 0x00000080);
pub const CKMD_TDCTRIGSRC_START_POL_M = @as(c_uint, 0x00000080);
pub const CKMD_TDCTRIGSRC_START_POL_S = @as(c_uint, 7);
pub const CKMD_TDCTRIGSRC_START_POL_LOW = @as(c_uint, 0x00000080);
pub const CKMD_TDCTRIGSRC_START_POL_HIGH = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGSRC_START_SRC_W = @as(c_uint, 5);
pub const CKMD_TDCTRIGSRC_START_SRC_M = @as(c_uint, 0x0000001F);
pub const CKMD_TDCTRIGSRC_START_SRC_S = @as(c_uint, 0);
pub const CKMD_TDCTRIGSRC_START_SRC_TDC_PRE = @as(c_uint, 0x0000001F);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB15 = @as(c_uint, 0x00000014);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB14 = @as(c_uint, 0x00000013);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB13 = @as(c_uint, 0x00000012);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB12 = @as(c_uint, 0x00000011);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB11 = @as(c_uint, 0x00000010);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB10 = @as(c_uint, 0x0000000F);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB9 = @as(c_uint, 0x0000000E);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB8 = @as(c_uint, 0x0000000D);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB7 = @as(c_uint, 0x0000000C);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB6 = @as(c_uint, 0x0000000B);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB5 = @as(c_uint, 0x0000000A);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB4 = @as(c_uint, 0x00000009);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB3 = @as(c_uint, 0x00000008);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB2 = @as(c_uint, 0x00000007);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB1 = @as(c_uint, 0x00000006);
pub const CKMD_TDCTRIGSRC_START_SRC_DTB0 = @as(c_uint, 0x00000005);
pub const CKMD_TDCTRIGSRC_START_SRC_GPI = @as(c_uint, 0x00000004);
pub const CKMD_TDCTRIGSRC_START_SRC_LFCLK_DLY = @as(c_uint, 0x00000003);
pub const CKMD_TDCTRIGSRC_START_SRC_LFXT = @as(c_uint, 0x00000002);
pub const CKMD_TDCTRIGSRC_START_SRC_LFOSC = @as(c_uint, 0x00000001);
pub const CKMD_TDCTRIGSRC_START_SRC_LFTICK = @as(c_uint, 0x00000000);
pub const CKMD_TDCTRIGCNT_CNT_W = @as(c_uint, 16);
pub const CKMD_TDCTRIGCNT_CNT_M = @as(c_uint, 0x0000FFFF);
pub const CKMD_TDCTRIGCNT_CNT_S = @as(c_uint, 0);
pub const CKMD_TDCTRIGCNTLOAD_CNT_W = @as(c_uint, 16);
pub const CKMD_TDCTRIGCNTLOAD_CNT_M = @as(c_uint, 0x0000FFFF);
pub const CKMD_TDCTRIGCNTLOAD_CNT_S = @as(c_uint, 0);
pub const CKMD_TDCTRIGCNTCFG_EN = @as(c_uint, 0x00000001);
pub const CKMD_TDCTRIGCNTCFG_EN_M = @as(c_uint, 0x00000001);
pub const CKMD_TDCTRIGCNTCFG_EN_S = @as(c_uint, 0);
pub const CKMD_TDCPRECTL_RESET_N = @as(c_uint, 0x00000080);
pub const CKMD_TDCPRECTL_RESET_N_M = @as(c_uint, 0x00000080);
pub const CKMD_TDCPRECTL_RESET_N_S = @as(c_uint, 7);
pub const CKMD_TDCPRECTL_RATIO = @as(c_uint, 0x00000040);
pub const CKMD_TDCPRECTL_RATIO_M = @as(c_uint, 0x00000040);
pub const CKMD_TDCPRECTL_RATIO_S = @as(c_uint, 6);
pub const CKMD_TDCPRECTL_RATIO_DIV64 = @as(c_uint, 0x00000040);
pub const CKMD_TDCPRECTL_RATIO_DIV16 = @as(c_uint, 0x00000000);
pub const CKMD_TDCPRECTL_SRC_W = @as(c_uint, 5);
pub const CKMD_TDCPRECTL_SRC_M = @as(c_uint, 0x0000001F);
pub const CKMD_TDCPRECTL_SRC_S = @as(c_uint, 0);
pub const CKMD_TDCPRECTL_SRC_HFXT = @as(c_uint, 0x00000016);
pub const CKMD_TDCPRECTL_SRC_HFOSC = @as(c_uint, 0x00000015);
pub const CKMD_TDCPRECTL_SRC_DTB15 = @as(c_uint, 0x00000014);
pub const CKMD_TDCPRECTL_SRC_DTB14 = @as(c_uint, 0x00000013);
pub const CKMD_TDCPRECTL_SRC_DTB13 = @as(c_uint, 0x00000012);
pub const CKMD_TDCPRECTL_SRC_DTB12 = @as(c_uint, 0x00000011);
pub const CKMD_TDCPRECTL_SRC_DTB11 = @as(c_uint, 0x00000010);
pub const CKMD_TDCPRECTL_SRC_DTB10 = @as(c_uint, 0x0000000F);
pub const CKMD_TDCPRECTL_SRC_DTB9 = @as(c_uint, 0x0000000E);
pub const CKMD_TDCPRECTL_SRC_DTB8 = @as(c_uint, 0x0000000D);
pub const CKMD_TDCPRECTL_SRC_DTB7 = @as(c_uint, 0x0000000C);
pub const CKMD_TDCPRECTL_SRC_DTB6 = @as(c_uint, 0x0000000B);
pub const CKMD_TDCPRECTL_SRC_DTB5 = @as(c_uint, 0x0000000A);
pub const CKMD_TDCPRECTL_SRC_DTB4 = @as(c_uint, 0x00000009);
pub const CKMD_TDCPRECTL_SRC_DTB3 = @as(c_uint, 0x00000008);
pub const CKMD_TDCPRECTL_SRC_DTB2 = @as(c_uint, 0x00000007);
pub const CKMD_TDCPRECTL_SRC_DTB1 = @as(c_uint, 0x00000006);
pub const CKMD_TDCPRECTL_SRC_DTB0 = @as(c_uint, 0x00000005);
pub const CKMD_TDCPRECTL_SRC_GPI = @as(c_uint, 0x00000004);
pub const CKMD_TDCPRECTL_SRC_LFCLK_DLY = @as(c_uint, 0x00000003);
pub const CKMD_TDCPRECTL_SRC_LFXT = @as(c_uint, 0x00000002);
pub const CKMD_TDCPRECTL_SRC_LFOSC = @as(c_uint, 0x00000001);
pub const CKMD_TDCPRECTL_SRC_LFTICK = @as(c_uint, 0x00000000);
pub const CKMD_TDCPRECNTR_CAPT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_TDCPRECNTR_CAPT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CKMD_TDCPRECNTR_CAPT_S = @as(c_uint, 16);
pub const CKMD_TDCPRECNTR_CNT_W = @as(c_uint, 16);
pub const CKMD_TDCPRECNTR_CNT_M = @as(c_uint, 0x0000FFFF);
pub const CKMD_TDCPRECNTR_CNT_S = @as(c_uint, 0);
pub const CKMD_WDTCNT_VAL_W = @as(c_uint, 32);
pub const CKMD_WDTCNT_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const CKMD_WDTCNT_VAL_S = @as(c_uint, 0);
pub const CKMD_WDTTEST_STALLEN = @as(c_uint, 0x00000001);
pub const CKMD_WDTTEST_STALLEN_M = @as(c_uint, 0x00000001);
pub const CKMD_WDTTEST_STALLEN_S = @as(c_uint, 0);
pub const CKMD_WDTTEST_STALLEN_EN = @as(c_uint, 0x00000001);
pub const CKMD_WDTTEST_STALLEN_DIS = @as(c_uint, 0x00000000);
pub const CKMD_WDTLOCK_STAT_W = @as(c_uint, 32);
pub const CKMD_WDTLOCK_STAT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const CKMD_WDTLOCK_STAT_S = @as(c_uint, 0);
pub const __HW_CLKCTL_H__ = "";
pub const CLKCTL_O_DESC = @as(c_uint, 0x00000000);
pub const CLKCTL_O_DESCEX0 = @as(c_uint, 0x00000004);
pub const CLKCTL_O_DESCEX1 = @as(c_uint, 0x00000008);
pub const CLKCTL_O_CLKCFG0 = @as(c_uint, 0x0000000C);
pub const CLKCTL_O_CLKCFG1 = @as(c_uint, 0x00000010);
pub const CLKCTL_O_CLKENSET0 = @as(c_uint, 0x00000014);
pub const CLKCTL_O_CLKENSET1 = @as(c_uint, 0x00000018);
pub const CLKCTL_O_CLKENCLR0 = @as(c_uint, 0x00000020);
pub const CLKCTL_O_CLKENCLR1 = @as(c_uint, 0x00000024);
pub const CLKCTL_O_STBYPTR = @as(c_uint, 0x0000003C);
pub const CLKCTL_O_IDLECFG = @as(c_uint, 0x00000048);
pub const CLKCTL_DESC_MODID_W = @as(c_uint, 16);
pub const CLKCTL_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const CLKCTL_DESC_MODID_S = @as(c_uint, 16);
pub const CLKCTL_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const CLKCTL_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const CLKCTL_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const CLKCTL_DESC_INSTIDX_W = @as(c_uint, 4);
pub const CLKCTL_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const CLKCTL_DESC_INSTIDX_S = @as(c_uint, 8);
pub const CLKCTL_DESC_MAJREV_W = @as(c_uint, 4);
pub const CLKCTL_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const CLKCTL_DESC_MAJREV_S = @as(c_uint, 4);
pub const CLKCTL_DESC_MINREV_W = @as(c_uint, 4);
pub const CLKCTL_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const CLKCTL_DESC_MINREV_S = @as(c_uint, 0);
pub const CLKCTL_DESCEX0_LGPT3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_DESCEX0_LGPT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_DESCEX0_LGPT3_S = @as(c_uint, 30);
pub const CLKCTL_DESCEX0_LGPT3_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_DESCEX0_LGPT3_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LGPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_DESCEX0_LGPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_DESCEX0_LGPT2_S = @as(c_uint, 29);
pub const CLKCTL_DESCEX0_LGPT2_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_DESCEX0_LGPT2_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LGPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_DESCEX0_LGPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_DESCEX0_LGPT1_S = @as(c_uint, 28);
pub const CLKCTL_DESCEX0_LGPT1_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_DESCEX0_LGPT1_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LGPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_DESCEX0_LGPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_DESCEX0_LGPT0_S = @as(c_uint, 27);
pub const CLKCTL_DESCEX0_LGPT0_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_DESCEX0_LGPT0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_DMA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_DESCEX0_DMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_DESCEX0_DMA_S = @as(c_uint, 17);
pub const CLKCTL_DESCEX0_DMA_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_DESCEX0_DMA_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LAES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_DESCEX0_LAES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_DESCEX0_LAES_S = @as(c_uint, 16);
pub const CLKCTL_DESCEX0_LAES_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_DESCEX0_LAES_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_ADC0 = @as(c_uint, 0x00004000);
pub const CLKCTL_DESCEX0_ADC0_M = @as(c_uint, 0x00004000);
pub const CLKCTL_DESCEX0_ADC0_S = @as(c_uint, 14);
pub const CLKCTL_DESCEX0_ADC0_IP_AVAIL = @as(c_uint, 0x00004000);
pub const CLKCTL_DESCEX0_ADC0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_SPI0 = @as(c_uint, 0x00000400);
pub const CLKCTL_DESCEX0_SPI0_M = @as(c_uint, 0x00000400);
pub const CLKCTL_DESCEX0_SPI0_S = @as(c_uint, 10);
pub const CLKCTL_DESCEX0_SPI0_IP_AVAIL = @as(c_uint, 0x00000400);
pub const CLKCTL_DESCEX0_SPI0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_I2C0 = @as(c_uint, 0x00000040);
pub const CLKCTL_DESCEX0_I2C0_M = @as(c_uint, 0x00000040);
pub const CLKCTL_DESCEX0_I2C0_S = @as(c_uint, 6);
pub const CLKCTL_DESCEX0_I2C0_IP_AVAIL = @as(c_uint, 0x00000040);
pub const CLKCTL_DESCEX0_I2C0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_UART0 = @as(c_uint, 0x00000004);
pub const CLKCTL_DESCEX0_UART0_M = @as(c_uint, 0x00000004);
pub const CLKCTL_DESCEX0_UART0_S = @as(c_uint, 2);
pub const CLKCTL_DESCEX0_UART0_IP_AVAIL = @as(c_uint, 0x00000004);
pub const CLKCTL_DESCEX0_UART0_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_LRFD = @as(c_uint, 0x00000002);
pub const CLKCTL_DESCEX0_LRFD_M = @as(c_uint, 0x00000002);
pub const CLKCTL_DESCEX0_LRFD_S = @as(c_uint, 1);
pub const CLKCTL_DESCEX0_LRFD_IP_AVAIL = @as(c_uint, 0x00000002);
pub const CLKCTL_DESCEX0_LRFD_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX0_GPIO = @as(c_uint, 0x00000001);
pub const CLKCTL_DESCEX0_GPIO_M = @as(c_uint, 0x00000001);
pub const CLKCTL_DESCEX0_GPIO_S = @as(c_uint, 0);
pub const CLKCTL_DESCEX0_GPIO_IP_AVAIL = @as(c_uint, 0x00000001);
pub const CLKCTL_DESCEX0_GPIO_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX1_FLASHSZ_W = @as(c_uint, 2);
pub const CLKCTL_DESCEX1_FLASHSZ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const CLKCTL_DESCEX1_FLASHSZ_S = @as(c_uint, 30);
pub const CLKCTL_DESCEX1_FLASHSZ_SZ3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const CLKCTL_DESCEX1_FLASHSZ_SZ2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const CLKCTL_DESCEX1_FLASHSZ_SZ1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_DESCEX1_FLASHSZ_SZ0 = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX1_SRAMSZ_W = @as(c_uint, 2);
pub const CLKCTL_DESCEX1_SRAMSZ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const CLKCTL_DESCEX1_SRAMSZ_S = @as(c_uint, 28);
pub const CLKCTL_DESCEX1_SRAMSZ_SZ3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const CLKCTL_DESCEX1_SRAMSZ_SZ2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_DESCEX1_SRAMSZ_SZ1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_DESCEX1_SRAMSZ_SZ0 = @as(c_uint, 0x00000000);
pub const CLKCTL_DESCEX1_ROPT_W = @as(c_uint, 8);
pub const CLKCTL_DESCEX1_ROPT_M = @as(c_uint, 0x0000FF00);
pub const CLKCTL_DESCEX1_ROPT_S = @as(c_uint, 8);
pub const CLKCTL_DESCEX1_ROPT_MAX = @as(c_uint, 0x0000FF00);
pub const CLKCTL_CLKCFG0_LGPT3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT3_S = @as(c_uint, 30);
pub const CLKCTL_CLKCFG0_LGPT3_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT3_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LGPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT2_S = @as(c_uint, 29);
pub const CLKCTL_CLKCFG0_LGPT2_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT2_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LGPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT1_S = @as(c_uint, 28);
pub const CLKCTL_CLKCFG0_LGPT1_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT1_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LGPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT0_S = @as(c_uint, 27);
pub const CLKCTL_CLKCFG0_LGPT0_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKCFG0_LGPT0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_DMA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKCFG0_DMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKCFG0_DMA_S = @as(c_uint, 17);
pub const CLKCTL_CLKCFG0_DMA_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKCFG0_DMA_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LAES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKCFG0_LAES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKCFG0_LAES_S = @as(c_uint, 16);
pub const CLKCTL_CLKCFG0_LAES_CLK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKCFG0_LAES_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_ADC0 = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKCFG0_ADC0_M = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKCFG0_ADC0_S = @as(c_uint, 14);
pub const CLKCTL_CLKCFG0_ADC0_CLK_EN = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKCFG0_ADC0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_SPI0 = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKCFG0_SPI0_M = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKCFG0_SPI0_S = @as(c_uint, 10);
pub const CLKCTL_CLKCFG0_SPI0_CLK_EN = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKCFG0_SPI0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_I2C0 = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKCFG0_I2C0_M = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKCFG0_I2C0_S = @as(c_uint, 6);
pub const CLKCTL_CLKCFG0_I2C0_CLK_EN = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKCFG0_I2C0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_UART0 = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKCFG0_UART0_M = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKCFG0_UART0_S = @as(c_uint, 2);
pub const CLKCTL_CLKCFG0_UART0_CLK_EN = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKCFG0_UART0_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_LRFD = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKCFG0_LRFD_M = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKCFG0_LRFD_S = @as(c_uint, 1);
pub const CLKCTL_CLKCFG0_LRFD_CLK_EN = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKCFG0_LRFD_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKCFG0_GPIO = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKCFG0_GPIO_M = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKCFG0_GPIO_S = @as(c_uint, 0);
pub const CLKCTL_CLKCFG0_GPIO_CLK_EN = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKCFG0_GPIO_CLK_DIS = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LGPT3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT3_S = @as(c_uint, 30);
pub const CLKCTL_CLKENSET0_LGPT3_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT3_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LGPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT2_S = @as(c_uint, 29);
pub const CLKCTL_CLKENSET0_LGPT2_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT2_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LGPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT1_S = @as(c_uint, 28);
pub const CLKCTL_CLKENSET0_LGPT1_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT1_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LGPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT0_S = @as(c_uint, 27);
pub const CLKCTL_CLKENSET0_LGPT0_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENSET0_LGPT0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_DMA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENSET0_DMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENSET0_DMA_S = @as(c_uint, 17);
pub const CLKCTL_CLKENSET0_DMA_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENSET0_DMA_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LAES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENSET0_LAES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENSET0_LAES_S = @as(c_uint, 16);
pub const CLKCTL_CLKENSET0_LAES_CLK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENSET0_LAES_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_ADC0 = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENSET0_ADC0_M = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENSET0_ADC0_S = @as(c_uint, 14);
pub const CLKCTL_CLKENSET0_ADC0_CLK_SET = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENSET0_ADC0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_SPI0 = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENSET0_SPI0_M = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENSET0_SPI0_S = @as(c_uint, 10);
pub const CLKCTL_CLKENSET0_SPI0_CLK_SET = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENSET0_SPI0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_I2C0 = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENSET0_I2C0_M = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENSET0_I2C0_S = @as(c_uint, 6);
pub const CLKCTL_CLKENSET0_I2C0_CLK_SET = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENSET0_I2C0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_UART0 = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENSET0_UART0_M = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENSET0_UART0_S = @as(c_uint, 2);
pub const CLKCTL_CLKENSET0_UART0_CLK_SET = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENSET0_UART0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_LRFD = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENSET0_LRFD_M = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENSET0_LRFD_S = @as(c_uint, 1);
pub const CLKCTL_CLKENSET0_LRFD_CLK_SET = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENSET0_LRFD_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENSET0_GPIO = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENSET0_GPIO_M = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENSET0_GPIO_S = @as(c_uint, 0);
pub const CLKCTL_CLKENSET0_GPIO_CLK_SET = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENSET0_GPIO_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LGPT3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT3_S = @as(c_uint, 30);
pub const CLKCTL_CLKENCLR0_LGPT3_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT3_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LGPT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT2_S = @as(c_uint, 29);
pub const CLKCTL_CLKENCLR0_LGPT2_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT2_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LGPT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT1_S = @as(c_uint, 28);
pub const CLKCTL_CLKENCLR0_LGPT1_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT1_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LGPT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT0_S = @as(c_uint, 27);
pub const CLKCTL_CLKENCLR0_LGPT0_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const CLKCTL_CLKENCLR0_LGPT0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_DMA = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENCLR0_DMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENCLR0_DMA_S = @as(c_uint, 17);
pub const CLKCTL_CLKENCLR0_DMA_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const CLKCTL_CLKENCLR0_DMA_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LAES = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENCLR0_LAES_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENCLR0_LAES_S = @as(c_uint, 16);
pub const CLKCTL_CLKENCLR0_LAES_CLK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const CLKCTL_CLKENCLR0_LAES_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_ADC0 = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENCLR0_ADC0_M = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENCLR0_ADC0_S = @as(c_uint, 14);
pub const CLKCTL_CLKENCLR0_ADC0_CLK_CLR = @as(c_uint, 0x00004000);
pub const CLKCTL_CLKENCLR0_ADC0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_SPI0 = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENCLR0_SPI0_M = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENCLR0_SPI0_S = @as(c_uint, 10);
pub const CLKCTL_CLKENCLR0_SPI0_CLK_CLR = @as(c_uint, 0x00000400);
pub const CLKCTL_CLKENCLR0_SPI0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_I2C0 = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENCLR0_I2C0_M = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENCLR0_I2C0_S = @as(c_uint, 6);
pub const CLKCTL_CLKENCLR0_I2C0_CLK_CLR = @as(c_uint, 0x00000040);
pub const CLKCTL_CLKENCLR0_I2C0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_UART0 = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENCLR0_UART0_M = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENCLR0_UART0_S = @as(c_uint, 2);
pub const CLKCTL_CLKENCLR0_UART0_CLK_CLR = @as(c_uint, 0x00000004);
pub const CLKCTL_CLKENCLR0_UART0_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_LRFD = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENCLR0_LRFD_M = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENCLR0_LRFD_S = @as(c_uint, 1);
pub const CLKCTL_CLKENCLR0_LRFD_CLK_CLR = @as(c_uint, 0x00000002);
pub const CLKCTL_CLKENCLR0_LRFD_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_CLKENCLR0_GPIO = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENCLR0_GPIO_M = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENCLR0_GPIO_S = @as(c_uint, 0);
pub const CLKCTL_CLKENCLR0_GPIO_CLK_CLR = @as(c_uint, 0x00000001);
pub const CLKCTL_CLKENCLR0_GPIO_CLK_UNCHGD = @as(c_uint, 0x00000000);
pub const CLKCTL_STBYPTR_VAL_W = @as(c_uint, 32);
pub const CLKCTL_STBYPTR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const CLKCTL_STBYPTR_VAL_S = @as(c_uint, 0);
pub const CLKCTL_STBYPTR_VAL_MIN = @as(c_uint, 0x00000000);
pub const CLKCTL_IDLECFG_MODE = @as(c_uint, 0x00000001);
pub const CLKCTL_IDLECFG_MODE_M = @as(c_uint, 0x00000001);
pub const CLKCTL_IDLECFG_MODE_S = @as(c_uint, 0);
pub const CLKCTL_IDLECFG_MODE_LDO_OFF = @as(c_uint, 0x00000001);
pub const CLKCTL_IDLECFG_MODE_LDO_ON = @as(c_uint, 0x00000000);
pub const __HW_EVTSVT_H__ = "";
pub const EVTSVT_O_DESC = @as(c_uint, 0x00000000);
pub const EVTSVT_O_DESCEX = @as(c_uint, 0x00000004);
pub const EVTSVT_O_DTB = @as(c_uint, 0x00000064);
pub const EVTSVT_O_NMISEL = @as(c_uint, 0x00000400);
pub const EVTSVT_O_CPUIRQ0SEL = @as(c_uint, 0x00000404);
pub const EVTSVT_O_CPUIRQ1SEL = @as(c_uint, 0x00000408);
pub const EVTSVT_O_CPUIRQ2SEL = @as(c_uint, 0x0000040C);
pub const EVTSVT_O_CPUIRQ3SEL = @as(c_uint, 0x00000410);
pub const EVTSVT_O_CPUIRQ4SEL = @as(c_uint, 0x00000414);
pub const EVTSVT_O_CPUIRQ5SEL = @as(c_uint, 0x00000418);
pub const EVTSVT_O_CPUIRQ6SEL = @as(c_uint, 0x0000041C);
pub const EVTSVT_O_CPUIRQ7SEL = @as(c_uint, 0x00000420);
pub const EVTSVT_O_CPUIRQ8SEL = @as(c_uint, 0x00000424);
pub const EVTSVT_O_CPUIRQ9SEL = @as(c_uint, 0x00000428);
pub const EVTSVT_O_CPUIRQ10SEL = @as(c_uint, 0x0000042C);
pub const EVTSVT_O_CPUIRQ11SEL = @as(c_uint, 0x00000430);
pub const EVTSVT_O_CPUIRQ12SEL = @as(c_uint, 0x00000434);
pub const EVTSVT_O_CPUIRQ13SEL = @as(c_uint, 0x00000438);
pub const EVTSVT_O_CPUIRQ14SEL = @as(c_uint, 0x0000043C);
pub const EVTSVT_O_CPUIRQ15SEL = @as(c_uint, 0x00000440);
pub const EVTSVT_O_CPUIRQ16SEL = @as(c_uint, 0x00000444);
pub const EVTSVT_O_CPUIRQ17SEL = @as(c_uint, 0x00000448);
pub const EVTSVT_O_CPUIRQ18SEL = @as(c_uint, 0x0000044C);
pub const EVTSVT_O_SYSTIMC0SEL = @as(c_uint, 0x00000450);
pub const EVTSVT_O_SYSTIMC1SEL = @as(c_uint, 0x00000454);
pub const EVTSVT_O_SYSTIMC2SEL = @as(c_uint, 0x00000458);
pub const EVTSVT_O_SYSTIMC3SEL = @as(c_uint, 0x0000045C);
pub const EVTSVT_O_SYSTIMC4SEL = @as(c_uint, 0x00000460);
pub const EVTSVT_O_ADCTRGSEL = @as(c_uint, 0x00000464);
pub const EVTSVT_O_LGPTSYNCSEL = @as(c_uint, 0x00000468);
pub const EVTSVT_O_LGPT0IN0SEL = @as(c_uint, 0x0000046C);
pub const EVTSVT_O_LGPT0IN1SEL = @as(c_uint, 0x00000470);
pub const EVTSVT_O_LGPT0IN2SEL = @as(c_uint, 0x00000474);
pub const EVTSVT_O_LGPT0TENSEL = @as(c_uint, 0x00000478);
pub const EVTSVT_O_LGPT1IN0SEL = @as(c_uint, 0x0000047C);
pub const EVTSVT_O_LGPT1IN1SEL = @as(c_uint, 0x00000480);
pub const EVTSVT_O_LGPT1IN2SEL = @as(c_uint, 0x00000484);
pub const EVTSVT_O_LGPT1TENSEL = @as(c_uint, 0x00000488);
pub const EVTSVT_O_LGPT2IN0SEL = @as(c_uint, 0x0000048C);
pub const EVTSVT_O_LGPT2IN1SEL = @as(c_uint, 0x00000490);
pub const EVTSVT_O_LGPT2IN2SEL = @as(c_uint, 0x00000494);
pub const EVTSVT_O_LGPT2TENSEL = @as(c_uint, 0x00000498);
pub const EVTSVT_O_LGPT3IN0SEL = @as(c_uint, 0x0000049C);
pub const EVTSVT_O_LGPT3IN1SEL = @as(c_uint, 0x000004A0);
pub const EVTSVT_O_LGPT3IN2SEL = @as(c_uint, 0x000004A4);
pub const EVTSVT_O_LGPT3TENSEL = @as(c_uint, 0x000004A8);
pub const EVTSVT_O_LRFDIN0SEL = @as(c_uint, 0x000004AC);
pub const EVTSVT_O_LRFDIN1SEL = @as(c_uint, 0x000004B0);
pub const EVTSVT_O_LRFDIN2SEL = @as(c_uint, 0x000004B4);
pub const EVTSVT_O_DMACH0SEL = @as(c_uint, 0x00000C00);
pub const EVTSVT_O_DMACH1SEL = @as(c_uint, 0x00000C04);
pub const EVTSVT_O_DMACH2SEL = @as(c_uint, 0x00000C08);
pub const EVTSVT_O_DMACH3SEL = @as(c_uint, 0x00000C0C);
pub const EVTSVT_O_DMACH4SEL = @as(c_uint, 0x00000C10);
pub const EVTSVT_O_DMACH5SEL = @as(c_uint, 0x00000C14);
pub const EVTSVT_O_DMACH6SEL = @as(c_uint, 0x00000C18);
pub const EVTSVT_O_DMACH7SEL = @as(c_uint, 0x00000C1C);
pub const EVTSVT_DESC_MODID_W = @as(c_uint, 16);
pub const EVTSVT_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const EVTSVT_DESC_MODID_S = @as(c_uint, 16);
pub const EVTSVT_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const EVTSVT_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const EVTSVT_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const EVTSVT_DESC_INSTIDX_W = @as(c_uint, 4);
pub const EVTSVT_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const EVTSVT_DESC_INSTIDX_S = @as(c_uint, 8);
pub const EVTSVT_DESC_MAJREV_W = @as(c_uint, 4);
pub const EVTSVT_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const EVTSVT_DESC_MAJREV_S = @as(c_uint, 4);
pub const EVTSVT_DESC_MINREV_W = @as(c_uint, 4);
pub const EVTSVT_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const EVTSVT_DESC_MINREV_S = @as(c_uint, 0);
pub const EVTSVT_DESCEX_IDMA_W = @as(c_uint, 10);
pub const EVTSVT_DESCEX_IDMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFC00000, .hex);
pub const EVTSVT_DESCEX_IDMA_S = @as(c_uint, 22);
pub const EVTSVT_DESCEX_NDMA_W = @as(c_uint, 5);
pub const EVTSVT_DESCEX_NDMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003E0000, .hex);
pub const EVTSVT_DESCEX_NDMA_S = @as(c_uint, 17);
pub const EVTSVT_DESCEX_PD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTSVT_DESCEX_PD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTSVT_DESCEX_PD_S = @as(c_uint, 16);
pub const EVTSVT_DESCEX_NSUB_W = @as(c_uint, 8);
pub const EVTSVT_DESCEX_NSUB_M = @as(c_uint, 0x0000FF00);
pub const EVTSVT_DESCEX_NSUB_S = @as(c_uint, 8);
pub const EVTSVT_DESCEX_NPUB_W = @as(c_uint, 8);
pub const EVTSVT_DESCEX_NPUB_M = @as(c_uint, 0x000000FF);
pub const EVTSVT_DESCEX_NPUB_S = @as(c_uint, 0);
pub const EVTSVT_DTB_SEL_W = @as(c_uint, 2);
pub const EVTSVT_DTB_SEL_M = @as(c_uint, 0x00000003);
pub const EVTSVT_DTB_SEL_S = @as(c_uint, 0);
pub const EVTSVT_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const EVTSVT_NMISEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_NMISEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_NMISEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_NMISEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_NMISEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_NMISEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_NMISEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_NMISEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_NMISEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_NMISEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_NMISEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_NMISEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_NMISEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_NMISEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_NMISEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_NMISEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_NMISEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_NMISEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_NMISEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_NMISEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_NMISEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_NMISEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_NMISEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_NMISEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_NMISEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_NMISEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_NMISEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_NMISEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_NMISEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_NMISEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_NMISEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_NMISEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_NMISEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_NMISEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_NMISEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_NMISEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_NMISEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_NMISEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_NMISEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_NMISEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_NMISEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_NMISEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_NMISEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_NMISEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_NMISEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_NMISEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_NMISEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_NMISEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_NMISEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_NMISEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_NMISEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_NMISEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_NMISEL_PUBID_AON_NMI_SEL = @as(c_uint, 0x00000001);
pub const EVTSVT_NMISEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_CPUIRQ0SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ0SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ0SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_CPUIRQ0SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ0SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_CPUIRQ0SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ0SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ0SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_CPUIRQ0SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_CPUIRQ0SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ0SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_CPUIRQ0SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_CPUIRQ0SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_CPUIRQ1SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ1SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ1SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_CPUIRQ1SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ1SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_CPUIRQ1SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ1SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ1SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_CPUIRQ1SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_CPUIRQ1SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ1SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_CPUIRQ1SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_CPUIRQ1SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ2SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ2SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ2SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_CPUIRQ2SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ2SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ2SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ2SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ2SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_CPUIRQ2SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ2SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_CPUIRQ2SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_CPUIRQ2SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ3SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ3SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ3SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ3SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ3SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ3SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_CPUIRQ3SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ3SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ3SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ3SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ3SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_CPUIRQ3SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ3SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_CPUIRQ3SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_CPUIRQ3SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ4SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ4SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ4SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ4SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ4SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ4SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_CPUIRQ4SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ4SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ4SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ4SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ4SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_CPUIRQ4SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ4SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_CPUIRQ4SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_CPUIRQ4SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ5SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ5SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ5SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ5SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ6SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ6SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ6SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ6SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ7SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ7SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ7SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ7SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ8SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ8SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ8SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ8SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ9SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ9SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ9SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ9SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ10SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ10SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ10SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ10SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ11SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ11SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ11SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ11SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ12SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ12SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ12SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ12SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ13SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ13SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ13SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ13SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ14SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ14SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ14SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ14SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ15SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ15SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ15SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ15SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ16SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ16SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ16SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_CPUIRQ16SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_CPUIRQ16SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_CPUIRQ16SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_CPUIRQ16SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_CPUIRQ16SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_CPUIRQ16SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_CPUIRQ16SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_CPUIRQ16SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_CPUIRQ16SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_CPUIRQ16SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_CPUIRQ16SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_CPUIRQ16SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_CPUIRQ16SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_CPUIRQ17SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ17SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ17SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ17SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_CPUIRQ18SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_CPUIRQ18SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_CPUIRQ18SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_CPUIRQ18SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_SYSTIMC0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_SYSTIMC0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_SYSTIMC0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_SYSTIMC0SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_SYSTIMC1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_SYSTIMC1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_SYSTIMC1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_SYSTIMC1SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_SYSTIMC1SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_SYSTIMC1SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_SYSTIMC1SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_SYSTIMC1SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_SYSTIMC1SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_SYSTIMC1SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_SYSTIMC1SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_SYSTIMC1SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_SYSTIMC1SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_SYSTIMC1SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_SYSTIMC1SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_SYSTIMC1SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_SYSTIMC2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_SYSTIMC2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_SYSTIMC2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_SYSTIMC2SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_SYSTIMC3SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_SYSTIMC3SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_SYSTIMC3SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_SYSTIMC3SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_SYSTIMC4SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_SYSTIMC4SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_SYSTIMC4SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_SYSTIMC4SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_ADCTRGSEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_ADCTRGSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_ADCTRGSEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_ADCTRGSEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_ADCTRGSEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_ADCTRGSEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_ADCTRGSEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_ADCTRGSEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_ADCTRGSEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_ADCTRGSEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_ADCTRGSEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_ADCTRGSEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_ADCTRGSEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_ADCTRGSEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_ADCTRGSEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_ADCTRGSEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_ADCTRGSEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_ADCTRGSEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_ADCTRGSEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_ADCTRGSEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_ADCTRGSEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_ADCTRGSEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_ADCTRGSEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_ADCTRGSEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_ADCTRGSEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_ADCTRGSEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_ADCTRGSEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_ADCTRGSEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_ADCTRGSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPTSYNCSEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPTSYNCSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPTSYNCSEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPTSYNCSEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_LGPTSYNCSEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_LGPTSYNCSEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_LGPTSYNCSEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_LGPTSYNCSEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPTSYNCSEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_LGPTSYNCSEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_LGPTSYNCSEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_LGPTSYNCSEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPTSYNCSEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_LGPTSYNCSEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_LGPTSYNCSEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_LGPTSYNCSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT0IN0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT0IN0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT0IN0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT0IN0SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_LGPT0IN0SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_LGPT0IN0SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_LGPT0IN0SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_LGPT0IN0SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT0IN0SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_LGPT0IN0SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_LGPT0IN0SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_LGPT0IN0SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT0IN0SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_LGPT0IN0SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_LGPT0IN0SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_LGPT0IN0SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT0IN1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT0IN1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT0IN1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT0IN1SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT0IN1SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT0IN1SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT0IN1SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT0IN1SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT0IN2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT0IN2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT0IN2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT0IN2SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT0IN2SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT0IN2SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT0IN2SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT0IN2SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT0TENSEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT0TENSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT0TENSEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT0TENSEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT0TENSEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT0TENSEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT0TENSEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT0TENSEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT0TENSEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT0TENSEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT0TENSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT1IN0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT1IN0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT1IN0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT1IN0SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_LGPT1IN0SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_LGPT1IN0SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_LGPT1IN0SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_LGPT1IN0SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT1IN0SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_LGPT1IN0SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_LGPT1IN0SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_LGPT1IN0SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT1IN0SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_LGPT1IN0SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_LGPT1IN0SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_LGPT1IN0SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT1IN1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT1IN1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT1IN1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT1IN1SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT1IN1SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT1IN1SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT1IN1SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT1IN1SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT1IN2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT1IN2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT1IN2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT1IN2SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT1IN2SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT1IN2SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT1IN2SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT1IN2SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT1TENSEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT1TENSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT1TENSEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT1TENSEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT1TENSEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT1TENSEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT1TENSEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT1TENSEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT1TENSEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT1TENSEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT1TENSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT2IN0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT2IN0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT2IN0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT2IN0SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_LGPT2IN0SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_LGPT2IN0SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_LGPT2IN0SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_LGPT2IN0SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT2IN0SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_LGPT2IN0SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_LGPT2IN0SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_LGPT2IN0SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT2IN0SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_LGPT2IN0SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_LGPT2IN0SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_LGPT2IN0SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT2IN1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT2IN1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT2IN1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT2IN1SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT2IN1SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT2IN1SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT2IN1SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT2IN1SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT2IN2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT2IN2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT2IN2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT2IN2SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT2IN2SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT2IN2SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT2IN2SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT2IN2SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT2TENSEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT2TENSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT2TENSEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT2TENSEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT2TENSEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT2TENSEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT2TENSEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT2TENSEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT2TENSEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT2TENSEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT2TENSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT3IN0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT3IN0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT3IN0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT3IN0SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_LGPT3IN0SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_LGPT3IN0SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_LGPT3IN0SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_LGPT3IN0SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT3IN0SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_LGPT3IN0SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_LGPT3IN0SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_LGPT3IN0SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT3IN0SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_LGPT3IN0SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_LGPT3IN0SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_LGPT3IN0SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT3IN1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT3IN1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT3IN1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT3IN1SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT3IN1SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT3IN1SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT3IN1SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT3IN1SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT3IN2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT3IN2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT3IN2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT3IN2SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT3IN2SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT3IN2SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT3IN2SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT3IN2SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LGPT3TENSEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LGPT3TENSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LGPT3TENSEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_LGPT3TENSEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_LGPT3TENSEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_LGPT3TENSEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_LGPT3TENSEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_LGPT3TENSEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_LGPT3TENSEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_LGPT3TENSEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_LGPT3TENSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_LRFDIN0SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LRFDIN0SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LRFDIN0SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LRFDIN0SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_LRFDIN1SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LRFDIN1SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LRFDIN1SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LRFDIN1SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_LRFDIN2SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_LRFDIN2SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_LRFDIN2SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_LRFDIN2SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_DMACH0SEL_IPID_W = @as(c_uint, 3);
pub const EVTSVT_DMACH0SEL_IPID_M = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH0SEL_IPID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH0SEL_IPID_UART0RXTRG = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH0SEL_IPID_SPI0TXTRG = @as(c_uint, 0x00000000);
pub const EVTSVT_DMACH1SEL_IPID_W = @as(c_uint, 3);
pub const EVTSVT_DMACH1SEL_IPID_M = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH1SEL_IPID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH1SEL_IPID_UART0TXTRG = @as(c_uint, 0x00000006);
pub const EVTSVT_DMACH1SEL_IPID_SPI0RXTRG = @as(c_uint, 0x00000001);
pub const EVTSVT_DMACH2SEL_IPID_W = @as(c_uint, 3);
pub const EVTSVT_DMACH2SEL_IPID_M = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH2SEL_IPID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH2SEL_IPID_UART0TXTRG = @as(c_uint, 0x00000006);
pub const EVTSVT_DMACH2SEL_IPID_RSVD = @as(c_uint, 0x00000002);
pub const EVTSVT_DMACH3SEL_IPID_W = @as(c_uint, 3);
pub const EVTSVT_DMACH3SEL_IPID_M = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH3SEL_IPID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH3SEL_IPID_UART0RXTRG = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH3SEL_IPID_ADC0TRG = @as(c_uint, 0x00000005);
pub const EVTSVT_DMACH4SEL_IPID_W = @as(c_uint, 3);
pub const EVTSVT_DMACH4SEL_IPID_M = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH4SEL_IPID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH4SEL_IPID_LAESTRGA = @as(c_uint, 0x00000003);
pub const EVTSVT_DMACH4SEL_IPID_RSVD = @as(c_uint, 0x00000002);
pub const EVTSVT_DMACH5SEL_IPID_W = @as(c_uint, 3);
pub const EVTSVT_DMACH5SEL_IPID_M = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH5SEL_IPID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH5SEL_IPID_ADC0TRG = @as(c_uint, 0x00000005);
pub const EVTSVT_DMACH5SEL_IPID_LAESTRGB = @as(c_uint, 0x00000004);
pub const EVTSVT_DMACH6SEL_EDGDETDIS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTSVT_DMACH6SEL_EDGDETDIS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTSVT_DMACH6SEL_EDGDETDIS_S = @as(c_uint, 16);
pub const EVTSVT_DMACH6SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_DMACH6SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_DMACH6SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_DMACH6SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_DMACH6SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_DMACH6SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_DMACH6SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_DMACH6SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_DMACH6SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_DMACH6SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_DMACH6SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_DMACH6SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_DMACH6SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_DMACH6SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_DMACH6SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_DMACH6SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_DMACH6SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_DMACH6SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_DMACH6SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_DMACH6SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_DMACH6SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_DMACH6SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_DMACH6SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH6SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_DMACH6SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_DMACH6SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_DMACH6SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_DMACH6SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_DMACH6SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTSVT_DMACH7SEL_EDGDETDIS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTSVT_DMACH7SEL_EDGDETDIS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTSVT_DMACH7SEL_EDGDETDIS_S = @as(c_uint, 16);
pub const EVTSVT_DMACH7SEL_PUBID_W = @as(c_uint, 6);
pub const EVTSVT_DMACH7SEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTSVT_DMACH7SEL_PUBID_S = @as(c_uint, 0);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT3_ADC = @as(c_uint, 0x00000039);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT3_DMA = @as(c_uint, 0x00000038);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT3_COMB = @as(c_uint, 0x00000037);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT3C2 = @as(c_uint, 0x00000036);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT3C1 = @as(c_uint, 0x00000035);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT3C0 = @as(c_uint, 0x00000034);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT2_ADC = @as(c_uint, 0x00000033);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT2_DMA = @as(c_uint, 0x00000032);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT2_COMB = @as(c_uint, 0x00000031);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT2C2 = @as(c_uint, 0x00000030);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT2C1 = @as(c_uint, 0x0000002F);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT2C0 = @as(c_uint, 0x0000002E);
pub const EVTSVT_DMACH7SEL_PUBID_LRFD_EVT2 = @as(c_uint, 0x0000002C);
pub const EVTSVT_DMACH7SEL_PUBID_LRFD_EVT1 = @as(c_uint, 0x0000002B);
pub const EVTSVT_DMACH7SEL_PUBID_LRFD_EVT0 = @as(c_uint, 0x0000002A);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT1_ADC = @as(c_uint, 0x00000029);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT1_DMA = @as(c_uint, 0x00000028);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT1C2 = @as(c_uint, 0x00000027);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT1C1 = @as(c_uint, 0x00000026);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT1C0 = @as(c_uint, 0x00000025);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT0_ADC = @as(c_uint, 0x00000024);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT0_DMA = @as(c_uint, 0x00000023);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT0C2 = @as(c_uint, 0x00000022);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT0C1 = @as(c_uint, 0x00000021);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT0C0 = @as(c_uint, 0x00000020);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM4 = @as(c_uint, 0x0000001F);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM3 = @as(c_uint, 0x0000001E);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM2 = @as(c_uint, 0x0000001D);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM1 = @as(c_uint, 0x0000001C);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM0 = @as(c_uint, 0x0000001B);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM_LT = @as(c_uint, 0x0000001A);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM_HB = @as(c_uint, 0x00000019);
pub const EVTSVT_DMACH7SEL_PUBID_I2C0_IRQ = @as(c_uint, 0x00000018);
pub const EVTSVT_DMACH7SEL_PUBID_UART0_COMB = @as(c_uint, 0x00000017);
pub const EVTSVT_DMACH7SEL_PUBID_AES_COMB = @as(c_uint, 0x00000016);
pub const EVTSVT_DMACH7SEL_PUBID_DMA_ERR = @as(c_uint, 0x00000015);
pub const EVTSVT_DMACH7SEL_PUBID_DMA_DONE_COMB = @as(c_uint, 0x00000014);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT1_COMB = @as(c_uint, 0x00000013);
pub const EVTSVT_DMACH7SEL_PUBID_LGPT0_COMB = @as(c_uint, 0x00000012);
pub const EVTSVT_DMACH7SEL_PUBID_ADC_EVT = @as(c_uint, 0x00000011);
pub const EVTSVT_DMACH7SEL_PUBID_ADC_COMB = @as(c_uint, 0x00000010);
pub const EVTSVT_DMACH7SEL_PUBID_SPI0_COMB = @as(c_uint, 0x0000000F);
pub const EVTSVT_DMACH7SEL_PUBID_LRFD_IRQ2 = @as(c_uint, 0x0000000E);
pub const EVTSVT_DMACH7SEL_PUBID_LRFD_IRQ1 = @as(c_uint, 0x0000000D);
pub const EVTSVT_DMACH7SEL_PUBID_LRFD_IRQ0 = @as(c_uint, 0x0000000C);
pub const EVTSVT_DMACH7SEL_PUBID_FLASH_IRQ = @as(c_uint, 0x0000000B);
pub const EVTSVT_DMACH7SEL_PUBID_GPIO_EVT = @as(c_uint, 0x0000000A);
pub const EVTSVT_DMACH7SEL_PUBID_GPIO_COMB = @as(c_uint, 0x00000009);
pub const EVTSVT_DMACH7SEL_PUBID_SYSTIM_COMB = @as(c_uint, 0x00000008);
pub const EVTSVT_DMACH7SEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTSVT_DMACH7SEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTSVT_DMACH7SEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTSVT_DMACH7SEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTSVT_DMACH7SEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTSVT_DMACH7SEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTSVT_DMACH7SEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const __HW_EVTULL_H__ = "";
pub const EVTULL_O_DESC = @as(c_uint, 0x00000000);
pub const EVTULL_O_DESCEX = @as(c_uint, 0x00000004);
pub const EVTULL_O_DTB = @as(c_uint, 0x00000064);
pub const EVTULL_O_NMISEL = @as(c_uint, 0x00000400);
pub const EVTULL_O_RTCCPTSEL = @as(c_uint, 0x00000404);
pub const EVTULL_O_WKUPMASK = @as(c_uint, 0x00000800);
pub const EVTULL_DESC_MODID_W = @as(c_uint, 16);
pub const EVTULL_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const EVTULL_DESC_MODID_S = @as(c_uint, 16);
pub const EVTULL_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const EVTULL_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const EVTULL_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const EVTULL_DESC_INSTIDX_W = @as(c_uint, 4);
pub const EVTULL_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const EVTULL_DESC_INSTIDX_S = @as(c_uint, 8);
pub const EVTULL_DESC_MAJREV_W = @as(c_uint, 4);
pub const EVTULL_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const EVTULL_DESC_MAJREV_S = @as(c_uint, 4);
pub const EVTULL_DESC_MINREV_W = @as(c_uint, 4);
pub const EVTULL_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const EVTULL_DESC_MINREV_S = @as(c_uint, 0);
pub const EVTULL_DESCEX_IDMA_W = @as(c_uint, 10);
pub const EVTULL_DESCEX_IDMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFC00000, .hex);
pub const EVTULL_DESCEX_IDMA_S = @as(c_uint, 22);
pub const EVTULL_DESCEX_NDMA_W = @as(c_uint, 5);
pub const EVTULL_DESCEX_NDMA_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x003E0000, .hex);
pub const EVTULL_DESCEX_NDMA_S = @as(c_uint, 17);
pub const EVTULL_DESCEX_PD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTULL_DESCEX_PD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const EVTULL_DESCEX_PD_S = @as(c_uint, 16);
pub const EVTULL_DESCEX_NSUB_W = @as(c_uint, 8);
pub const EVTULL_DESCEX_NSUB_M = @as(c_uint, 0x0000FF00);
pub const EVTULL_DESCEX_NSUB_S = @as(c_uint, 8);
pub const EVTULL_DESCEX_NPUB_W = @as(c_uint, 8);
pub const EVTULL_DESCEX_NPUB_M = @as(c_uint, 0x000000FF);
pub const EVTULL_DESCEX_NPUB_S = @as(c_uint, 0);
pub const EVTULL_DTB_SEL = @as(c_uint, 0x00000001);
pub const EVTULL_DTB_SEL_M = @as(c_uint, 0x00000001);
pub const EVTULL_DTB_SEL_S = @as(c_uint, 0);
pub const EVTULL_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const EVTULL_NMISEL_PUBID_W = @as(c_uint, 6);
pub const EVTULL_NMISEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTULL_NMISEL_PUBID_S = @as(c_uint, 0);
pub const EVTULL_NMISEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTULL_NMISEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTULL_NMISEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTULL_NMISEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTULL_NMISEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTULL_NMISEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTULL_NMISEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTULL_RTCCPTSEL_PUBID_W = @as(c_uint, 6);
pub const EVTULL_RTCCPTSEL_PUBID_M = @as(c_uint, 0x0000003F);
pub const EVTULL_RTCCPTSEL_PUBID_S = @as(c_uint, 0);
pub const EVTULL_RTCCPTSEL_PUBID_AON_IOC_COMB = @as(c_uint, 0x00000007);
pub const EVTULL_RTCCPTSEL_PUBID_AON_LPMCMP_IRQ = @as(c_uint, 0x00000006);
pub const EVTULL_RTCCPTSEL_PUBID_AON_DBG_COMB = @as(c_uint, 0x00000005);
pub const EVTULL_RTCCPTSEL_PUBID_AON_RTC_COMB = @as(c_uint, 0x00000004);
pub const EVTULL_RTCCPTSEL_PUBID_AON_CKM_COMB = @as(c_uint, 0x00000003);
pub const EVTULL_RTCCPTSEL_PUBID_AON_PMU_COMB = @as(c_uint, 0x00000002);
pub const EVTULL_RTCCPTSEL_PUBID_NONE = @as(c_uint, 0x00000000);
pub const EVTULL_WKUPMASK_AON_IOC_COMB = @as(c_uint, 0x00000080);
pub const EVTULL_WKUPMASK_AON_IOC_COMB_M = @as(c_uint, 0x00000080);
pub const EVTULL_WKUPMASK_AON_IOC_COMB_S = @as(c_uint, 7);
pub const EVTULL_WKUPMASK_AON_LPMCMP_IRQ = @as(c_uint, 0x00000040);
pub const EVTULL_WKUPMASK_AON_LPMCMP_IRQ_M = @as(c_uint, 0x00000040);
pub const EVTULL_WKUPMASK_AON_LPMCMP_IRQ_S = @as(c_uint, 6);
pub const EVTULL_WKUPMASK_AON_DBG_COMB = @as(c_uint, 0x00000020);
pub const EVTULL_WKUPMASK_AON_DBG_COMB_M = @as(c_uint, 0x00000020);
pub const EVTULL_WKUPMASK_AON_DBG_COMB_S = @as(c_uint, 5);
pub const EVTULL_WKUPMASK_AON_RTC_COMB = @as(c_uint, 0x00000010);
pub const EVTULL_WKUPMASK_AON_RTC_COMB_M = @as(c_uint, 0x00000010);
pub const EVTULL_WKUPMASK_AON_RTC_COMB_S = @as(c_uint, 4);
pub const EVTULL_WKUPMASK_AON_CKM_COMB = @as(c_uint, 0x00000008);
pub const EVTULL_WKUPMASK_AON_CKM_COMB_M = @as(c_uint, 0x00000008);
pub const EVTULL_WKUPMASK_AON_CKM_COMB_S = @as(c_uint, 3);
pub const EVTULL_WKUPMASK_AON_PMU_COMB = @as(c_uint, 0x00000004);
pub const EVTULL_WKUPMASK_AON_PMU_COMB_M = @as(c_uint, 0x00000004);
pub const EVTULL_WKUPMASK_AON_PMU_COMB_S = @as(c_uint, 2);
pub const __HW_FCFG_H__ = "";
pub const __HW_DEVICE_H__ = "";
pub const __HW_MEMMAP_H__ = "";
pub const FLASH_MAIN_BASE = @as(c_int, 0x00000000);
pub const FLASH_MAIN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000, .hex);
pub const ROM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0F000000, .hex);
pub const ROM_SIZE = @as(c_int, 0x3000);
pub const SRAM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const SRAM_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9000, .hex);
pub const PMCTL_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const CKMD_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40001000, .hex);
pub const RTC_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40002000, .hex);
pub const IOC_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40003000, .hex);
pub const SYS0_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40004000, .hex);
pub const EVTULL_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40005000, .hex);
pub const PMUD_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40006000, .hex);
pub const DBGSS_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4000F000, .hex);
pub const CLKCTL_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40020000, .hex);
pub const FLASH_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40021000, .hex);
pub const SYSTIM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40022000, .hex);
pub const GPIO_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40023000, .hex);
pub const VIMS_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40024000, .hex);
pub const EVTSVT_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40025000, .hex);
pub const DMA_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40026000, .hex);
pub const SPI0_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40030000, .hex);
pub const UART0_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40034000, .hex);
pub const I2C0_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40038000, .hex);
pub const ADC_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40050000, .hex);
pub const LGPT0_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40060000, .hex);
pub const LGPT1_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40061000, .hex);
pub const LGPT2_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40062000, .hex);
pub const LGPT3_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40063000, .hex);
pub const LRFDDBELL_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40080000, .hex);
pub const LRFDPBE_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40081000, .hex);
pub const LRFDPBE32_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40081400, .hex);
pub const LRFDTXF_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40081800, .hex);
pub const LRFDRXF_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40081C00, .hex);
pub const LRFDMDM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40082000, .hex);
pub const LRFDMDM32_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40082400, .hex);
pub const LRFDRFE_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40083000, .hex);
pub const LRFDRFE32_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40083400, .hex);
pub const LRFDTRC_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40084000, .hex);
pub const LRFDS2R_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40085000, .hex);
pub const LRFD_PBERAM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40090000, .hex);
pub const LRFD_PBERAM_SIZE = @as(c_int, 0x1000);
pub const LRFD_BUFRAM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40092000, .hex);
pub const LRFD_BUFRAM_SIZE = @as(c_int, 0x600);
pub const LRFD_MCERAM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40094000, .hex);
pub const LRFD_MCERAM_SIZE = @as(c_int, 0x1000);
pub const LRFD_RFERAM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40096000, .hex);
pub const LRFD_RFERAM_SIZE = @as(c_int, 0x1000);
pub const LRFD_S2RRAM_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40098000, .hex);
pub const LRFD_S2RRAM_SIZE = @as(c_int, 0x1000);
pub const AES_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400C0000, .hex);
pub const FCFG_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4E000000, .hex);
pub const FCFG_SIZE = @as(c_int, 0x400);
pub const CCFG_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4E020000, .hex);
pub const CCFG_SIZE = @as(c_int, 0x800);
pub const BPU_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xE0002000, .hex);
pub const SYSTICK_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xE000E010, .hex);
pub const DCB_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xE000ED30, .hex);
pub const SCSCS_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xE000EFC0, .hex);
pub const CPU_ROM_TABLE_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xE00FF000, .hex);
pub const __HW_PLATFORM_H__ = "";
pub const __HW_PMCTL_H__ = "";
pub const PMCTL_O_DESC = @as(c_uint, 0x00000000);
pub const PMCTL_O_DESCEX = @as(c_uint, 0x00000004);
pub const PMCTL_O_SHTDWN = @as(c_uint, 0x00000008);
pub const PMCTL_O_SLPCTL = @as(c_uint, 0x0000000C);
pub const PMCTL_O_WUSTA = @as(c_uint, 0x00000010);
pub const PMCTL_O_VDDRCTL = @as(c_uint, 0x00000014);
pub const PMCTL_O_IOSEGSET = @as(c_uint, 0x00000018);
pub const PMCTL_O_IOSEGCLR = @as(c_uint, 0x0000001C);
pub const PMCTL_O_SYSFSET = @as(c_uint, 0x00000020);
pub const PMCTL_O_SYSFCLR = @as(c_uint, 0x00000024);
pub const PMCTL_O_SYSFSTA = @as(c_uint, 0x00000028);
pub const PMCTL_O_RSTCTL = @as(c_uint, 0x0000002C);
pub const PMCTL_O_RSTSTA = @as(c_uint, 0x00000030);
pub const PMCTL_O_BOOTSTA = @as(c_uint, 0x00000034);
pub const PMCTL_O_AONRSTA1 = @as(c_uint, 0x0000003C);
pub const PMCTL_O_AONRSET1 = @as(c_uint, 0x00000040);
pub const PMCTL_O_AONRCLR1 = @as(c_uint, 0x00000044);
pub const PMCTL_O_DELTA = @as(c_uint, 0x0000004C);
pub const PMCTL_O_WUTIME = @as(c_uint, 0x00000050);
pub const PMCTL_O_PREPUCTL = @as(c_uint, 0x00000054);
pub const PMCTL_O_SWSTMP = @as(c_uint, 0x00000058);
pub const PMCTL_O_ETPP = @as(c_uint, 0x00000064);
pub const PMCTL_O_RETCFG0 = @as(c_uint, 0x0000007C);
pub const PMCTL_O_RETCFG1 = @as(c_uint, 0x00000080);
pub const PMCTL_O_RETCFG2 = @as(c_uint, 0x00000084);
pub const PMCTL_O_RETCFG3 = @as(c_uint, 0x00000088);
pub const PMCTL_O_RETCFG4 = @as(c_uint, 0x0000008C);
pub const PMCTL_O_RETCFG5 = @as(c_uint, 0x00000090);
pub const PMCTL_O_RETCFG6 = @as(c_uint, 0x00000094);
pub const PMCTL_O_RETCFG7 = @as(c_uint, 0x00000098);
pub const PMCTL_DESC_MODID_W = @as(c_uint, 16);
pub const PMCTL_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const PMCTL_DESC_MODID_S = @as(c_uint, 16);
pub const PMCTL_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const PMCTL_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const PMCTL_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const PMCTL_DESC_INSTIDX_W = @as(c_uint, 4);
pub const PMCTL_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const PMCTL_DESC_INSTIDX_S = @as(c_uint, 8);
pub const PMCTL_DESC_MAJREV_W = @as(c_uint, 4);
pub const PMCTL_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const PMCTL_DESC_MAJREV_S = @as(c_uint, 4);
pub const PMCTL_DESC_MINREV_W = @as(c_uint, 4);
pub const PMCTL_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const PMCTL_DESC_MINREV_S = @as(c_uint, 0);
pub const PMCTL_DESCEX_FLASHSZ_W = @as(c_uint, 2);
pub const PMCTL_DESCEX_FLASHSZ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const PMCTL_DESCEX_FLASHSZ_S = @as(c_uint, 30);
pub const PMCTL_DESCEX_FLASHSZ_SZ3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const PMCTL_DESCEX_FLASHSZ_SZ2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const PMCTL_DESCEX_FLASHSZ_SZ1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const PMCTL_DESCEX_FLASHSZ_SZ0 = @as(c_uint, 0x00000000);
pub const PMCTL_DESCEX_SRAMSZ_W = @as(c_uint, 2);
pub const PMCTL_DESCEX_SRAMSZ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const PMCTL_DESCEX_SRAMSZ_S = @as(c_uint, 28);
pub const PMCTL_DESCEX_SRAMSZ_SZ3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x30000000, .hex);
pub const PMCTL_DESCEX_SRAMSZ_SZ2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const PMCTL_DESCEX_SRAMSZ_SZ1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const PMCTL_DESCEX_SRAMSZ_SZ0 = @as(c_uint, 0x00000000);
pub const PMCTL_DESCEX_TSD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const PMCTL_DESCEX_TSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const PMCTL_DESCEX_TSD_S = @as(c_uint, 27);
pub const PMCTL_DESCEX_TSD_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const PMCTL_DESCEX_TSD_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const PMCTL_DESCEX_LPCMP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const PMCTL_DESCEX_LPCMP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const PMCTL_DESCEX_LPCMP_S = @as(c_uint, 26);
pub const PMCTL_DESCEX_LPCMP_IP_AVAIL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const PMCTL_DESCEX_LPCMP_IP_UNAVAIL = @as(c_uint, 0x00000000);
pub const PMCTL_SHTDWN_KEY_W = @as(c_uint, 16);
pub const PMCTL_SHTDWN_KEY_M = @as(c_uint, 0x0000FFFF);
pub const PMCTL_SHTDWN_KEY_S = @as(c_uint, 0);
pub const PMCTL_SHTDWN_KEY_VALID = @as(c_uint, 0x0000A5A5);
pub const PMCTL_SLPCTL_SLPN = @as(c_uint, 0x00000001);
pub const PMCTL_SLPCTL_SLPN_M = @as(c_uint, 0x00000001);
pub const PMCTL_SLPCTL_SLPN_S = @as(c_uint, 0);
pub const PMCTL_SLPCTL_SLPN_DIS = @as(c_uint, 0x00000001);
pub const PMCTL_SLPCTL_SLPN_EN = @as(c_uint, 0x00000000);
pub const PMCTL_WUSTA_SRC_W = @as(c_uint, 2);
pub const PMCTL_WUSTA_SRC_M = @as(c_uint, 0x00000003);
pub const PMCTL_WUSTA_SRC_S = @as(c_uint, 0);
pub const PMCTL_WUSTA_SRC_STBY = @as(c_uint, 0x00000002);
pub const PMCTL_WUSTA_SRC_RST_SHTDWN = @as(c_uint, 0x00000001);
pub const PMCTL_VDDRCTL_STBY = @as(c_uint, 0x00000002);
pub const PMCTL_VDDRCTL_STBY_M = @as(c_uint, 0x00000002);
pub const PMCTL_VDDRCTL_STBY_S = @as(c_uint, 1);
pub const PMCTL_VDDRCTL_STBY_PSUEDO = @as(c_uint, 0x00000002);
pub const PMCTL_VDDRCTL_STBY_NORMAL = @as(c_uint, 0x00000000);
pub const PMCTL_VDDRCTL_SELECT = @as(c_uint, 0x00000001);
pub const PMCTL_VDDRCTL_SELECT_M = @as(c_uint, 0x00000001);
pub const PMCTL_VDDRCTL_SELECT_S = @as(c_uint, 0);
pub const PMCTL_VDDRCTL_SELECT_DCDC = @as(c_uint, 0x00000001);
pub const PMCTL_VDDRCTL_SELECT_GLDO = @as(c_uint, 0x00000000);
pub const PMCTL_IOSEGSET_VDDS3 = @as(c_uint, 0x00000002);
pub const PMCTL_IOSEGSET_VDDS3_M = @as(c_uint, 0x00000002);
pub const PMCTL_IOSEGSET_VDDS3_S = @as(c_uint, 1);
pub const PMCTL_IOSEGSET_VDDS3_EN = @as(c_uint, 0x00000002);
pub const PMCTL_IOSEGSET_VDDS3_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_IOSEGSET_VDDS2 = @as(c_uint, 0x00000001);
pub const PMCTL_IOSEGSET_VDDS2_M = @as(c_uint, 0x00000001);
pub const PMCTL_IOSEGSET_VDDS2_S = @as(c_uint, 0);
pub const PMCTL_IOSEGSET_VDDS2_EN = @as(c_uint, 0x00000001);
pub const PMCTL_IOSEGSET_VDDS2_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_IOSEGCLR_VDDS3 = @as(c_uint, 0x00000002);
pub const PMCTL_IOSEGCLR_VDDS3_M = @as(c_uint, 0x00000002);
pub const PMCTL_IOSEGCLR_VDDS3_S = @as(c_uint, 1);
pub const PMCTL_IOSEGCLR_VDDS3_DIS = @as(c_uint, 0x00000002);
pub const PMCTL_IOSEGCLR_VDDS3_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_IOSEGCLR_VDDS2 = @as(c_uint, 0x00000001);
pub const PMCTL_IOSEGCLR_VDDS2_M = @as(c_uint, 0x00000001);
pub const PMCTL_IOSEGCLR_VDDS2_S = @as(c_uint, 0);
pub const PMCTL_IOSEGCLR_VDDS2_DIS = @as(c_uint, 0x00000001);
pub const PMCTL_IOSEGCLR_VDDS2_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFSET_FLAG2 = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFSET_FLAG2_M = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFSET_FLAG2_S = @as(c_uint, 2);
pub const PMCTL_SYSFSET_FLAG2_SET = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFSET_FLAG2_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFSET_FLAG1 = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFSET_FLAG1_M = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFSET_FLAG1_S = @as(c_uint, 1);
pub const PMCTL_SYSFSET_FLAG1_SET = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFSET_FLAG1_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFSET_FLAG0 = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFSET_FLAG0_M = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFSET_FLAG0_S = @as(c_uint, 0);
pub const PMCTL_SYSFSET_FLAG0_SET = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFSET_FLAG0_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFCLR_FLAG2 = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFCLR_FLAG2_M = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFCLR_FLAG2_S = @as(c_uint, 2);
pub const PMCTL_SYSFCLR_FLAG2_CLR = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFCLR_FLAG2_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFCLR_FLAG1 = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFCLR_FLAG1_M = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFCLR_FLAG1_S = @as(c_uint, 1);
pub const PMCTL_SYSFCLR_FLAG1_CLR = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFCLR_FLAG1_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFCLR_FLAG0 = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFCLR_FLAG0_M = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFCLR_FLAG0_S = @as(c_uint, 0);
pub const PMCTL_SYSFCLR_FLAG0_CLR = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFCLR_FLAG0_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFSTA_FLAG2 = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFSTA_FLAG2_M = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFSTA_FLAG2_S = @as(c_uint, 2);
pub const PMCTL_SYSFSTA_FLAG2_VAL1 = @as(c_uint, 0x00000004);
pub const PMCTL_SYSFSTA_FLAG2_VAL0 = @as(c_uint, 0x00000000);
pub const PMCTL_SYSFSTA_FLAG1 = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFSTA_FLAG1_M = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFSTA_FLAG1_S = @as(c_uint, 1);
pub const PMCTL_SYSFSTA_FLAG1_VAL1 = @as(c_uint, 0x00000002);
pub const PMCTL_SYSFSTA_FLAG0 = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFSTA_FLAG0_M = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFSTA_FLAG0_S = @as(c_uint, 0);
pub const PMCTL_SYSFSTA_FLAG0_VAL1 = @as(c_uint, 0x00000001);
pub const PMCTL_SYSFSTA_FLAG0_VAL0 = @as(c_uint, 0x00000000);
pub const PMCTL_RSTCTL_LFLOSS = @as(c_uint, 0x00000004);
pub const PMCTL_RSTCTL_LFLOSS_M = @as(c_uint, 0x00000004);
pub const PMCTL_RSTCTL_LFLOSS_S = @as(c_uint, 2);
pub const PMCTL_RSTCTL_LFLOSS_ARMED = @as(c_uint, 0x00000004);
pub const PMCTL_RSTCTL_LFLOSS_DISARMED = @as(c_uint, 0x00000000);
pub const PMCTL_RSTCTL_TSDEN = @as(c_uint, 0x00000002);
pub const PMCTL_RSTCTL_TSDEN_M = @as(c_uint, 0x00000002);
pub const PMCTL_RSTCTL_TSDEN_S = @as(c_uint, 1);
pub const PMCTL_RSTCTL_TSDEN_EN = @as(c_uint, 0x00000002);
pub const PMCTL_RSTCTL_TSDEN_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_RSTCTL_SYSRST = @as(c_uint, 0x00000001);
pub const PMCTL_RSTCTL_SYSRST_M = @as(c_uint, 0x00000001);
pub const PMCTL_RSTCTL_SYSRST_S = @as(c_uint, 0);
pub const PMCTL_RSTCTL_SYSRST_SET = @as(c_uint, 0x00000001);
pub const PMCTL_RSTCTL_SYSRST_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_RSTSTA_SDDET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const PMCTL_RSTSTA_SDDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const PMCTL_RSTSTA_SDDET_S = @as(c_uint, 17);
pub const PMCTL_RSTSTA_SDDET_TRIG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const PMCTL_RSTSTA_SDDET_NO_TRIG = @as(c_uint, 0x00000000);
pub const PMCTL_RSTSTA_IOWUSD = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const PMCTL_RSTSTA_IOWUSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const PMCTL_RSTSTA_IOWUSD_S = @as(c_uint, 16);
pub const PMCTL_RSTSTA_IOWUSD_TRIG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const PMCTL_RSTSTA_IOWUSD_NO_TRIG = @as(c_uint, 0x00000000);
pub const PMCTL_RSTSTA_SYSSRC_W = @as(c_uint, 4);
pub const PMCTL_RSTSTA_SYSSRC_M = @as(c_uint, 0x000000F0);
pub const PMCTL_RSTSTA_SYSSRC_S = @as(c_uint, 4);
pub const PMCTL_RSTSTA_SYSSRC_DERREV = @as(c_uint, 0x000000F0);
pub const PMCTL_RSTSTA_SYSSRC_AERREV = @as(c_uint, 0x000000E0);
pub const PMCTL_RSTSTA_SYSSRC_AFSMEV = @as(c_uint, 0x00000060);
pub const PMCTL_RSTSTA_SYSSRC_SWDRSTEV = @as(c_uint, 0x00000050);
pub const PMCTL_RSTSTA_SYSSRC_SYSRSTEV = @as(c_uint, 0x00000040);
pub const PMCTL_RSTSTA_SYSSRC_WDTEV = @as(c_uint, 0x00000030);
pub const PMCTL_RSTSTA_SYSSRC_LOCKUPEV = @as(c_uint, 0x00000020);
pub const PMCTL_RSTSTA_SYSSRC_CPURSTEV = @as(c_uint, 0x00000010);
pub const PMCTL_RSTSTA_SYSSRC_LFLOSSEV = @as(c_uint, 0x00000000);
pub const PMCTL_RSTSTA_TSDEV = @as(c_uint, 0x00000008);
pub const PMCTL_RSTSTA_TSDEV_M = @as(c_uint, 0x00000008);
pub const PMCTL_RSTSTA_TSDEV_S = @as(c_uint, 3);
pub const PMCTL_RSTSTA_TSDEV_TRIG = @as(c_uint, 0x00000008);
pub const PMCTL_RSTSTA_TSDEV_NO_TRIG = @as(c_uint, 0x00000000);
pub const PMCTL_RSTSTA_RESETSRC_W = @as(c_uint, 3);
pub const PMCTL_RSTSTA_RESETSRC_M = @as(c_uint, 0x00000007);
pub const PMCTL_RSTSTA_RESETSRC_S = @as(c_uint, 0);
pub const PMCTL_RSTSTA_RESETSRC_SYSRESET = @as(c_uint, 0x00000006);
pub const PMCTL_RSTSTA_RESETSRC_VDDRLOSS = @as(c_uint, 0x00000004);
pub const PMCTL_RSTSTA_RESETSRC_VDDSLOSS = @as(c_uint, 0x00000002);
pub const PMCTL_RSTSTA_RESETSRC_PINRESET = @as(c_uint, 0x00000001);
pub const PMCTL_RSTSTA_RESETSRC_PWRON = @as(c_uint, 0x00000000);
pub const PMCTL_BOOTSTA_FLAG_W = @as(c_uint, 8);
pub const PMCTL_BOOTSTA_FLAG_M = @as(c_uint, 0x000000FF);
pub const PMCTL_BOOTSTA_FLAG_S = @as(c_uint, 0);
pub const PMCTL_BOOTSTA_FLAG_APP_FAULT_HANDLER = @as(c_uint, 0x000000FF);
pub const PMCTL_BOOTSTA_FLAG_APP_FAIL_APPTRANSFER = @as(c_uint, 0x000000FE);
pub const PMCTL_BOOTSTA_FLAG_APP_FAIL_NOAPP = @as(c_uint, 0x000000FD);
pub const PMCTL_BOOTSTA_FLAG_APP_WAITLOOP_DBGPROBE = @as(c_uint, 0x000000C1);
pub const PMCTL_BOOTSTA_FLAG_MODE_APP = @as(c_uint, 0x000000C0);
pub const PMCTL_BOOTSTA_FLAG_BLDR_FAULT_HANDLER = @as(c_uint, 0x000000BF);
pub const PMCTL_BOOTSTA_FLAG_BLDR_FAIL_APPTRANSFER = @as(c_uint, 0x000000BE);
pub const PMCTL_BOOTSTA_FLAG_BLDR_FAIL_EXECUTION_CONTEXT = @as(c_uint, 0x000000BD);
pub const PMCTL_BOOTSTA_FLAG_BLDR_CMD_PROCESSING = @as(c_uint, 0x000000BC);
pub const PMCTL_BOOTSTA_FLAG_BLDR_CMD_IDLE = @as(c_uint, 0x000000BB);
pub const PMCTL_BOOTSTA_FLAG_BLDR_STARTED = @as(c_uint, 0x000000BA);
pub const PMCTL_BOOTSTA_FLAG_BLDR_WAITLOOP_DBGPROBE = @as(c_uint, 0x00000081);
pub const PMCTL_BOOTSTA_FLAG_MODE_BLDR = @as(c_uint, 0x00000080);
pub const PMCTL_BOOTSTA_FLAG_BOOT_FAULT_HANDLER = @as(c_uint, 0x0000003F);
pub const PMCTL_BOOTSTA_FLAG_BOOT_FAIL_SRAM_REPAIR = @as(c_uint, 0x0000003E);
pub const PMCTL_BOOTSTA_FLAG_BOOT_WAITLOOP_DBGPROBE = @as(c_uint, 0x00000038);
pub const PMCTL_BOOTSTA_FLAG_BOOT_EXITED_SACI = @as(c_uint, 0x00000037);
pub const PMCTL_BOOTSTA_FLAG_BOOT_WAIT_SWD_DISCONNECT = @as(c_uint, 0x00000036);
pub const PMCTL_BOOTSTA_FLAG_BOOT_ENTERED_SACI = @as(c_uint, 0x00000020);
pub const PMCTL_BOOTSTA_FLAG_BOOT_GENERAL_TRIMS = @as(c_uint, 0x00000003);
pub const PMCTL_BOOTSTA_FLAG_BOOT_SRAM_REP_DONE = @as(c_uint, 0x00000002);
pub const PMCTL_BOOTSTA_FLAG_BOOT_COLD_BOOT = @as(c_uint, 0x00000001);
pub const PMCTL_BOOTSTA_FLAG_BOOT_RESET = @as(c_uint, 0x00000000);
pub const PMCTL_AONRSTA1_FLAG_W = @as(c_uint, 18);
pub const PMCTL_AONRSTA1_FLAG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003FFFF, .hex);
pub const PMCTL_AONRSTA1_FLAG_S = @as(c_uint, 0);
pub const PMCTL_AONRSET1_FLAG_W = @as(c_uint, 18);
pub const PMCTL_AONRSET1_FLAG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003FFFF, .hex);
pub const PMCTL_AONRSET1_FLAG_S = @as(c_uint, 0);
pub const PMCTL_AONRSET1_FLAG_ALL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003FFFF, .hex);
pub const PMCTL_AONRSET1_FLAG_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_AONRCLR1_FLAG_W = @as(c_uint, 18);
pub const PMCTL_AONRCLR1_FLAG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003FFFF, .hex);
pub const PMCTL_AONRCLR1_FLAG_S = @as(c_uint, 0);
pub const PMCTL_AONRCLR1_FLAG_ALL_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003FFFF, .hex);
pub const PMCTL_AONRCLR1_FLAG_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_DELTA_SLWP_W = @as(c_uint, 2);
pub const PMCTL_DELTA_SLWP_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const PMCTL_DELTA_SLWP_S = @as(c_uint, 30);
pub const PMCTL_DELTA_SLWP_INVALID3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xC0000000, .hex);
pub const PMCTL_DELTA_SLWP_HFXT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const PMCTL_DELTA_SLWP_SVT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const PMCTL_DELTA_SLWP_INVALID0 = @as(c_uint, 0x00000000);
pub const PMCTL_DELTA_TIME_W = @as(c_uint, 12);
pub const PMCTL_DELTA_TIME_M = @as(c_uint, 0x00000FFF);
pub const PMCTL_DELTA_TIME_S = @as(c_uint, 0);
pub const PMCTL_WUTIME_DIGWU_W = @as(c_uint, 8);
pub const PMCTL_WUTIME_DIGWU_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FF0000, .hex);
pub const PMCTL_WUTIME_DIGWU_S = @as(c_uint, 16);
pub const PMCTL_WUTIME_HFXTWU_W = @as(c_uint, 8);
pub const PMCTL_WUTIME_HFXTWU_M = @as(c_uint, 0x000000FF);
pub const PMCTL_WUTIME_HFXTWU_S = @as(c_uint, 0);
pub const PMCTL_PREPUCTL_PREPUEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const PMCTL_PREPUCTL_PREPUEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const PMCTL_PREPUCTL_PREPUEN_S = @as(c_uint, 31);
pub const PMCTL_PREPUCTL_PREPUEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const PMCTL_PREPUCTL_PREPUEN_DIS = @as(c_uint, 0x00000000);
pub const PMCTL_PREPUCTL_WUTIMEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const PMCTL_PREPUCTL_WUTIMEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const PMCTL_PREPUCTL_WUTIMEN_S = @as(c_uint, 30);
pub const PMCTL_PREPUCTL_WUTIMEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const PMCTL_PREPUCTL_WUTIMEN_DIS = @as(c_uint, 0x00000000);
pub const PMCTL_PREPUCTL_CONS_W = @as(c_uint, 8);
pub const PMCTL_PREPUCTL_CONS_M = @as(c_uint, 0x0000FF00);
pub const PMCTL_PREPUCTL_CONS_S = @as(c_uint, 8);
pub const PMCTL_PREPUCTL_CONS_MAX = @as(c_uint, 0x0000FE00);
pub const PMCTL_PREPUCTL_CONS_MIN = @as(c_uint, 0x00000000);
pub const PMCTL_PREPUCTL_NOM_W = @as(c_uint, 8);
pub const PMCTL_PREPUCTL_NOM_M = @as(c_uint, 0x000000FF);
pub const PMCTL_PREPUCTL_NOM_S = @as(c_uint, 0);
pub const PMCTL_PREPUCTL_NOM_MAX = @as(c_uint, 0x000000FE);
pub const PMCTL_PREPUCTL_NOM_MIN = @as(c_uint, 0x00000000);
pub const PMCTL_SWSTMP_SWRDY = @as(c_uint, 0x00000001);
pub const PMCTL_SWSTMP_SWRDY_M = @as(c_uint, 0x00000001);
pub const PMCTL_SWSTMP_SWRDY_S = @as(c_uint, 0);
pub const PMCTL_SWSTMP_SWRDY_SET = @as(c_uint, 0x00000001);
pub const PMCTL_SWSTMP_SWRDY_NOEFF = @as(c_uint, 0x00000000);
pub const PMCTL_RETCFG0_VAL = @as(c_uint, 0x00000001);
pub const PMCTL_RETCFG0_VAL_M = @as(c_uint, 0x00000001);
pub const PMCTL_RETCFG0_VAL_S = @as(c_uint, 0);
pub const PMCTL_RETCFG1_VAL = @as(c_uint, 0x00000001);
pub const PMCTL_RETCFG1_VAL_M = @as(c_uint, 0x00000001);
pub const PMCTL_RETCFG1_VAL_S = @as(c_uint, 0);
pub const PMCTL_RETCFG2_VAL_W = @as(c_uint, 3);
pub const PMCTL_RETCFG2_VAL_M = @as(c_uint, 0x00000007);
pub const PMCTL_RETCFG2_VAL_S = @as(c_uint, 0);
pub const ROM_FWREV_ADDR = ROM_BASE + @as(c_int, 0x0048);
pub const ROM_HAPI_BASE = ROM_BASE + @as(c_int, 0x004C);
pub const ROM_CRC_ADDR = (ROM_BASE + ROM_SIZE) - @as(c_int, 4);
pub const SRAMREP_MAGICWORD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40008100, .hex);
pub const PMCTL_BOOTSTA_BOOT_COMPLETE = PMCTL_BOOTSTA_FLAG_MODE_BLDR;
pub const PMCTL_BOOTSTA_BLDR_START_INIT = PMCTL_BOOTSTA_FLAG_MODE_BLDR | @as(c_int, 0x02);
pub const PMCTL_BOOTSTA_BLDR_COMPLETE = PMCTL_BOOTSTA_FLAG_MODE_APP;
pub const PMCTL_BOOTSTA_APP_START_INIT = PMCTL_BOOTSTA_FLAG_MODE_APP | @as(c_int, 0x02);
pub const BOOT_CSTACK_SIZE = @as(c_int, 1024) - @import("std").zig.c_translation.sizeof(fcfg_appTrims_t);
pub const FLASH_1T_SECTOR_SIZE = @as(c_int, 2048);
pub const FLASH_DATAWIDTH_BITS = @as(c_int, 128);
pub const FLASH_2T_SECTOR_SIZE = @import("std").zig.c_translation.MacroArithmetic.div(FLASH_1T_SECTOR_SIZE, @as(c_int, 2));
pub const FLASH_MAIN_SECTOR_SIZE = FLASH_1T_SECTOR_SIZE;
pub const FCFG_GENERALTRIMS_SIZE = @import("std").zig.c_translation.MacroArithmetic.div(FLASH_2T_SECTOR_SIZE, @as(c_int, 4)) - @as(c_int, 104);
pub const __HW_CCFG_H__ = "";
pub const CCFG_BC_PBLDR_USE_FCFG = @import("std").zig.c_translation.cast(?*anyopaque, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFF0, .hex));
pub const XCFG_BC_PBLDR_FORBID = @import("std").zig.c_translation.cast(?*anyopaque, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFC, .hex));
pub const XCFG_BC_PBLDR_UNDEF = @import("std").zig.c_translation.cast(?*anyopaque, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex));
pub inline fn CCFG_BC_PBLDR_VALID(x: anytype) @TypeOf(x < CCFG_BC_PBLDR_USE_FCFG) {
    _ = &x;
    return x < CCFG_BC_PBLDR_USE_FCFG;
}
pub const CCFG_BC_BLDRCFG_UNDEF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
pub const XCFG_BC_BLDR_DIS = @as(c_int, 0);
pub const XCFG_BC_BLDR_EN = @as(c_int, 1);
pub const XCFG_BC_PINTRIG_DIS = @as(c_int, 0);
pub const XCFG_BC_PINTRIG_EN = @as(c_int, 1);
pub const XCFG_BC_PINTRIG_LEVEL_LO = @as(c_int, 0);
pub const XCFG_BC_PINTRIG_LEVEL_HI = @as(c_int, 1);
pub const XCFG_BC_IOCFGIND_DEFAULT = @as(c_int, 0);
pub const CCFG_BC_PAPP_NONE = @import("std").zig.c_translation.cast(?*anyopaque, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex));
pub const CCFG_PERMISSION_ALLOW = @as(c_int, 0xA);
pub const CCFG_PERMISSION_FORBID = @as(c_int, 0x0);
pub const XCFG_MISC_SACITOEXP_8SEC = @as(c_int, 7);
pub const XCFG_MISC_SACITOEXP_1SEC = @as(c_int, 4);
pub const XCFG_MISC_SACITOEXP_INFINITE = @as(c_int, 0);
pub const CPYLST_EOL = @as(c_int, 0);
pub const CPYLST_NOP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex);
pub inline fn CPYLST_WAIT(x: anytype) @TypeOf(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex) + ((x << @as(c_int, 2)) & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000FFFFC, .hex))) {
    _ = &x;
    return @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex) + ((x << @as(c_int, 2)) & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000FFFFC, .hex));
}
pub inline fn CPYLST_CPY(a: anytype, n: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, a) + ((n << @as(c_int, 20)) & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0FF00000, .hex))) {
    _ = &a;
    _ = &n;
    return @import("std").zig.c_translation.cast(u32, a) + ((n << @as(c_int, 20)) & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0FF00000, .hex));
}
pub inline fn CPYLST_CPYFULLADDR(a: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, a) + @as(c_int, 1)) {
    _ = &a;
    return @import("std").zig.c_translation.cast(u32, a) + @as(c_int, 1);
}
pub inline fn CPYLST_JUMP(a: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, a) + @as(c_int, 2)) {
    _ = &a;
    return @import("std").zig.c_translation.cast(u32, a) + @as(c_int, 2);
}
pub inline fn CPYLST_CALL(a: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, a) + @as(c_int, 3)) {
    _ = &a;
    return @import("std").zig.c_translation.cast(u32, a) + @as(c_int, 3);
}
pub const CCFG_USER_RECORD_SIZE = @as(c_int, 128);
pub const CCFG_DBGAUTH_REQPWD = @as(c_int, 0xA5);
pub const CCFG_DBGAUTH_DBGOPEN = @as(c_int, 0x5A);
pub const CCFG_DBGAUTH_DBGFORBID = @as(c_int, 0x00);
pub const CCFG_DBGBLDR_ALLOW = @as(c_int, 0xA5);
pub const CCFG_DBGBLDR_FORBID = @as(c_int, 0x00);
pub const FCFG_PERMISSION_ALLOW = @as(c_int, 0xA);
pub const FCFG_PERMISSION_FORBID = @as(c_int, 0x0);
pub inline fn FCFG_BC_PBLDR_VALID(x: anytype) @TypeOf(x < XCFG_BC_PBLDR_FORBID) {
    _ = &x;
    return x < XCFG_BC_PBLDR_FORBID;
}
pub const FCFG_SET32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x41008002, .hex);
pub const FCFG_UNSET32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x41FFFFFF, .hex);
pub const __HW_GPIO_H__ = "";
pub const GPIO_O_DESC = @as(c_uint, 0x00000000);
pub const GPIO_O_DESCEX = @as(c_uint, 0x00000004);
pub const GPIO_O_IMASK = @as(c_uint, 0x00000044);
pub const GPIO_O_RIS = @as(c_uint, 0x0000004C);
pub const GPIO_O_MIS = @as(c_uint, 0x00000054);
pub const GPIO_O_ISET = @as(c_uint, 0x0000005C);
pub const GPIO_O_ICLR = @as(c_uint, 0x00000064);
pub const GPIO_O_IMSET = @as(c_uint, 0x0000006C);
pub const GPIO_O_IMCLR = @as(c_uint, 0x00000074);
pub const GPIO_O_DTB = @as(c_uint, 0x0000007C);
pub const GPIO_O_DOUT3_0 = @as(c_uint, 0x00000100);
pub const GPIO_O_DOUT7_4 = @as(c_uint, 0x00000104);
pub const GPIO_O_DOUT11_8 = @as(c_uint, 0x00000108);
pub const GPIO_O_DOUT15_12 = @as(c_uint, 0x0000010C);
pub const GPIO_O_DOUT19_16 = @as(c_uint, 0x00000110);
pub const GPIO_O_DOUT23_20 = @as(c_uint, 0x00000114);
pub const GPIO_O_DOUT27_24 = @as(c_uint, 0x00000118);
pub const GPIO_O_DOUT31_0 = @as(c_uint, 0x00000200);
pub const GPIO_O_DOUTSET31_0 = @as(c_uint, 0x00000210);
pub const GPIO_O_DOUTCLR31_0 = @as(c_uint, 0x00000220);
pub const GPIO_O_DOUTTGL31_0 = @as(c_uint, 0x00000230);
pub const GPIO_O_DOUTTGL3_0 = @as(c_uint, 0x00000300);
pub const GPIO_O_DOUTTGL7_4 = @as(c_uint, 0x00000304);
pub const GPIO_O_DOUTTGL11_8 = @as(c_uint, 0x00000308);
pub const GPIO_O_DOUTTGL15_12 = @as(c_uint, 0x0000030C);
pub const GPIO_O_DOUTTGL19_16 = @as(c_uint, 0x00000310);
pub const GPIO_O_DOUTTGL23_20 = @as(c_uint, 0x00000314);
pub const GPIO_O_DOUTTGL27_24 = @as(c_uint, 0x00000318);
pub const GPIO_O_DOE3_0 = @as(c_uint, 0x00000400);
pub const GPIO_O_DOE7_4 = @as(c_uint, 0x00000404);
pub const GPIO_O_DOE11_8 = @as(c_uint, 0x00000408);
pub const GPIO_O_DOE15_12 = @as(c_uint, 0x0000040C);
pub const GPIO_O_DOE19_16 = @as(c_uint, 0x00000410);
pub const GPIO_O_DOE23_20 = @as(c_uint, 0x00000414);
pub const GPIO_O_DOE27_24 = @as(c_uint, 0x00000418);
pub const GPIO_O_DOE31_0 = @as(c_uint, 0x00000500);
pub const GPIO_O_DOESET31_0 = @as(c_uint, 0x00000510);
pub const GPIO_O_DOECLR31_0 = @as(c_uint, 0x00000520);
pub const GPIO_O_DOETGL31_0 = @as(c_uint, 0x00000530);
pub const GPIO_O_DIN3_0 = @as(c_uint, 0x00000600);
pub const GPIO_O_DIN7_4 = @as(c_uint, 0x00000604);
pub const GPIO_O_DIN11_8 = @as(c_uint, 0x00000608);
pub const GPIO_O_DIN15_12 = @as(c_uint, 0x0000060C);
pub const GPIO_O_DIN19_16 = @as(c_uint, 0x00000610);
pub const GPIO_O_DIN23_20 = @as(c_uint, 0x00000614);
pub const GPIO_O_DIN27_24 = @as(c_uint, 0x00000618);
pub const GPIO_O_DIN31_0 = @as(c_uint, 0x00000700);
pub const GPIO_O_EVTCFG = @as(c_uint, 0x00000800);
pub const GPIO_DESC_MODID_W = @as(c_uint, 16);
pub const GPIO_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const GPIO_DESC_MODID_S = @as(c_uint, 16);
pub const GPIO_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const GPIO_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const GPIO_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const GPIO_DESC_INSTIDX_W = @as(c_uint, 4);
pub const GPIO_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const GPIO_DESC_INSTIDX_S = @as(c_uint, 8);
pub const GPIO_DESC_MAJREV_W = @as(c_uint, 4);
pub const GPIO_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const GPIO_DESC_MAJREV_S = @as(c_uint, 4);
pub const GPIO_DESC_MINREV_W = @as(c_uint, 4);
pub const GPIO_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const GPIO_DESC_MINREV_S = @as(c_uint, 0);
pub const GPIO_DESCEX_NUMDIO_W = @as(c_uint, 6);
pub const GPIO_DESCEX_NUMDIO_M = @as(c_uint, 0x0000003F);
pub const GPIO_DESCEX_NUMDIO_S = @as(c_uint, 0);
pub const GPIO_IMASK_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMASK_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMASK_DIO25_S = @as(c_uint, 25);
pub const GPIO_IMASK_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMASK_DIO25_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMASK_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMASK_DIO24_S = @as(c_uint, 24);
pub const GPIO_IMASK_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMASK_DIO24_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMASK_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMASK_DIO23_S = @as(c_uint, 23);
pub const GPIO_IMASK_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMASK_DIO23_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMASK_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMASK_DIO22_S = @as(c_uint, 22);
pub const GPIO_IMASK_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMASK_DIO22_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMASK_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMASK_DIO21_S = @as(c_uint, 21);
pub const GPIO_IMASK_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMASK_DIO21_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMASK_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMASK_DIO20_S = @as(c_uint, 20);
pub const GPIO_IMASK_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMASK_DIO20_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMASK_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMASK_DIO19_S = @as(c_uint, 19);
pub const GPIO_IMASK_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMASK_DIO19_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMASK_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMASK_DIO18_S = @as(c_uint, 18);
pub const GPIO_IMASK_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMASK_DIO18_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMASK_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMASK_DIO17_S = @as(c_uint, 17);
pub const GPIO_IMASK_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMASK_DIO17_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMASK_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMASK_DIO16_S = @as(c_uint, 16);
pub const GPIO_IMASK_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMASK_DIO16_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_IMASK_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_IMASK_DIO15_S = @as(c_uint, 15);
pub const GPIO_IMASK_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_IMASK_DIO15_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_IMASK_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_IMASK_DIO14_S = @as(c_uint, 14);
pub const GPIO_IMASK_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_IMASK_DIO14_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_IMASK_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_IMASK_DIO13_S = @as(c_uint, 13);
pub const GPIO_IMASK_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_IMASK_DIO13_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_IMASK_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_IMASK_DIO12_S = @as(c_uint, 12);
pub const GPIO_IMASK_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_IMASK_DIO12_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_IMASK_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_IMASK_DIO11_S = @as(c_uint, 11);
pub const GPIO_IMASK_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_IMASK_DIO11_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_IMASK_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_IMASK_DIO10_S = @as(c_uint, 10);
pub const GPIO_IMASK_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_IMASK_DIO10_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_IMASK_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_IMASK_DIO9_S = @as(c_uint, 9);
pub const GPIO_IMASK_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_IMASK_DIO9_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_IMASK_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_IMASK_DIO8_S = @as(c_uint, 8);
pub const GPIO_IMASK_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_IMASK_DIO8_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_IMASK_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_IMASK_DIO7_S = @as(c_uint, 7);
pub const GPIO_IMASK_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_IMASK_DIO7_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_IMASK_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_IMASK_DIO6_S = @as(c_uint, 6);
pub const GPIO_IMASK_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_IMASK_DIO6_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_IMASK_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_IMASK_DIO5_S = @as(c_uint, 5);
pub const GPIO_IMASK_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_IMASK_DIO5_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_IMASK_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_IMASK_DIO4_S = @as(c_uint, 4);
pub const GPIO_IMASK_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_IMASK_DIO4_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_IMASK_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_IMASK_DIO3_S = @as(c_uint, 3);
pub const GPIO_IMASK_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_IMASK_DIO3_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_IMASK_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_IMASK_DIO2_S = @as(c_uint, 2);
pub const GPIO_IMASK_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_IMASK_DIO2_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_IMASK_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_IMASK_DIO1_S = @as(c_uint, 1);
pub const GPIO_IMASK_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_IMASK_DIO1_CLR = @as(c_uint, 0x00000000);
pub const GPIO_IMASK_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_IMASK_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_IMASK_DIO0_S = @as(c_uint, 0);
pub const GPIO_IMASK_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_IMASK_DIO0_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_RIS_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_RIS_DIO25_S = @as(c_uint, 25);
pub const GPIO_RIS_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_RIS_DIO25_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_RIS_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_RIS_DIO24_S = @as(c_uint, 24);
pub const GPIO_RIS_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_RIS_DIO24_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_RIS_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_RIS_DIO23_S = @as(c_uint, 23);
pub const GPIO_RIS_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_RIS_DIO23_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_RIS_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_RIS_DIO22_S = @as(c_uint, 22);
pub const GPIO_RIS_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_RIS_DIO22_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_RIS_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_RIS_DIO21_S = @as(c_uint, 21);
pub const GPIO_RIS_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_RIS_DIO21_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_RIS_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_RIS_DIO20_S = @as(c_uint, 20);
pub const GPIO_RIS_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_RIS_DIO20_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_RIS_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_RIS_DIO19_S = @as(c_uint, 19);
pub const GPIO_RIS_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_RIS_DIO19_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_RIS_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_RIS_DIO18_S = @as(c_uint, 18);
pub const GPIO_RIS_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_RIS_DIO18_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_RIS_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_RIS_DIO17_S = @as(c_uint, 17);
pub const GPIO_RIS_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_RIS_DIO17_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_RIS_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_RIS_DIO16_S = @as(c_uint, 16);
pub const GPIO_RIS_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_RIS_DIO16_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_RIS_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_RIS_DIO15_S = @as(c_uint, 15);
pub const GPIO_RIS_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_RIS_DIO15_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_RIS_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_RIS_DIO14_S = @as(c_uint, 14);
pub const GPIO_RIS_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_RIS_DIO14_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_RIS_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_RIS_DIO13_S = @as(c_uint, 13);
pub const GPIO_RIS_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_RIS_DIO13_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_RIS_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_RIS_DIO12_S = @as(c_uint, 12);
pub const GPIO_RIS_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_RIS_DIO12_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_RIS_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_RIS_DIO11_S = @as(c_uint, 11);
pub const GPIO_RIS_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_RIS_DIO11_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_RIS_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_RIS_DIO10_S = @as(c_uint, 10);
pub const GPIO_RIS_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_RIS_DIO10_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_RIS_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_RIS_DIO9_S = @as(c_uint, 9);
pub const GPIO_RIS_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_RIS_DIO9_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_RIS_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_RIS_DIO8_S = @as(c_uint, 8);
pub const GPIO_RIS_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_RIS_DIO8_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_RIS_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_RIS_DIO7_S = @as(c_uint, 7);
pub const GPIO_RIS_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_RIS_DIO7_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_RIS_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_RIS_DIO6_S = @as(c_uint, 6);
pub const GPIO_RIS_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_RIS_DIO6_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_RIS_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_RIS_DIO5_S = @as(c_uint, 5);
pub const GPIO_RIS_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_RIS_DIO5_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_RIS_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_RIS_DIO4_S = @as(c_uint, 4);
pub const GPIO_RIS_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_RIS_DIO4_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_RIS_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_RIS_DIO3_S = @as(c_uint, 3);
pub const GPIO_RIS_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_RIS_DIO3_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_RIS_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_RIS_DIO2_S = @as(c_uint, 2);
pub const GPIO_RIS_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_RIS_DIO2_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_RIS_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_RIS_DIO1_S = @as(c_uint, 1);
pub const GPIO_RIS_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_RIS_DIO1_CLR = @as(c_uint, 0x00000000);
pub const GPIO_RIS_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_RIS_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_RIS_DIO0_S = @as(c_uint, 0);
pub const GPIO_RIS_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_RIS_DIO0_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_MIS_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_MIS_DIO25_S = @as(c_uint, 25);
pub const GPIO_MIS_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_MIS_DIO25_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_MIS_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_MIS_DIO24_S = @as(c_uint, 24);
pub const GPIO_MIS_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_MIS_DIO24_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_MIS_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_MIS_DIO23_S = @as(c_uint, 23);
pub const GPIO_MIS_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_MIS_DIO23_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_MIS_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_MIS_DIO22_S = @as(c_uint, 22);
pub const GPIO_MIS_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_MIS_DIO22_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_MIS_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_MIS_DIO21_S = @as(c_uint, 21);
pub const GPIO_MIS_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_MIS_DIO21_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_MIS_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_MIS_DIO20_S = @as(c_uint, 20);
pub const GPIO_MIS_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_MIS_DIO20_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_MIS_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_MIS_DIO19_S = @as(c_uint, 19);
pub const GPIO_MIS_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_MIS_DIO19_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_MIS_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_MIS_DIO18_S = @as(c_uint, 18);
pub const GPIO_MIS_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_MIS_DIO18_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_MIS_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_MIS_DIO17_S = @as(c_uint, 17);
pub const GPIO_MIS_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_MIS_DIO17_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_MIS_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_MIS_DIO16_S = @as(c_uint, 16);
pub const GPIO_MIS_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_MIS_DIO16_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_MIS_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_MIS_DIO15_S = @as(c_uint, 15);
pub const GPIO_MIS_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_MIS_DIO15_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_MIS_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_MIS_DIO14_S = @as(c_uint, 14);
pub const GPIO_MIS_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_MIS_DIO14_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_MIS_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_MIS_DIO13_S = @as(c_uint, 13);
pub const GPIO_MIS_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_MIS_DIO13_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_MIS_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_MIS_DIO12_S = @as(c_uint, 12);
pub const GPIO_MIS_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_MIS_DIO12_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_MIS_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_MIS_DIO11_S = @as(c_uint, 11);
pub const GPIO_MIS_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_MIS_DIO11_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_MIS_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_MIS_DIO10_S = @as(c_uint, 10);
pub const GPIO_MIS_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_MIS_DIO10_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_MIS_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_MIS_DIO9_S = @as(c_uint, 9);
pub const GPIO_MIS_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_MIS_DIO9_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_MIS_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_MIS_DIO8_S = @as(c_uint, 8);
pub const GPIO_MIS_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_MIS_DIO8_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_MIS_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_MIS_DIO7_S = @as(c_uint, 7);
pub const GPIO_MIS_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_MIS_DIO7_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_MIS_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_MIS_DIO6_S = @as(c_uint, 6);
pub const GPIO_MIS_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_MIS_DIO6_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_MIS_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_MIS_DIO5_S = @as(c_uint, 5);
pub const GPIO_MIS_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_MIS_DIO5_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_MIS_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_MIS_DIO4_S = @as(c_uint, 4);
pub const GPIO_MIS_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_MIS_DIO4_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_MIS_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_MIS_DIO3_S = @as(c_uint, 3);
pub const GPIO_MIS_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_MIS_DIO3_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_MIS_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_MIS_DIO2_S = @as(c_uint, 2);
pub const GPIO_MIS_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_MIS_DIO2_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_MIS_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_MIS_DIO1_S = @as(c_uint, 1);
pub const GPIO_MIS_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_MIS_DIO1_CLR = @as(c_uint, 0x00000000);
pub const GPIO_MIS_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_MIS_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_MIS_DIO0_S = @as(c_uint, 0);
pub const GPIO_MIS_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_MIS_DIO0_CLR = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_ISET_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_ISET_DIO25_S = @as(c_uint, 25);
pub const GPIO_ISET_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_ISET_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_ISET_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_ISET_DIO24_S = @as(c_uint, 24);
pub const GPIO_ISET_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_ISET_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_ISET_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_ISET_DIO23_S = @as(c_uint, 23);
pub const GPIO_ISET_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_ISET_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_ISET_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_ISET_DIO22_S = @as(c_uint, 22);
pub const GPIO_ISET_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_ISET_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_ISET_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_ISET_DIO21_S = @as(c_uint, 21);
pub const GPIO_ISET_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_ISET_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_ISET_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_ISET_DIO20_S = @as(c_uint, 20);
pub const GPIO_ISET_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_ISET_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_ISET_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_ISET_DIO19_S = @as(c_uint, 19);
pub const GPIO_ISET_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_ISET_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_ISET_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_ISET_DIO18_S = @as(c_uint, 18);
pub const GPIO_ISET_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_ISET_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_ISET_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_ISET_DIO17_S = @as(c_uint, 17);
pub const GPIO_ISET_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_ISET_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_ISET_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_ISET_DIO16_S = @as(c_uint, 16);
pub const GPIO_ISET_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_ISET_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_ISET_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_ISET_DIO15_S = @as(c_uint, 15);
pub const GPIO_ISET_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_ISET_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_ISET_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_ISET_DIO14_S = @as(c_uint, 14);
pub const GPIO_ISET_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_ISET_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_ISET_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_ISET_DIO13_S = @as(c_uint, 13);
pub const GPIO_ISET_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_ISET_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_ISET_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_ISET_DIO12_S = @as(c_uint, 12);
pub const GPIO_ISET_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_ISET_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_ISET_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_ISET_DIO11_S = @as(c_uint, 11);
pub const GPIO_ISET_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_ISET_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_ISET_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_ISET_DIO10_S = @as(c_uint, 10);
pub const GPIO_ISET_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_ISET_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_ISET_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_ISET_DIO9_S = @as(c_uint, 9);
pub const GPIO_ISET_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_ISET_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_ISET_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_ISET_DIO8_S = @as(c_uint, 8);
pub const GPIO_ISET_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_ISET_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_ISET_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_ISET_DIO7_S = @as(c_uint, 7);
pub const GPIO_ISET_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_ISET_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_ISET_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_ISET_DIO6_S = @as(c_uint, 6);
pub const GPIO_ISET_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_ISET_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_ISET_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_ISET_DIO5_S = @as(c_uint, 5);
pub const GPIO_ISET_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_ISET_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_ISET_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_ISET_DIO4_S = @as(c_uint, 4);
pub const GPIO_ISET_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_ISET_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_ISET_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_ISET_DIO3_S = @as(c_uint, 3);
pub const GPIO_ISET_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_ISET_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_ISET_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_ISET_DIO2_S = @as(c_uint, 2);
pub const GPIO_ISET_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_ISET_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_ISET_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_ISET_DIO1_S = @as(c_uint, 1);
pub const GPIO_ISET_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_ISET_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ISET_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_ISET_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_ISET_DIO0_S = @as(c_uint, 0);
pub const GPIO_ISET_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_ISET_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_ICLR_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_ICLR_DIO25_S = @as(c_uint, 25);
pub const GPIO_ICLR_DIO25_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_ICLR_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_ICLR_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_ICLR_DIO24_S = @as(c_uint, 24);
pub const GPIO_ICLR_DIO24_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_ICLR_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_ICLR_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_ICLR_DIO23_S = @as(c_uint, 23);
pub const GPIO_ICLR_DIO23_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_ICLR_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_ICLR_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_ICLR_DIO22_S = @as(c_uint, 22);
pub const GPIO_ICLR_DIO22_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_ICLR_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_ICLR_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_ICLR_DIO21_S = @as(c_uint, 21);
pub const GPIO_ICLR_DIO21_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_ICLR_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_ICLR_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_ICLR_DIO20_S = @as(c_uint, 20);
pub const GPIO_ICLR_DIO20_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_ICLR_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_ICLR_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_ICLR_DIO19_S = @as(c_uint, 19);
pub const GPIO_ICLR_DIO19_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_ICLR_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_ICLR_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_ICLR_DIO18_S = @as(c_uint, 18);
pub const GPIO_ICLR_DIO18_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_ICLR_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_ICLR_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_ICLR_DIO17_S = @as(c_uint, 17);
pub const GPIO_ICLR_DIO17_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_ICLR_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_ICLR_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_ICLR_DIO16_S = @as(c_uint, 16);
pub const GPIO_ICLR_DIO16_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_ICLR_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_ICLR_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_ICLR_DIO15_S = @as(c_uint, 15);
pub const GPIO_ICLR_DIO15_CLR = @as(c_uint, 0x00008000);
pub const GPIO_ICLR_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_ICLR_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_ICLR_DIO14_S = @as(c_uint, 14);
pub const GPIO_ICLR_DIO14_CLR = @as(c_uint, 0x00004000);
pub const GPIO_ICLR_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_ICLR_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_ICLR_DIO13_S = @as(c_uint, 13);
pub const GPIO_ICLR_DIO13_CLR = @as(c_uint, 0x00002000);
pub const GPIO_ICLR_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_ICLR_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_ICLR_DIO12_S = @as(c_uint, 12);
pub const GPIO_ICLR_DIO12_CLR = @as(c_uint, 0x00001000);
pub const GPIO_ICLR_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_ICLR_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_ICLR_DIO11_S = @as(c_uint, 11);
pub const GPIO_ICLR_DIO11_CLR = @as(c_uint, 0x00000800);
pub const GPIO_ICLR_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_ICLR_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_ICLR_DIO10_S = @as(c_uint, 10);
pub const GPIO_ICLR_DIO10_CLR = @as(c_uint, 0x00000400);
pub const GPIO_ICLR_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_ICLR_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_ICLR_DIO9_S = @as(c_uint, 9);
pub const GPIO_ICLR_DIO9_CLR = @as(c_uint, 0x00000200);
pub const GPIO_ICLR_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_ICLR_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_ICLR_DIO8_S = @as(c_uint, 8);
pub const GPIO_ICLR_DIO8_CLR = @as(c_uint, 0x00000100);
pub const GPIO_ICLR_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_ICLR_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_ICLR_DIO7_S = @as(c_uint, 7);
pub const GPIO_ICLR_DIO7_CLR = @as(c_uint, 0x00000080);
pub const GPIO_ICLR_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_ICLR_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_ICLR_DIO6_S = @as(c_uint, 6);
pub const GPIO_ICLR_DIO6_CLR = @as(c_uint, 0x00000040);
pub const GPIO_ICLR_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_ICLR_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_ICLR_DIO5_S = @as(c_uint, 5);
pub const GPIO_ICLR_DIO5_CLR = @as(c_uint, 0x00000020);
pub const GPIO_ICLR_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_ICLR_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_ICLR_DIO4_S = @as(c_uint, 4);
pub const GPIO_ICLR_DIO4_CLR = @as(c_uint, 0x00000010);
pub const GPIO_ICLR_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_ICLR_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_ICLR_DIO3_S = @as(c_uint, 3);
pub const GPIO_ICLR_DIO3_CLR = @as(c_uint, 0x00000008);
pub const GPIO_ICLR_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_ICLR_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_ICLR_DIO2_S = @as(c_uint, 2);
pub const GPIO_ICLR_DIO2_CLR = @as(c_uint, 0x00000004);
pub const GPIO_ICLR_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_ICLR_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_ICLR_DIO1_S = @as(c_uint, 1);
pub const GPIO_ICLR_DIO1_CLR = @as(c_uint, 0x00000002);
pub const GPIO_ICLR_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_ICLR_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_ICLR_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_ICLR_DIO0_S = @as(c_uint, 0);
pub const GPIO_ICLR_DIO0_CLR = @as(c_uint, 0x00000001);
pub const GPIO_ICLR_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMSET_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMSET_DIO25_S = @as(c_uint, 25);
pub const GPIO_IMSET_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMSET_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMSET_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMSET_DIO24_S = @as(c_uint, 24);
pub const GPIO_IMSET_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMSET_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMSET_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMSET_DIO23_S = @as(c_uint, 23);
pub const GPIO_IMSET_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMSET_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMSET_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMSET_DIO22_S = @as(c_uint, 22);
pub const GPIO_IMSET_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMSET_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMSET_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMSET_DIO21_S = @as(c_uint, 21);
pub const GPIO_IMSET_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMSET_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMSET_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMSET_DIO20_S = @as(c_uint, 20);
pub const GPIO_IMSET_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMSET_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMSET_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMSET_DIO19_S = @as(c_uint, 19);
pub const GPIO_IMSET_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMSET_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMSET_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMSET_DIO18_S = @as(c_uint, 18);
pub const GPIO_IMSET_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMSET_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMSET_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMSET_DIO17_S = @as(c_uint, 17);
pub const GPIO_IMSET_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMSET_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMSET_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMSET_DIO16_S = @as(c_uint, 16);
pub const GPIO_IMSET_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMSET_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_IMSET_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_IMSET_DIO15_S = @as(c_uint, 15);
pub const GPIO_IMSET_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_IMSET_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_IMSET_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_IMSET_DIO14_S = @as(c_uint, 14);
pub const GPIO_IMSET_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_IMSET_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_IMSET_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_IMSET_DIO13_S = @as(c_uint, 13);
pub const GPIO_IMSET_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_IMSET_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_IMSET_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_IMSET_DIO12_S = @as(c_uint, 12);
pub const GPIO_IMSET_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_IMSET_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_IMSET_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_IMSET_DIO11_S = @as(c_uint, 11);
pub const GPIO_IMSET_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_IMSET_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_IMSET_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_IMSET_DIO10_S = @as(c_uint, 10);
pub const GPIO_IMSET_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_IMSET_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_IMSET_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_IMSET_DIO9_S = @as(c_uint, 9);
pub const GPIO_IMSET_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_IMSET_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_IMSET_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_IMSET_DIO8_S = @as(c_uint, 8);
pub const GPIO_IMSET_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_IMSET_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_IMSET_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_IMSET_DIO7_S = @as(c_uint, 7);
pub const GPIO_IMSET_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_IMSET_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_IMSET_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_IMSET_DIO6_S = @as(c_uint, 6);
pub const GPIO_IMSET_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_IMSET_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_IMSET_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_IMSET_DIO5_S = @as(c_uint, 5);
pub const GPIO_IMSET_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_IMSET_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_IMSET_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_IMSET_DIO4_S = @as(c_uint, 4);
pub const GPIO_IMSET_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_IMSET_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_IMSET_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_IMSET_DIO3_S = @as(c_uint, 3);
pub const GPIO_IMSET_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_IMSET_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_IMSET_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_IMSET_DIO2_S = @as(c_uint, 2);
pub const GPIO_IMSET_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_IMSET_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_IMSET_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_IMSET_DIO1_S = @as(c_uint, 1);
pub const GPIO_IMSET_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_IMSET_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMSET_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_IMSET_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_IMSET_DIO0_S = @as(c_uint, 0);
pub const GPIO_IMSET_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_IMSET_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMCLR_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMCLR_DIO25_S = @as(c_uint, 25);
pub const GPIO_IMCLR_DIO25_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_IMCLR_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMCLR_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMCLR_DIO24_S = @as(c_uint, 24);
pub const GPIO_IMCLR_DIO24_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_IMCLR_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMCLR_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMCLR_DIO23_S = @as(c_uint, 23);
pub const GPIO_IMCLR_DIO23_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_IMCLR_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMCLR_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMCLR_DIO22_S = @as(c_uint, 22);
pub const GPIO_IMCLR_DIO22_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_IMCLR_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMCLR_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMCLR_DIO21_S = @as(c_uint, 21);
pub const GPIO_IMCLR_DIO21_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_IMCLR_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMCLR_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMCLR_DIO20_S = @as(c_uint, 20);
pub const GPIO_IMCLR_DIO20_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_IMCLR_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMCLR_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMCLR_DIO19_S = @as(c_uint, 19);
pub const GPIO_IMCLR_DIO19_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_IMCLR_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMCLR_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMCLR_DIO18_S = @as(c_uint, 18);
pub const GPIO_IMCLR_DIO18_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_IMCLR_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMCLR_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMCLR_DIO17_S = @as(c_uint, 17);
pub const GPIO_IMCLR_DIO17_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_IMCLR_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMCLR_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMCLR_DIO16_S = @as(c_uint, 16);
pub const GPIO_IMCLR_DIO16_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_IMCLR_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_IMCLR_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_IMCLR_DIO15_S = @as(c_uint, 15);
pub const GPIO_IMCLR_DIO15_CLR = @as(c_uint, 0x00008000);
pub const GPIO_IMCLR_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_IMCLR_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_IMCLR_DIO14_S = @as(c_uint, 14);
pub const GPIO_IMCLR_DIO14_CLR = @as(c_uint, 0x00004000);
pub const GPIO_IMCLR_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_IMCLR_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_IMCLR_DIO13_S = @as(c_uint, 13);
pub const GPIO_IMCLR_DIO13_CLR = @as(c_uint, 0x00002000);
pub const GPIO_IMCLR_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_IMCLR_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_IMCLR_DIO12_S = @as(c_uint, 12);
pub const GPIO_IMCLR_DIO12_CLR = @as(c_uint, 0x00001000);
pub const GPIO_IMCLR_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_IMCLR_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_IMCLR_DIO11_S = @as(c_uint, 11);
pub const GPIO_IMCLR_DIO11_CLR = @as(c_uint, 0x00000800);
pub const GPIO_IMCLR_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_IMCLR_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_IMCLR_DIO10_S = @as(c_uint, 10);
pub const GPIO_IMCLR_DIO10_CLR = @as(c_uint, 0x00000400);
pub const GPIO_IMCLR_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_IMCLR_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_IMCLR_DIO9_S = @as(c_uint, 9);
pub const GPIO_IMCLR_DIO9_CLR = @as(c_uint, 0x00000200);
pub const GPIO_IMCLR_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_IMCLR_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_IMCLR_DIO8_S = @as(c_uint, 8);
pub const GPIO_IMCLR_DIO8_CLR = @as(c_uint, 0x00000100);
pub const GPIO_IMCLR_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_IMCLR_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_IMCLR_DIO7_S = @as(c_uint, 7);
pub const GPIO_IMCLR_DIO7_CLR = @as(c_uint, 0x00000080);
pub const GPIO_IMCLR_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_IMCLR_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_IMCLR_DIO6_S = @as(c_uint, 6);
pub const GPIO_IMCLR_DIO6_CLR = @as(c_uint, 0x00000040);
pub const GPIO_IMCLR_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_IMCLR_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_IMCLR_DIO5_S = @as(c_uint, 5);
pub const GPIO_IMCLR_DIO5_CLR = @as(c_uint, 0x00000020);
pub const GPIO_IMCLR_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_IMCLR_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_IMCLR_DIO4_S = @as(c_uint, 4);
pub const GPIO_IMCLR_DIO4_CLR = @as(c_uint, 0x00000010);
pub const GPIO_IMCLR_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_IMCLR_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_IMCLR_DIO3_S = @as(c_uint, 3);
pub const GPIO_IMCLR_DIO3_CLR = @as(c_uint, 0x00000008);
pub const GPIO_IMCLR_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_IMCLR_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_IMCLR_DIO2_S = @as(c_uint, 2);
pub const GPIO_IMCLR_DIO2_CLR = @as(c_uint, 0x00000004);
pub const GPIO_IMCLR_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_IMCLR_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_IMCLR_DIO1_S = @as(c_uint, 1);
pub const GPIO_IMCLR_DIO1_CLR = @as(c_uint, 0x00000002);
pub const GPIO_IMCLR_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_IMCLR_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_IMCLR_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_IMCLR_DIO0_S = @as(c_uint, 0);
pub const GPIO_IMCLR_DIO0_CLR = @as(c_uint, 0x00000001);
pub const GPIO_IMCLR_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DTB_SEL_W = @as(c_uint, 3);
pub const GPIO_DTB_SEL_M = @as(c_uint, 0x00000007);
pub const GPIO_DTB_SEL_S = @as(c_uint, 0);
pub const GPIO_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOUT3_0_DIO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT3_0_DIO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT3_0_DIO3_S = @as(c_uint, 24);
pub const GPIO_DOUT3_0_DIO3_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT3_0_DIO3_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT3_0_DIO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT3_0_DIO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT3_0_DIO2_S = @as(c_uint, 16);
pub const GPIO_DOUT3_0_DIO2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT3_0_DIO2_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT3_0_DIO1 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT3_0_DIO1_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT3_0_DIO1_S = @as(c_uint, 8);
pub const GPIO_DOUT3_0_DIO1_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT3_0_DIO1_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT3_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT3_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT3_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUT3_0_DIO0_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT3_0_DIO0_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT7_4_DIO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT7_4_DIO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT7_4_DIO7_S = @as(c_uint, 24);
pub const GPIO_DOUT7_4_DIO7_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT7_4_DIO7_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT7_4_DIO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT7_4_DIO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT7_4_DIO6_S = @as(c_uint, 16);
pub const GPIO_DOUT7_4_DIO6_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT7_4_DIO6_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT7_4_DIO5 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT7_4_DIO5_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT7_4_DIO5_S = @as(c_uint, 8);
pub const GPIO_DOUT7_4_DIO5_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT7_4_DIO5_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT7_4_DIO4 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT7_4_DIO4_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT7_4_DIO4_S = @as(c_uint, 0);
pub const GPIO_DOUT7_4_DIO4_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT7_4_DIO4_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT11_8_DIO11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT11_8_DIO11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT11_8_DIO11_S = @as(c_uint, 24);
pub const GPIO_DOUT11_8_DIO11_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT11_8_DIO11_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT11_8_DIO10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT11_8_DIO10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT11_8_DIO10_S = @as(c_uint, 16);
pub const GPIO_DOUT11_8_DIO10_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT11_8_DIO10_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT11_8_DIO9 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT11_8_DIO9_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT11_8_DIO9_S = @as(c_uint, 8);
pub const GPIO_DOUT11_8_DIO9_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT11_8_DIO9_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT11_8_DIO8 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT11_8_DIO8_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT11_8_DIO8_S = @as(c_uint, 0);
pub const GPIO_DOUT11_8_DIO8_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT11_8_DIO8_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT15_12_DIO15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT15_12_DIO15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT15_12_DIO15_S = @as(c_uint, 24);
pub const GPIO_DOUT15_12_DIO15_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT15_12_DIO15_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT15_12_DIO14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT15_12_DIO14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT15_12_DIO14_S = @as(c_uint, 16);
pub const GPIO_DOUT15_12_DIO14_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT15_12_DIO14_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT15_12_DIO13 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT15_12_DIO13_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT15_12_DIO13_S = @as(c_uint, 8);
pub const GPIO_DOUT15_12_DIO13_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT15_12_DIO13_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT15_12_DIO12 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT15_12_DIO12_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT15_12_DIO12_S = @as(c_uint, 0);
pub const GPIO_DOUT15_12_DIO12_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT15_12_DIO12_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT19_16_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT19_16_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT19_16_DIO19_S = @as(c_uint, 24);
pub const GPIO_DOUT19_16_DIO19_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT19_16_DIO19_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT19_16_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT19_16_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT19_16_DIO18_S = @as(c_uint, 16);
pub const GPIO_DOUT19_16_DIO18_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT19_16_DIO18_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT19_16_DIO17 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT19_16_DIO17_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT19_16_DIO17_S = @as(c_uint, 8);
pub const GPIO_DOUT19_16_DIO17_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT19_16_DIO17_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT19_16_DIO16 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT19_16_DIO16_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT19_16_DIO16_S = @as(c_uint, 0);
pub const GPIO_DOUT19_16_DIO16_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT19_16_DIO16_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT23_20_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT23_20_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT23_20_DIO23_S = @as(c_uint, 24);
pub const GPIO_DOUT23_20_DIO23_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT23_20_DIO23_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT23_20_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT23_20_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT23_20_DIO22_S = @as(c_uint, 16);
pub const GPIO_DOUT23_20_DIO22_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT23_20_DIO22_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT23_20_DIO21 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT23_20_DIO21_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT23_20_DIO21_S = @as(c_uint, 8);
pub const GPIO_DOUT23_20_DIO21_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT23_20_DIO21_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT23_20_DIO20 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT23_20_DIO20_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT23_20_DIO20_S = @as(c_uint, 0);
pub const GPIO_DOUT23_20_DIO20_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT23_20_DIO20_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT27_24_DIO25 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT27_24_DIO25_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT27_24_DIO25_S = @as(c_uint, 8);
pub const GPIO_DOUT27_24_DIO25_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT27_24_DIO25_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT27_24_DIO24 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT27_24_DIO24_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT27_24_DIO24_S = @as(c_uint, 0);
pub const GPIO_DOUT27_24_DIO24_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT27_24_DIO24_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUT31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUT31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOUT31_0_DIO25_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUT31_0_DIO25_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOUT31_0_DIO24_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUT31_0_DIO24_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUT31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUT31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOUT31_0_DIO23_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUT31_0_DIO23_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUT31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUT31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOUT31_0_DIO22_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUT31_0_DIO22_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUT31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUT31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOUT31_0_DIO21_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUT31_0_DIO21_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUT31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUT31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOUT31_0_DIO20_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUT31_0_DIO20_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUT31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUT31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOUT31_0_DIO19_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUT31_0_DIO19_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUT31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUT31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOUT31_0_DIO18_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUT31_0_DIO18_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUT31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUT31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOUT31_0_DIO17_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUT31_0_DIO17_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOUT31_0_DIO16_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUT31_0_DIO16_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOUT31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOUT31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOUT31_0_DIO15_ONE = @as(c_uint, 0x00008000);
pub const GPIO_DOUT31_0_DIO15_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOUT31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOUT31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOUT31_0_DIO14_ONE = @as(c_uint, 0x00004000);
pub const GPIO_DOUT31_0_DIO14_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOUT31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOUT31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOUT31_0_DIO13_ONE = @as(c_uint, 0x00002000);
pub const GPIO_DOUT31_0_DIO13_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOUT31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOUT31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOUT31_0_DIO12_ONE = @as(c_uint, 0x00001000);
pub const GPIO_DOUT31_0_DIO12_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOUT31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOUT31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOUT31_0_DIO11_ONE = @as(c_uint, 0x00000800);
pub const GPIO_DOUT31_0_DIO11_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOUT31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOUT31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOUT31_0_DIO10_ONE = @as(c_uint, 0x00000400);
pub const GPIO_DOUT31_0_DIO10_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOUT31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOUT31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOUT31_0_DIO9_ONE = @as(c_uint, 0x00000200);
pub const GPIO_DOUT31_0_DIO9_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOUT31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUT31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOUT31_0_DIO8_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DOUT31_0_DIO8_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOUT31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOUT31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOUT31_0_DIO7_ONE = @as(c_uint, 0x00000080);
pub const GPIO_DOUT31_0_DIO7_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOUT31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOUT31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOUT31_0_DIO6_ONE = @as(c_uint, 0x00000040);
pub const GPIO_DOUT31_0_DIO6_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOUT31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOUT31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOUT31_0_DIO5_ONE = @as(c_uint, 0x00000020);
pub const GPIO_DOUT31_0_DIO5_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOUT31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOUT31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOUT31_0_DIO4_ONE = @as(c_uint, 0x00000010);
pub const GPIO_DOUT31_0_DIO4_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOUT31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOUT31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOUT31_0_DIO3_ONE = @as(c_uint, 0x00000008);
pub const GPIO_DOUT31_0_DIO3_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOUT31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOUT31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOUT31_0_DIO2_ONE = @as(c_uint, 0x00000004);
pub const GPIO_DOUT31_0_DIO2_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOUT31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOUT31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOUT31_0_DIO1_ONE = @as(c_uint, 0x00000002);
pub const GPIO_DOUT31_0_DIO1_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUT31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUT31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUT31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUT31_0_DIO0_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DOUT31_0_DIO0_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTSET31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTSET31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOUTSET31_0_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTSET31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTSET31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTSET31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOUTSET31_0_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTSET31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTSET31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTSET31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOUTSET31_0_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTSET31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTSET31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTSET31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOUTSET31_0_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTSET31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTSET31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTSET31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOUTSET31_0_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTSET31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTSET31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTSET31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOUTSET31_0_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTSET31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTSET31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTSET31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOUTSET31_0_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTSET31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTSET31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTSET31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOUTSET31_0_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTSET31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTSET31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTSET31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOUTSET31_0_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTSET31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTSET31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTSET31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOUTSET31_0_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTSET31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOUTSET31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOUTSET31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOUTSET31_0_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_DOUTSET31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOUTSET31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOUTSET31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOUTSET31_0_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_DOUTSET31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOUTSET31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOUTSET31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOUTSET31_0_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_DOUTSET31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOUTSET31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOUTSET31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOUTSET31_0_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_DOUTSET31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOUTSET31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOUTSET31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOUTSET31_0_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_DOUTSET31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOUTSET31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOUTSET31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOUTSET31_0_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_DOUTSET31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOUTSET31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOUTSET31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOUTSET31_0_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_DOUTSET31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTSET31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTSET31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOUTSET31_0_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_DOUTSET31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOUTSET31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOUTSET31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOUTSET31_0_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_DOUTSET31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOUTSET31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOUTSET31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOUTSET31_0_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_DOUTSET31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOUTSET31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOUTSET31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOUTSET31_0_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_DOUTSET31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOUTSET31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOUTSET31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOUTSET31_0_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_DOUTSET31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOUTSET31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOUTSET31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOUTSET31_0_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_DOUTSET31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOUTSET31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOUTSET31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOUTSET31_0_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_DOUTSET31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOUTSET31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOUTSET31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOUTSET31_0_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_DOUTSET31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTSET31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTSET31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTSET31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUTSET31_0_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_DOUTSET31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTCLR31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTCLR31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOUTCLR31_0_DIO25_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTCLR31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTCLR31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTCLR31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOUTCLR31_0_DIO24_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTCLR31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTCLR31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTCLR31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOUTCLR31_0_DIO23_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTCLR31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTCLR31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTCLR31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOUTCLR31_0_DIO22_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTCLR31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTCLR31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTCLR31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOUTCLR31_0_DIO21_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTCLR31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTCLR31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTCLR31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOUTCLR31_0_DIO20_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTCLR31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTCLR31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTCLR31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOUTCLR31_0_DIO19_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTCLR31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTCLR31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTCLR31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOUTCLR31_0_DIO18_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTCLR31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTCLR31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTCLR31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOUTCLR31_0_DIO17_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTCLR31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTCLR31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTCLR31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOUTCLR31_0_DIO16_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTCLR31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOUTCLR31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOUTCLR31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOUTCLR31_0_DIO15_CLR = @as(c_uint, 0x00008000);
pub const GPIO_DOUTCLR31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOUTCLR31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOUTCLR31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOUTCLR31_0_DIO14_CLR = @as(c_uint, 0x00004000);
pub const GPIO_DOUTCLR31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOUTCLR31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOUTCLR31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOUTCLR31_0_DIO13_CLR = @as(c_uint, 0x00002000);
pub const GPIO_DOUTCLR31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOUTCLR31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOUTCLR31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOUTCLR31_0_DIO12_CLR = @as(c_uint, 0x00001000);
pub const GPIO_DOUTCLR31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOUTCLR31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOUTCLR31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOUTCLR31_0_DIO11_CLR = @as(c_uint, 0x00000800);
pub const GPIO_DOUTCLR31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOUTCLR31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOUTCLR31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOUTCLR31_0_DIO10_CLR = @as(c_uint, 0x00000400);
pub const GPIO_DOUTCLR31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOUTCLR31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOUTCLR31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOUTCLR31_0_DIO9_CLR = @as(c_uint, 0x00000200);
pub const GPIO_DOUTCLR31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTCLR31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTCLR31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOUTCLR31_0_DIO8_CLR = @as(c_uint, 0x00000100);
pub const GPIO_DOUTCLR31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOUTCLR31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOUTCLR31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOUTCLR31_0_DIO7_CLR = @as(c_uint, 0x00000080);
pub const GPIO_DOUTCLR31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOUTCLR31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOUTCLR31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOUTCLR31_0_DIO6_CLR = @as(c_uint, 0x00000040);
pub const GPIO_DOUTCLR31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOUTCLR31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOUTCLR31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOUTCLR31_0_DIO5_CLR = @as(c_uint, 0x00000020);
pub const GPIO_DOUTCLR31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOUTCLR31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOUTCLR31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOUTCLR31_0_DIO4_CLR = @as(c_uint, 0x00000010);
pub const GPIO_DOUTCLR31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOUTCLR31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOUTCLR31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOUTCLR31_0_DIO3_CLR = @as(c_uint, 0x00000008);
pub const GPIO_DOUTCLR31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOUTCLR31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOUTCLR31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOUTCLR31_0_DIO2_CLR = @as(c_uint, 0x00000004);
pub const GPIO_DOUTCLR31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOUTCLR31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOUTCLR31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOUTCLR31_0_DIO1_CLR = @as(c_uint, 0x00000002);
pub const GPIO_DOUTCLR31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTCLR31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTCLR31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTCLR31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUTCLR31_0_DIO0_CLR = @as(c_uint, 0x00000001);
pub const GPIO_DOUTCLR31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTTGL31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTTGL31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOUTTGL31_0_DIO25_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOUTTGL31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL31_0_DIO24_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTTGL31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTTGL31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOUTTGL31_0_DIO23_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOUTTGL31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTTGL31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTTGL31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOUTTGL31_0_DIO22_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOUTTGL31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTTGL31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTTGL31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOUTTGL31_0_DIO21_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOUTTGL31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTTGL31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTTGL31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOUTTGL31_0_DIO20_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOUTTGL31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTTGL31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTTGL31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOUTTGL31_0_DIO19_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOUTTGL31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTTGL31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTTGL31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOUTTGL31_0_DIO18_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOUTTGL31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTTGL31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTTGL31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOUTTGL31_0_DIO17_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOUTTGL31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL31_0_DIO16_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOUTTGL31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOUTTGL31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOUTTGL31_0_DIO15_TOGGLE = @as(c_uint, 0x00008000);
pub const GPIO_DOUTTGL31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOUTTGL31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOUTTGL31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOUTTGL31_0_DIO14_TOGGLE = @as(c_uint, 0x00004000);
pub const GPIO_DOUTTGL31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOUTTGL31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOUTTGL31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOUTTGL31_0_DIO13_TOGGLE = @as(c_uint, 0x00002000);
pub const GPIO_DOUTTGL31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOUTTGL31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOUTTGL31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOUTTGL31_0_DIO12_TOGGLE = @as(c_uint, 0x00001000);
pub const GPIO_DOUTTGL31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOUTTGL31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOUTTGL31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOUTTGL31_0_DIO11_TOGGLE = @as(c_uint, 0x00000800);
pub const GPIO_DOUTTGL31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOUTTGL31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOUTTGL31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOUTTGL31_0_DIO10_TOGGLE = @as(c_uint, 0x00000400);
pub const GPIO_DOUTTGL31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOUTTGL31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOUTTGL31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOUTTGL31_0_DIO9_TOGGLE = @as(c_uint, 0x00000200);
pub const GPIO_DOUTTGL31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL31_0_DIO8_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOUTTGL31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOUTTGL31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOUTTGL31_0_DIO7_TOGGLE = @as(c_uint, 0x00000080);
pub const GPIO_DOUTTGL31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOUTTGL31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOUTTGL31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOUTTGL31_0_DIO6_TOGGLE = @as(c_uint, 0x00000040);
pub const GPIO_DOUTTGL31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOUTTGL31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOUTTGL31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOUTTGL31_0_DIO5_TOGGLE = @as(c_uint, 0x00000020);
pub const GPIO_DOUTTGL31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOUTTGL31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOUTTGL31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOUTTGL31_0_DIO4_TOGGLE = @as(c_uint, 0x00000010);
pub const GPIO_DOUTTGL31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOUTTGL31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOUTTGL31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOUTTGL31_0_DIO3_TOGGLE = @as(c_uint, 0x00000008);
pub const GPIO_DOUTTGL31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOUTTGL31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOUTTGL31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOUTTGL31_0_DIO2_TOGGLE = @as(c_uint, 0x00000004);
pub const GPIO_DOUTTGL31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOUTTGL31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOUTTGL31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOUTTGL31_0_DIO1_TOGGLE = @as(c_uint, 0x00000002);
pub const GPIO_DOUTTGL31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL31_0_DIO0_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL3_0_DIO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL3_0_DIO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL3_0_DIO3_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL3_0_DIO3_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL3_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL3_0_DIO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL3_0_DIO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL3_0_DIO2_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL3_0_DIO2_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL3_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL3_0_DIO1 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL3_0_DIO1_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL3_0_DIO1_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL3_0_DIO1_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL3_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL3_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL3_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL3_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL3_0_DIO0_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL3_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL7_4_DIO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL7_4_DIO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL7_4_DIO7_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL7_4_DIO7_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL7_4_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL7_4_DIO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL7_4_DIO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL7_4_DIO6_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL7_4_DIO6_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL7_4_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL7_4_DIO5 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL7_4_DIO5_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL7_4_DIO5_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL7_4_DIO5_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL7_4_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL7_4_DIO4 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL7_4_DIO4_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL7_4_DIO4_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL7_4_DIO4_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL7_4_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL11_8_DIO11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL11_8_DIO11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL11_8_DIO11_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL11_8_DIO11_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL11_8_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL11_8_DIO10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL11_8_DIO10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL11_8_DIO10_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL11_8_DIO10_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL11_8_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL11_8_DIO9 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL11_8_DIO9_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL11_8_DIO9_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL11_8_DIO9_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL11_8_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL11_8_DIO8 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL11_8_DIO8_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL11_8_DIO8_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL11_8_DIO8_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL11_8_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL15_12_DIO15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL15_12_DIO15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL15_12_DIO15_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL15_12_DIO15_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL15_12_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL15_12_DIO14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL15_12_DIO14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL15_12_DIO14_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL15_12_DIO14_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL15_12_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL15_12_DIO13 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL15_12_DIO13_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL15_12_DIO13_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL15_12_DIO13_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL15_12_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL15_12_DIO12 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL15_12_DIO12_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL15_12_DIO12_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL15_12_DIO12_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL15_12_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL19_16_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL19_16_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL19_16_DIO19_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL19_16_DIO19_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL19_16_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL19_16_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL19_16_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL19_16_DIO18_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL19_16_DIO18_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL19_16_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL19_16_DIO17 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL19_16_DIO17_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL19_16_DIO17_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL19_16_DIO17_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL19_16_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL19_16_DIO16 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL19_16_DIO16_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL19_16_DIO16_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL19_16_DIO16_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL19_16_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL23_20_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL23_20_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL23_20_DIO23_S = @as(c_uint, 24);
pub const GPIO_DOUTTGL23_20_DIO23_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOUTTGL23_20_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL23_20_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL23_20_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL23_20_DIO22_S = @as(c_uint, 16);
pub const GPIO_DOUTTGL23_20_DIO22_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOUTTGL23_20_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL23_20_DIO21 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL23_20_DIO21_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL23_20_DIO21_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL23_20_DIO21_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL23_20_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL23_20_DIO20 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL23_20_DIO20_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL23_20_DIO20_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL23_20_DIO20_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL23_20_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL27_24_DIO25 = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL27_24_DIO25_M = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL27_24_DIO25_S = @as(c_uint, 8);
pub const GPIO_DOUTTGL27_24_DIO25_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOUTTGL27_24_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOUTTGL27_24_DIO24 = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL27_24_DIO24_M = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL27_24_DIO24_S = @as(c_uint, 0);
pub const GPIO_DOUTTGL27_24_DIO24_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOUTTGL27_24_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOE3_0_DIO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE3_0_DIO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE3_0_DIO3_S = @as(c_uint, 24);
pub const GPIO_DOE3_0_DIO3_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE3_0_DIO3_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE3_0_DIO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE3_0_DIO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE3_0_DIO2_S = @as(c_uint, 16);
pub const GPIO_DOE3_0_DIO2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE3_0_DIO2_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE3_0_DIO1 = @as(c_uint, 0x00000100);
pub const GPIO_DOE3_0_DIO1_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE3_0_DIO1_S = @as(c_uint, 8);
pub const GPIO_DOE3_0_DIO1_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE3_0_DIO1_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE3_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOE3_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE3_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOE3_0_DIO0_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE3_0_DIO0_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE7_4_DIO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE7_4_DIO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE7_4_DIO7_S = @as(c_uint, 24);
pub const GPIO_DOE7_4_DIO7_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE7_4_DIO7_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE7_4_DIO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE7_4_DIO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE7_4_DIO6_S = @as(c_uint, 16);
pub const GPIO_DOE7_4_DIO6_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE7_4_DIO6_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE7_4_DIO5 = @as(c_uint, 0x00000100);
pub const GPIO_DOE7_4_DIO5_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE7_4_DIO5_S = @as(c_uint, 8);
pub const GPIO_DOE7_4_DIO5_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE7_4_DIO5_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE7_4_DIO4 = @as(c_uint, 0x00000001);
pub const GPIO_DOE7_4_DIO4_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE7_4_DIO4_S = @as(c_uint, 0);
pub const GPIO_DOE7_4_DIO4_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE7_4_DIO4_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE11_8_DIO11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE11_8_DIO11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE11_8_DIO11_S = @as(c_uint, 24);
pub const GPIO_DOE11_8_DIO11_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE11_8_DIO11_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE11_8_DIO10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE11_8_DIO10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE11_8_DIO10_S = @as(c_uint, 16);
pub const GPIO_DOE11_8_DIO10_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE11_8_DIO10_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE11_8_DIO9 = @as(c_uint, 0x00000100);
pub const GPIO_DOE11_8_DIO9_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE11_8_DIO9_S = @as(c_uint, 8);
pub const GPIO_DOE11_8_DIO9_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE11_8_DIO9_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE11_8_DIO8 = @as(c_uint, 0x00000001);
pub const GPIO_DOE11_8_DIO8_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE11_8_DIO8_S = @as(c_uint, 0);
pub const GPIO_DOE11_8_DIO8_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE11_8_DIO8_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE15_12_DIO15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE15_12_DIO15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE15_12_DIO15_S = @as(c_uint, 24);
pub const GPIO_DOE15_12_DIO15_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE15_12_DIO15_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE15_12_DIO14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE15_12_DIO14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE15_12_DIO14_S = @as(c_uint, 16);
pub const GPIO_DOE15_12_DIO14_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE15_12_DIO14_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE15_12_DIO13 = @as(c_uint, 0x00000100);
pub const GPIO_DOE15_12_DIO13_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE15_12_DIO13_S = @as(c_uint, 8);
pub const GPIO_DOE15_12_DIO13_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE15_12_DIO13_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE15_12_DIO12 = @as(c_uint, 0x00000001);
pub const GPIO_DOE15_12_DIO12_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE15_12_DIO12_S = @as(c_uint, 0);
pub const GPIO_DOE15_12_DIO12_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE15_12_DIO12_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE19_16_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE19_16_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE19_16_DIO19_S = @as(c_uint, 24);
pub const GPIO_DOE19_16_DIO19_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE19_16_DIO19_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE19_16_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE19_16_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE19_16_DIO18_S = @as(c_uint, 16);
pub const GPIO_DOE19_16_DIO18_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE19_16_DIO18_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE19_16_DIO17 = @as(c_uint, 0x00000100);
pub const GPIO_DOE19_16_DIO17_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE19_16_DIO17_S = @as(c_uint, 8);
pub const GPIO_DOE19_16_DIO17_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE19_16_DIO17_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE19_16_DIO16 = @as(c_uint, 0x00000001);
pub const GPIO_DOE19_16_DIO16_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE19_16_DIO16_S = @as(c_uint, 0);
pub const GPIO_DOE19_16_DIO16_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE19_16_DIO16_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE23_20_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE23_20_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE23_20_DIO23_S = @as(c_uint, 24);
pub const GPIO_DOE23_20_DIO23_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE23_20_DIO23_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE23_20_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE23_20_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE23_20_DIO22_S = @as(c_uint, 16);
pub const GPIO_DOE23_20_DIO22_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE23_20_DIO22_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE23_20_DIO21 = @as(c_uint, 0x00000100);
pub const GPIO_DOE23_20_DIO21_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE23_20_DIO21_S = @as(c_uint, 8);
pub const GPIO_DOE23_20_DIO21_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE23_20_DIO21_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE23_20_DIO20 = @as(c_uint, 0x00000001);
pub const GPIO_DOE23_20_DIO20_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE23_20_DIO20_S = @as(c_uint, 0);
pub const GPIO_DOE23_20_DIO20_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE23_20_DIO20_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE27_24_DIO25 = @as(c_uint, 0x00000100);
pub const GPIO_DOE27_24_DIO25_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE27_24_DIO25_S = @as(c_uint, 8);
pub const GPIO_DOE27_24_DIO25_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE27_24_DIO25_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE27_24_DIO24 = @as(c_uint, 0x00000001);
pub const GPIO_DOE27_24_DIO24_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE27_24_DIO24_S = @as(c_uint, 0);
pub const GPIO_DOE27_24_DIO24_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE27_24_DIO24_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOE31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOE31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOE31_0_DIO25_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOE31_0_DIO25_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOE31_0_DIO24_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOE31_0_DIO24_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOE31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOE31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOE31_0_DIO23_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOE31_0_DIO23_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOE31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOE31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOE31_0_DIO22_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOE31_0_DIO22_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOE31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOE31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOE31_0_DIO21_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOE31_0_DIO21_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOE31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOE31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOE31_0_DIO20_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOE31_0_DIO20_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOE31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOE31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOE31_0_DIO19_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOE31_0_DIO19_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOE31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOE31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOE31_0_DIO18_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOE31_0_DIO18_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOE31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOE31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOE31_0_DIO17_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOE31_0_DIO17_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOE31_0_DIO16_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOE31_0_DIO16_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOE31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOE31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOE31_0_DIO15_EN = @as(c_uint, 0x00008000);
pub const GPIO_DOE31_0_DIO15_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOE31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOE31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOE31_0_DIO14_EN = @as(c_uint, 0x00004000);
pub const GPIO_DOE31_0_DIO14_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOE31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOE31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOE31_0_DIO13_EN = @as(c_uint, 0x00002000);
pub const GPIO_DOE31_0_DIO13_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOE31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOE31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOE31_0_DIO12_EN = @as(c_uint, 0x00001000);
pub const GPIO_DOE31_0_DIO12_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOE31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOE31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOE31_0_DIO11_EN = @as(c_uint, 0x00000800);
pub const GPIO_DOE31_0_DIO11_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOE31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOE31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOE31_0_DIO10_EN = @as(c_uint, 0x00000400);
pub const GPIO_DOE31_0_DIO10_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOE31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOE31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOE31_0_DIO9_EN = @as(c_uint, 0x00000200);
pub const GPIO_DOE31_0_DIO9_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOE31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOE31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOE31_0_DIO8_EN = @as(c_uint, 0x00000100);
pub const GPIO_DOE31_0_DIO8_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOE31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOE31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOE31_0_DIO7_EN = @as(c_uint, 0x00000080);
pub const GPIO_DOE31_0_DIO7_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOE31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOE31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOE31_0_DIO6_EN = @as(c_uint, 0x00000040);
pub const GPIO_DOE31_0_DIO6_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOE31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOE31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOE31_0_DIO5_EN = @as(c_uint, 0x00000020);
pub const GPIO_DOE31_0_DIO5_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOE31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOE31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOE31_0_DIO4_EN = @as(c_uint, 0x00000010);
pub const GPIO_DOE31_0_DIO4_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOE31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOE31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOE31_0_DIO3_EN = @as(c_uint, 0x00000008);
pub const GPIO_DOE31_0_DIO3_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOE31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOE31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOE31_0_DIO2_EN = @as(c_uint, 0x00000004);
pub const GPIO_DOE31_0_DIO2_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOE31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOE31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOE31_0_DIO1_EN = @as(c_uint, 0x00000002);
pub const GPIO_DOE31_0_DIO1_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOE31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOE31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOE31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOE31_0_DIO0_EN = @as(c_uint, 0x00000001);
pub const GPIO_DOE31_0_DIO0_DIS = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOESET31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOESET31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOESET31_0_DIO25_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOESET31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOESET31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOESET31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOESET31_0_DIO24_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOESET31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOESET31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOESET31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOESET31_0_DIO23_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOESET31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOESET31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOESET31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOESET31_0_DIO22_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOESET31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOESET31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOESET31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOESET31_0_DIO21_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOESET31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOESET31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOESET31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOESET31_0_DIO20_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOESET31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOESET31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOESET31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOESET31_0_DIO19_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOESET31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOESET31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOESET31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOESET31_0_DIO18_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOESET31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOESET31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOESET31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOESET31_0_DIO17_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOESET31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOESET31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOESET31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOESET31_0_DIO16_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOESET31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOESET31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOESET31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOESET31_0_DIO15_SET = @as(c_uint, 0x00008000);
pub const GPIO_DOESET31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOESET31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOESET31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOESET31_0_DIO14_SET = @as(c_uint, 0x00004000);
pub const GPIO_DOESET31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOESET31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOESET31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOESET31_0_DIO13_SET = @as(c_uint, 0x00002000);
pub const GPIO_DOESET31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOESET31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOESET31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOESET31_0_DIO12_SET = @as(c_uint, 0x00001000);
pub const GPIO_DOESET31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOESET31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOESET31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOESET31_0_DIO11_SET = @as(c_uint, 0x00000800);
pub const GPIO_DOESET31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOESET31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOESET31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOESET31_0_DIO10_SET = @as(c_uint, 0x00000400);
pub const GPIO_DOESET31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOESET31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOESET31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOESET31_0_DIO9_SET = @as(c_uint, 0x00000200);
pub const GPIO_DOESET31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOESET31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOESET31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOESET31_0_DIO8_SET = @as(c_uint, 0x00000100);
pub const GPIO_DOESET31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOESET31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOESET31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOESET31_0_DIO7_SET = @as(c_uint, 0x00000080);
pub const GPIO_DOESET31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOESET31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOESET31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOESET31_0_DIO6_SET = @as(c_uint, 0x00000040);
pub const GPIO_DOESET31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOESET31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOESET31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOESET31_0_DIO5_SET = @as(c_uint, 0x00000020);
pub const GPIO_DOESET31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOESET31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOESET31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOESET31_0_DIO4_SET = @as(c_uint, 0x00000010);
pub const GPIO_DOESET31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOESET31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOESET31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOESET31_0_DIO3_SET = @as(c_uint, 0x00000008);
pub const GPIO_DOESET31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOESET31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOESET31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOESET31_0_DIO2_SET = @as(c_uint, 0x00000004);
pub const GPIO_DOESET31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOESET31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOESET31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOESET31_0_DIO1_SET = @as(c_uint, 0x00000002);
pub const GPIO_DOESET31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOESET31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOESET31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOESET31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOESET31_0_DIO0_SET = @as(c_uint, 0x00000001);
pub const GPIO_DOESET31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOECLR31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOECLR31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOECLR31_0_DIO25_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOECLR31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOECLR31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOECLR31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOECLR31_0_DIO24_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOECLR31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOECLR31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOECLR31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOECLR31_0_DIO23_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOECLR31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOECLR31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOECLR31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOECLR31_0_DIO22_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOECLR31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOECLR31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOECLR31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOECLR31_0_DIO21_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOECLR31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOECLR31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOECLR31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOECLR31_0_DIO20_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOECLR31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOECLR31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOECLR31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOECLR31_0_DIO19_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOECLR31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOECLR31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOECLR31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOECLR31_0_DIO18_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOECLR31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOECLR31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOECLR31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOECLR31_0_DIO17_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOECLR31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOECLR31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOECLR31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOECLR31_0_DIO16_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOECLR31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOECLR31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOECLR31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOECLR31_0_DIO15_CLR = @as(c_uint, 0x00008000);
pub const GPIO_DOECLR31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOECLR31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOECLR31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOECLR31_0_DIO14_CLR = @as(c_uint, 0x00004000);
pub const GPIO_DOECLR31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOECLR31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOECLR31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOECLR31_0_DIO13_CLR = @as(c_uint, 0x00002000);
pub const GPIO_DOECLR31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOECLR31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOECLR31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOECLR31_0_DIO12_CLR = @as(c_uint, 0x00001000);
pub const GPIO_DOECLR31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOECLR31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOECLR31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOECLR31_0_DIO11_CLR = @as(c_uint, 0x00000800);
pub const GPIO_DOECLR31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOECLR31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOECLR31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOECLR31_0_DIO10_CLR = @as(c_uint, 0x00000400);
pub const GPIO_DOECLR31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOECLR31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOECLR31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOECLR31_0_DIO9_CLR = @as(c_uint, 0x00000200);
pub const GPIO_DOECLR31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOECLR31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOECLR31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOECLR31_0_DIO8_CLR = @as(c_uint, 0x00000100);
pub const GPIO_DOECLR31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOECLR31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOECLR31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOECLR31_0_DIO7_CLR = @as(c_uint, 0x00000080);
pub const GPIO_DOECLR31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOECLR31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOECLR31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOECLR31_0_DIO6_CLR = @as(c_uint, 0x00000040);
pub const GPIO_DOECLR31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOECLR31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOECLR31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOECLR31_0_DIO5_CLR = @as(c_uint, 0x00000020);
pub const GPIO_DOECLR31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOECLR31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOECLR31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOECLR31_0_DIO4_CLR = @as(c_uint, 0x00000010);
pub const GPIO_DOECLR31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOECLR31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOECLR31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOECLR31_0_DIO3_CLR = @as(c_uint, 0x00000008);
pub const GPIO_DOECLR31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOECLR31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOECLR31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOECLR31_0_DIO2_CLR = @as(c_uint, 0x00000004);
pub const GPIO_DOECLR31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOECLR31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOECLR31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOECLR31_0_DIO1_CLR = @as(c_uint, 0x00000002);
pub const GPIO_DOECLR31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOECLR31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOECLR31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOECLR31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOECLR31_0_DIO0_CLR = @as(c_uint, 0x00000001);
pub const GPIO_DOECLR31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOETGL31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOETGL31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DOETGL31_0_DIO25_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DOETGL31_0_DIO25_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOETGL31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOETGL31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DOETGL31_0_DIO24_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DOETGL31_0_DIO24_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOETGL31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOETGL31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DOETGL31_0_DIO23_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DOETGL31_0_DIO23_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOETGL31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOETGL31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DOETGL31_0_DIO22_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DOETGL31_0_DIO22_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOETGL31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOETGL31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DOETGL31_0_DIO21_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DOETGL31_0_DIO21_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOETGL31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOETGL31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DOETGL31_0_DIO20_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DOETGL31_0_DIO20_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOETGL31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOETGL31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DOETGL31_0_DIO19_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DOETGL31_0_DIO19_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOETGL31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOETGL31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DOETGL31_0_DIO18_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DOETGL31_0_DIO18_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOETGL31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOETGL31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DOETGL31_0_DIO17_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DOETGL31_0_DIO17_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOETGL31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOETGL31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DOETGL31_0_DIO16_TOGGLE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DOETGL31_0_DIO16_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DOETGL31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DOETGL31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DOETGL31_0_DIO15_TOGGLE = @as(c_uint, 0x00008000);
pub const GPIO_DOETGL31_0_DIO15_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DOETGL31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DOETGL31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DOETGL31_0_DIO14_TOGGLE = @as(c_uint, 0x00004000);
pub const GPIO_DOETGL31_0_DIO14_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DOETGL31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DOETGL31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DOETGL31_0_DIO13_TOGGLE = @as(c_uint, 0x00002000);
pub const GPIO_DOETGL31_0_DIO13_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DOETGL31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DOETGL31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DOETGL31_0_DIO12_TOGGLE = @as(c_uint, 0x00001000);
pub const GPIO_DOETGL31_0_DIO12_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DOETGL31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DOETGL31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DOETGL31_0_DIO11_TOGGLE = @as(c_uint, 0x00000800);
pub const GPIO_DOETGL31_0_DIO11_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DOETGL31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DOETGL31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DOETGL31_0_DIO10_TOGGLE = @as(c_uint, 0x00000400);
pub const GPIO_DOETGL31_0_DIO10_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DOETGL31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DOETGL31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DOETGL31_0_DIO9_TOGGLE = @as(c_uint, 0x00000200);
pub const GPIO_DOETGL31_0_DIO9_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DOETGL31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DOETGL31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DOETGL31_0_DIO8_TOGGLE = @as(c_uint, 0x00000100);
pub const GPIO_DOETGL31_0_DIO8_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DOETGL31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DOETGL31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DOETGL31_0_DIO7_TOGGLE = @as(c_uint, 0x00000080);
pub const GPIO_DOETGL31_0_DIO7_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DOETGL31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DOETGL31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DOETGL31_0_DIO6_TOGGLE = @as(c_uint, 0x00000040);
pub const GPIO_DOETGL31_0_DIO6_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DOETGL31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DOETGL31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DOETGL31_0_DIO5_TOGGLE = @as(c_uint, 0x00000020);
pub const GPIO_DOETGL31_0_DIO5_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DOETGL31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DOETGL31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DOETGL31_0_DIO4_TOGGLE = @as(c_uint, 0x00000010);
pub const GPIO_DOETGL31_0_DIO4_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DOETGL31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DOETGL31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DOETGL31_0_DIO3_TOGGLE = @as(c_uint, 0x00000008);
pub const GPIO_DOETGL31_0_DIO3_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DOETGL31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DOETGL31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DOETGL31_0_DIO2_TOGGLE = @as(c_uint, 0x00000004);
pub const GPIO_DOETGL31_0_DIO2_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DOETGL31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DOETGL31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DOETGL31_0_DIO1_TOGGLE = @as(c_uint, 0x00000002);
pub const GPIO_DOETGL31_0_DIO1_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DOETGL31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DOETGL31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DOETGL31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DOETGL31_0_DIO0_TOGGLE = @as(c_uint, 0x00000001);
pub const GPIO_DOETGL31_0_DIO0_NOEFF = @as(c_uint, 0x00000000);
pub const GPIO_DIN3_0_DIO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN3_0_DIO3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN3_0_DIO3_S = @as(c_uint, 24);
pub const GPIO_DIN3_0_DIO3_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN3_0_DIO3_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN3_0_DIO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN3_0_DIO2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN3_0_DIO2_S = @as(c_uint, 16);
pub const GPIO_DIN3_0_DIO2_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN3_0_DIO2_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN3_0_DIO1 = @as(c_uint, 0x00000100);
pub const GPIO_DIN3_0_DIO1_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN3_0_DIO1_S = @as(c_uint, 8);
pub const GPIO_DIN3_0_DIO1_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN3_0_DIO1_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN3_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DIN3_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN3_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DIN3_0_DIO0_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN3_0_DIO0_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN7_4_DIO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN7_4_DIO7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN7_4_DIO7_S = @as(c_uint, 24);
pub const GPIO_DIN7_4_DIO7_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN7_4_DIO7_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN7_4_DIO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN7_4_DIO6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN7_4_DIO6_S = @as(c_uint, 16);
pub const GPIO_DIN7_4_DIO6_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN7_4_DIO6_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN7_4_DIO5 = @as(c_uint, 0x00000100);
pub const GPIO_DIN7_4_DIO5_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN7_4_DIO5_S = @as(c_uint, 8);
pub const GPIO_DIN7_4_DIO5_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN7_4_DIO5_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN7_4_DIO4 = @as(c_uint, 0x00000001);
pub const GPIO_DIN7_4_DIO4_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN7_4_DIO4_S = @as(c_uint, 0);
pub const GPIO_DIN7_4_DIO4_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN7_4_DIO4_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN11_8_DIO11 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN11_8_DIO11_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN11_8_DIO11_S = @as(c_uint, 24);
pub const GPIO_DIN11_8_DIO11_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN11_8_DIO11_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN11_8_DIO10 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN11_8_DIO10_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN11_8_DIO10_S = @as(c_uint, 16);
pub const GPIO_DIN11_8_DIO10_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN11_8_DIO10_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN11_8_DIO9 = @as(c_uint, 0x00000100);
pub const GPIO_DIN11_8_DIO9_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN11_8_DIO9_S = @as(c_uint, 8);
pub const GPIO_DIN11_8_DIO9_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN11_8_DIO9_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN11_8_DIO8 = @as(c_uint, 0x00000001);
pub const GPIO_DIN11_8_DIO8_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN11_8_DIO8_S = @as(c_uint, 0);
pub const GPIO_DIN11_8_DIO8_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN11_8_DIO8_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN15_12_DIO15 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN15_12_DIO15_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN15_12_DIO15_S = @as(c_uint, 24);
pub const GPIO_DIN15_12_DIO15_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN15_12_DIO15_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN15_12_DIO14 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN15_12_DIO14_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN15_12_DIO14_S = @as(c_uint, 16);
pub const GPIO_DIN15_12_DIO14_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN15_12_DIO14_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN15_12_DIO13 = @as(c_uint, 0x00000100);
pub const GPIO_DIN15_12_DIO13_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN15_12_DIO13_S = @as(c_uint, 8);
pub const GPIO_DIN15_12_DIO13_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN15_12_DIO13_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN15_12_DIO12 = @as(c_uint, 0x00000001);
pub const GPIO_DIN15_12_DIO12_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN15_12_DIO12_S = @as(c_uint, 0);
pub const GPIO_DIN15_12_DIO12_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN15_12_DIO12_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN19_16_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN19_16_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN19_16_DIO19_S = @as(c_uint, 24);
pub const GPIO_DIN19_16_DIO19_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN19_16_DIO19_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN19_16_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN19_16_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN19_16_DIO18_S = @as(c_uint, 16);
pub const GPIO_DIN19_16_DIO18_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN19_16_DIO18_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN19_16_DIO17 = @as(c_uint, 0x00000100);
pub const GPIO_DIN19_16_DIO17_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN19_16_DIO17_S = @as(c_uint, 8);
pub const GPIO_DIN19_16_DIO17_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN19_16_DIO17_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN19_16_DIO16 = @as(c_uint, 0x00000001);
pub const GPIO_DIN19_16_DIO16_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN19_16_DIO16_S = @as(c_uint, 0);
pub const GPIO_DIN19_16_DIO16_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN19_16_DIO16_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN23_20_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN23_20_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN23_20_DIO23_S = @as(c_uint, 24);
pub const GPIO_DIN23_20_DIO23_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN23_20_DIO23_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN23_20_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN23_20_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN23_20_DIO22_S = @as(c_uint, 16);
pub const GPIO_DIN23_20_DIO22_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN23_20_DIO22_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN23_20_DIO21 = @as(c_uint, 0x00000100);
pub const GPIO_DIN23_20_DIO21_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN23_20_DIO21_S = @as(c_uint, 8);
pub const GPIO_DIN23_20_DIO21_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN23_20_DIO21_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN23_20_DIO20 = @as(c_uint, 0x00000001);
pub const GPIO_DIN23_20_DIO20_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN23_20_DIO20_S = @as(c_uint, 0);
pub const GPIO_DIN23_20_DIO20_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN23_20_DIO20_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN27_24_DIO25 = @as(c_uint, 0x00000100);
pub const GPIO_DIN27_24_DIO25_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN27_24_DIO25_S = @as(c_uint, 8);
pub const GPIO_DIN27_24_DIO25_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN27_24_DIO25_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN27_24_DIO24 = @as(c_uint, 0x00000001);
pub const GPIO_DIN27_24_DIO24_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN27_24_DIO24_S = @as(c_uint, 0);
pub const GPIO_DIN27_24_DIO24_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN27_24_DIO24_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO25 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DIN31_0_DIO25_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DIN31_0_DIO25_S = @as(c_uint, 25);
pub const GPIO_DIN31_0_DIO25_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const GPIO_DIN31_0_DIO25_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO24 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN31_0_DIO24_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN31_0_DIO24_S = @as(c_uint, 24);
pub const GPIO_DIN31_0_DIO24_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const GPIO_DIN31_0_DIO24_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO23 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DIN31_0_DIO23_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DIN31_0_DIO23_S = @as(c_uint, 23);
pub const GPIO_DIN31_0_DIO23_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const GPIO_DIN31_0_DIO23_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO22 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DIN31_0_DIO22_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DIN31_0_DIO22_S = @as(c_uint, 22);
pub const GPIO_DIN31_0_DIO22_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const GPIO_DIN31_0_DIO22_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO21 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DIN31_0_DIO21_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DIN31_0_DIO21_S = @as(c_uint, 21);
pub const GPIO_DIN31_0_DIO21_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const GPIO_DIN31_0_DIO21_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO20 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DIN31_0_DIO20_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DIN31_0_DIO20_S = @as(c_uint, 20);
pub const GPIO_DIN31_0_DIO20_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const GPIO_DIN31_0_DIO20_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO19 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DIN31_0_DIO19_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DIN31_0_DIO19_S = @as(c_uint, 19);
pub const GPIO_DIN31_0_DIO19_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const GPIO_DIN31_0_DIO19_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO18 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DIN31_0_DIO18_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DIN31_0_DIO18_S = @as(c_uint, 18);
pub const GPIO_DIN31_0_DIO18_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const GPIO_DIN31_0_DIO18_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO17 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DIN31_0_DIO17_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DIN31_0_DIO17_S = @as(c_uint, 17);
pub const GPIO_DIN31_0_DIO17_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const GPIO_DIN31_0_DIO17_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO16 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN31_0_DIO16_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN31_0_DIO16_S = @as(c_uint, 16);
pub const GPIO_DIN31_0_DIO16_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const GPIO_DIN31_0_DIO16_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO15 = @as(c_uint, 0x00008000);
pub const GPIO_DIN31_0_DIO15_M = @as(c_uint, 0x00008000);
pub const GPIO_DIN31_0_DIO15_S = @as(c_uint, 15);
pub const GPIO_DIN31_0_DIO15_ONE = @as(c_uint, 0x00008000);
pub const GPIO_DIN31_0_DIO15_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO14 = @as(c_uint, 0x00004000);
pub const GPIO_DIN31_0_DIO14_M = @as(c_uint, 0x00004000);
pub const GPIO_DIN31_0_DIO14_S = @as(c_uint, 14);
pub const GPIO_DIN31_0_DIO14_ONE = @as(c_uint, 0x00004000);
pub const GPIO_DIN31_0_DIO14_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO13 = @as(c_uint, 0x00002000);
pub const GPIO_DIN31_0_DIO13_M = @as(c_uint, 0x00002000);
pub const GPIO_DIN31_0_DIO13_S = @as(c_uint, 13);
pub const GPIO_DIN31_0_DIO13_ONE = @as(c_uint, 0x00002000);
pub const GPIO_DIN31_0_DIO13_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO12 = @as(c_uint, 0x00001000);
pub const GPIO_DIN31_0_DIO12_M = @as(c_uint, 0x00001000);
pub const GPIO_DIN31_0_DIO12_S = @as(c_uint, 12);
pub const GPIO_DIN31_0_DIO12_ONE = @as(c_uint, 0x00001000);
pub const GPIO_DIN31_0_DIO12_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO11 = @as(c_uint, 0x00000800);
pub const GPIO_DIN31_0_DIO11_M = @as(c_uint, 0x00000800);
pub const GPIO_DIN31_0_DIO11_S = @as(c_uint, 11);
pub const GPIO_DIN31_0_DIO11_ONE = @as(c_uint, 0x00000800);
pub const GPIO_DIN31_0_DIO11_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO10 = @as(c_uint, 0x00000400);
pub const GPIO_DIN31_0_DIO10_M = @as(c_uint, 0x00000400);
pub const GPIO_DIN31_0_DIO10_S = @as(c_uint, 10);
pub const GPIO_DIN31_0_DIO10_ONE = @as(c_uint, 0x00000400);
pub const GPIO_DIN31_0_DIO10_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO9 = @as(c_uint, 0x00000200);
pub const GPIO_DIN31_0_DIO9_M = @as(c_uint, 0x00000200);
pub const GPIO_DIN31_0_DIO9_S = @as(c_uint, 9);
pub const GPIO_DIN31_0_DIO9_ONE = @as(c_uint, 0x00000200);
pub const GPIO_DIN31_0_DIO9_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO8 = @as(c_uint, 0x00000100);
pub const GPIO_DIN31_0_DIO8_M = @as(c_uint, 0x00000100);
pub const GPIO_DIN31_0_DIO8_S = @as(c_uint, 8);
pub const GPIO_DIN31_0_DIO8_ONE = @as(c_uint, 0x00000100);
pub const GPIO_DIN31_0_DIO8_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO7 = @as(c_uint, 0x00000080);
pub const GPIO_DIN31_0_DIO7_M = @as(c_uint, 0x00000080);
pub const GPIO_DIN31_0_DIO7_S = @as(c_uint, 7);
pub const GPIO_DIN31_0_DIO7_ONE = @as(c_uint, 0x00000080);
pub const GPIO_DIN31_0_DIO7_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO6 = @as(c_uint, 0x00000040);
pub const GPIO_DIN31_0_DIO6_M = @as(c_uint, 0x00000040);
pub const GPIO_DIN31_0_DIO6_S = @as(c_uint, 6);
pub const GPIO_DIN31_0_DIO6_ONE = @as(c_uint, 0x00000040);
pub const GPIO_DIN31_0_DIO6_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO5 = @as(c_uint, 0x00000020);
pub const GPIO_DIN31_0_DIO5_M = @as(c_uint, 0x00000020);
pub const GPIO_DIN31_0_DIO5_S = @as(c_uint, 5);
pub const GPIO_DIN31_0_DIO5_ONE = @as(c_uint, 0x00000020);
pub const GPIO_DIN31_0_DIO5_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO4 = @as(c_uint, 0x00000010);
pub const GPIO_DIN31_0_DIO4_M = @as(c_uint, 0x00000010);
pub const GPIO_DIN31_0_DIO4_S = @as(c_uint, 4);
pub const GPIO_DIN31_0_DIO4_ONE = @as(c_uint, 0x00000010);
pub const GPIO_DIN31_0_DIO4_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO3 = @as(c_uint, 0x00000008);
pub const GPIO_DIN31_0_DIO3_M = @as(c_uint, 0x00000008);
pub const GPIO_DIN31_0_DIO3_S = @as(c_uint, 3);
pub const GPIO_DIN31_0_DIO3_ONE = @as(c_uint, 0x00000008);
pub const GPIO_DIN31_0_DIO3_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO2 = @as(c_uint, 0x00000004);
pub const GPIO_DIN31_0_DIO2_M = @as(c_uint, 0x00000004);
pub const GPIO_DIN31_0_DIO2_S = @as(c_uint, 2);
pub const GPIO_DIN31_0_DIO2_ONE = @as(c_uint, 0x00000004);
pub const GPIO_DIN31_0_DIO2_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO1 = @as(c_uint, 0x00000002);
pub const GPIO_DIN31_0_DIO1_M = @as(c_uint, 0x00000002);
pub const GPIO_DIN31_0_DIO1_S = @as(c_uint, 1);
pub const GPIO_DIN31_0_DIO1_ONE = @as(c_uint, 0x00000002);
pub const GPIO_DIN31_0_DIO1_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_DIN31_0_DIO0 = @as(c_uint, 0x00000001);
pub const GPIO_DIN31_0_DIO0_M = @as(c_uint, 0x00000001);
pub const GPIO_DIN31_0_DIO0_S = @as(c_uint, 0);
pub const GPIO_DIN31_0_DIO0_ONE = @as(c_uint, 0x00000001);
pub const GPIO_DIN31_0_DIO0_ZERO = @as(c_uint, 0x00000000);
pub const GPIO_EVTCFG_EVTEN = @as(c_uint, 0x00000100);
pub const GPIO_EVTCFG_EVTEN_M = @as(c_uint, 0x00000100);
pub const GPIO_EVTCFG_EVTEN_S = @as(c_uint, 8);
pub const GPIO_EVTCFG_EVTEN_EN = @as(c_uint, 0x00000100);
pub const GPIO_EVTCFG_EVTEN_DIS = @as(c_uint, 0x00000000);
pub const GPIO_EVTCFG_DIOSEL_W = @as(c_uint, 6);
pub const GPIO_EVTCFG_DIOSEL_M = @as(c_uint, 0x0000003F);
pub const GPIO_EVTCFG_DIOSEL_S = @as(c_uint, 0);
pub const GPIO_EVTCFG_DIOSEL_MAXIMUM = @as(c_uint, 0x0000003F);
pub const GPIO_EVTCFG_DIOSEL_MINIMUM = @as(c_uint, 0x00000000);
pub const __HW_IOC_H__ = "";
pub const IOC_O_DESC = @as(c_uint, 0x00000000);
pub const IOC_O_DESCEX = @as(c_uint, 0x00000004);
pub const IOC_O_DTB = @as(c_uint, 0x00000064);
pub const IOC_O_IOC0 = @as(c_uint, 0x00000100);
pub const IOC_O_IOC1 = @as(c_uint, 0x00000104);
pub const IOC_O_IOC2 = @as(c_uint, 0x00000108);
pub const IOC_O_IOC3 = @as(c_uint, 0x0000010C);
pub const IOC_O_IOC4 = @as(c_uint, 0x00000110);
pub const IOC_O_IOC5 = @as(c_uint, 0x00000114);
pub const IOC_O_IOC6 = @as(c_uint, 0x00000118);
pub const IOC_O_IOC7 = @as(c_uint, 0x0000011C);
pub const IOC_O_IOC8 = @as(c_uint, 0x00000120);
pub const IOC_O_IOC9 = @as(c_uint, 0x00000124);
pub const IOC_O_IOC10 = @as(c_uint, 0x00000128);
pub const IOC_O_IOC11 = @as(c_uint, 0x0000012C);
pub const IOC_O_IOC12 = @as(c_uint, 0x00000130);
pub const IOC_O_IOC13 = @as(c_uint, 0x00000134);
pub const IOC_O_IOC14 = @as(c_uint, 0x00000138);
pub const IOC_O_IOC15 = @as(c_uint, 0x0000013C);
pub const IOC_O_IOC16 = @as(c_uint, 0x00000140);
pub const IOC_O_IOC17 = @as(c_uint, 0x00000144);
pub const IOC_O_IOC18 = @as(c_uint, 0x00000148);
pub const IOC_O_IOC19 = @as(c_uint, 0x0000014C);
pub const IOC_O_IOC20 = @as(c_uint, 0x00000150);
pub const IOC_O_IOC21 = @as(c_uint, 0x00000154);
pub const IOC_O_IOC22 = @as(c_uint, 0x00000158);
pub const IOC_O_IOC23 = @as(c_uint, 0x0000015C);
pub const IOC_O_IOC24 = @as(c_uint, 0x00000160);
pub const IOC_O_IOC25 = @as(c_uint, 0x00000164);
pub const IOC_O_DTBCFG = @as(c_uint, 0x00000C00);
pub const IOC_O_DTBOE = @as(c_uint, 0x00000C04);
pub const IOC_O_EVTCFG = @as(c_uint, 0x00000C08);
pub const IOC_O_TEST = @as(c_uint, 0x00000C0C);
pub const IOC_O_DTBSTAT = @as(c_uint, 0x00000C10);
pub const IOC_DESC_MODID_W = @as(c_uint, 16);
pub const IOC_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const IOC_DESC_MODID_S = @as(c_uint, 16);
pub const IOC_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const IOC_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const IOC_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const IOC_DESC_INSTIDX_W = @as(c_uint, 4);
pub const IOC_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const IOC_DESC_INSTIDX_S = @as(c_uint, 8);
pub const IOC_DESC_MAJREV_W = @as(c_uint, 4);
pub const IOC_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const IOC_DESC_MAJREV_S = @as(c_uint, 4);
pub const IOC_DESC_MINREV_W = @as(c_uint, 4);
pub const IOC_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const IOC_DESC_MINREV_S = @as(c_uint, 0);
pub const IOC_DESCEX_NUMDTBIO_W = @as(c_uint, 4);
pub const IOC_DESCEX_NUMDTBIO_M = @as(c_uint, 0x0000F000);
pub const IOC_DESCEX_NUMDTBIO_S = @as(c_uint, 12);
pub const IOC_DESCEX_NUMDTBIO_MAXIMUM = @as(c_uint, 0x0000F000);
pub const IOC_DESCEX_NUMDTBIO_MINIMUM = @as(c_uint, 0x00000000);
pub const IOC_DESCEX_NUMHDIO_W = @as(c_uint, 5);
pub const IOC_DESCEX_NUMHDIO_M = @as(c_uint, 0x00000F80);
pub const IOC_DESCEX_NUMHDIO_S = @as(c_uint, 7);
pub const IOC_DESCEX_NUMHDIO_MAXIMUM = @as(c_uint, 0x00000F80);
pub const IOC_DESCEX_NUMHDIO_MINIMUM = @as(c_uint, 0x00000000);
pub const IOC_DESCEX_HDIO = @as(c_uint, 0x00000040);
pub const IOC_DESCEX_HDIO_M = @as(c_uint, 0x00000040);
pub const IOC_DESCEX_HDIO_S = @as(c_uint, 6);
pub const IOC_DESCEX_HDIO_PRESENT = @as(c_uint, 0x00000040);
pub const IOC_DESCEX_HDIO_ABSENT = @as(c_uint, 0x00000000);
pub const IOC_DESCEX_NUMDIO_W = @as(c_uint, 6);
pub const IOC_DESCEX_NUMDIO_M = @as(c_uint, 0x0000003F);
pub const IOC_DESCEX_NUMDIO_S = @as(c_uint, 0);
pub const IOC_DESCEX_NUMDIO_MAXIMUM = @as(c_uint, 0x0000003F);
pub const IOC_DESCEX_NUMDIO_MINIMUM = @as(c_uint, 0x00000000);
pub const IOC_DTB_SEL_W = @as(c_uint, 3);
pub const IOC_DTB_SEL_M = @as(c_uint, 0x00000007);
pub const IOC_DTB_SEL_S = @as(c_uint, 0);
pub const IOC_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC0_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC0_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC0_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC0_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC0_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC0_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC0_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC0_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC0_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC0_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC0_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC0_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC0_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC0_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC0_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC0_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC0_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC0_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC0_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC0_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC0_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC0_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC0_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC0_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC0_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC0_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC0_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC0_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC0_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC0_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC0_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC0_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC0_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC0_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC0_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC0_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC0_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC0_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC0_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC0_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC0_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC0_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC0_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC0_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC0_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC0_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC0_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC0_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC0_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC0_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC1_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC1_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC1_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC1_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC1_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC1_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC1_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC1_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC1_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC1_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC1_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC1_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC1_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC1_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC1_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC1_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC1_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC1_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC1_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC1_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC1_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC1_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC1_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC1_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC1_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC1_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC1_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC1_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC1_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC1_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC1_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC1_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC1_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC1_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC1_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC1_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC1_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC1_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC1_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC1_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC1_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC1_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC1_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC1_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC1_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC1_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC1_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC1_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC1_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC1_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC1_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC2_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC2_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC2_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC2_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC2_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC2_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC2_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC2_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC2_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC2_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC2_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC2_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC2_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC2_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC2_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC2_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC2_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC2_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC2_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC2_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC2_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC2_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC2_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC2_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC2_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC2_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC2_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC2_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC2_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC2_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC2_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC2_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC2_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC2_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC2_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC2_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC2_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC2_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC2_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC2_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC2_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC2_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC2_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC2_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC2_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC2_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC2_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC2_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC2_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC2_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC2_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC3_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC3_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC3_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC3_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC3_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC3_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC3_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC3_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC3_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC3_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC3_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC3_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC3_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC3_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC3_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC3_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC3_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC3_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC3_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC3_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC3_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC3_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC3_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC3_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC3_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC3_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC3_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC3_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC3_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC3_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC3_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC3_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC3_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC3_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC3_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC3_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC3_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC3_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC3_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC3_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC3_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC3_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC3_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC3_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC3_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC3_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC3_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC3_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC3_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC3_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC3_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC4_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC4_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC4_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC4_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC4_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC4_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC4_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC4_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC4_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC4_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC4_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC4_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC4_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC4_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC4_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC4_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC4_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC4_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC4_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC4_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC4_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC4_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC4_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC4_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC4_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC4_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC4_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC4_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC4_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC4_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC4_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC4_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC4_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC4_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC4_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC4_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC4_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC4_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC4_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC4_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC4_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC4_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC4_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC4_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC4_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC4_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC4_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC4_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC4_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC4_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC4_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC5_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC5_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC5_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC5_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC5_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC5_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC5_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC5_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC5_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC5_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC5_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC5_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC5_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC5_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC5_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC5_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC5_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC5_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC5_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC5_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC5_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC5_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC5_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC5_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC5_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC5_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC5_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC5_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC5_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC5_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC5_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC5_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC5_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC5_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC5_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC5_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC5_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC5_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC5_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC5_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC5_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC5_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC5_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC5_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC5_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC5_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC5_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC5_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC5_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC5_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC5_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC6_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC6_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC6_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC6_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC6_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC6_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC6_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC6_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC6_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC6_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC6_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC6_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC6_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC6_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC6_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC6_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC6_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC6_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC6_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC6_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC6_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC6_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC6_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC6_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC6_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC6_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC6_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC6_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC6_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC6_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC6_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC6_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC6_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC6_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC6_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC6_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC6_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC6_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC6_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC6_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC6_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC6_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC6_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC6_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC6_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC6_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC6_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC6_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC6_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC6_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC6_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC7_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC7_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC7_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC7_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC7_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC7_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC7_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC7_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC7_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC7_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC7_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC7_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC7_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC7_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC7_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC7_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC7_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC7_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC7_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC7_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC7_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC7_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC7_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC7_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC7_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC7_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC7_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC7_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC7_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC7_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC7_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC7_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC7_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC7_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC7_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC7_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC7_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC7_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC7_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC7_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC7_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC7_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC7_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC7_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC7_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC7_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC7_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC7_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC7_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC7_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC7_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC8_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC8_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC8_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC8_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC8_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC8_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC8_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC8_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC8_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC8_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC8_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC8_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC8_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC8_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC8_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC8_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC8_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC8_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC8_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC8_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC8_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC8_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC8_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC8_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC8_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC8_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC8_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC8_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC8_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC8_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC8_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC8_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC8_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC8_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC8_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC8_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC8_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC8_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC8_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC8_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC8_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC8_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC8_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC8_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC8_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC8_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC8_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC8_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC8_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC8_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC8_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC9_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC9_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC9_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC9_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC9_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC9_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC9_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC9_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC9_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC9_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC9_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC9_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC9_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC9_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC9_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC9_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC9_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC9_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC9_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC9_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC9_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC9_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC9_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC9_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC9_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC9_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC9_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC9_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC9_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC9_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC9_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC9_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC9_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC9_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC9_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC9_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC9_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC9_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC9_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC9_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC9_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC9_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC9_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC9_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC9_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC9_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC9_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC9_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC9_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC9_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC9_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC10_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC10_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC10_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC10_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC10_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC10_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC10_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC10_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC10_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC10_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC10_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC10_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC10_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC10_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC10_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC10_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC10_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC10_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC10_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC10_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC10_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC10_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC10_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC10_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC10_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC10_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC10_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC10_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC10_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC10_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC10_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC10_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC10_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC10_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC10_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC10_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC10_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC10_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC10_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC10_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC10_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC10_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC10_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC10_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC10_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC10_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC10_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC10_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC10_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC10_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC10_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC11_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC11_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC11_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC11_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC11_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC11_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC11_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC11_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC11_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC11_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC11_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC11_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC11_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC11_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC11_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC11_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC11_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC11_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC11_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC11_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC11_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC11_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC11_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC11_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC11_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC11_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC11_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC11_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC11_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC11_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC11_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC11_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC11_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC11_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC11_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC11_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC11_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC11_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC11_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC11_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC11_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC11_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC11_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC11_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC11_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC11_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC11_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC11_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC11_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC11_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC11_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC12_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC12_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC12_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC12_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC12_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC12_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC12_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC12_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC12_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC12_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC12_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC12_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC12_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC12_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC12_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC12_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC12_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC12_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC12_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC12_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC12_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC12_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC12_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC12_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC12_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC12_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC12_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC12_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC12_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC12_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC12_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC12_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC12_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC12_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC12_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC12_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC12_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC12_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC12_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC12_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC12_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC12_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC12_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC12_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC12_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC12_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC12_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC12_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC12_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC12_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC12_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC12_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC12_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC12_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC12_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC12_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC12_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC12_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC12_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC12_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC12_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC12_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC12_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC12_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC12_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC12_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC12_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC12_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC12_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC13_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC13_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC13_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC13_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC13_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC13_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC13_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC13_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC13_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC13_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC13_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC13_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC13_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC13_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC13_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC13_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC13_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC13_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC13_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC13_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC13_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC13_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC13_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC13_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC13_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC13_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC13_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC13_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC13_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC13_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC13_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC13_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC13_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC13_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC13_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC13_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC13_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC13_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC13_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC13_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC13_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC13_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC13_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC13_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC13_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC13_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC13_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC13_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC13_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC13_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC13_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC14_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC14_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC14_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC14_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC14_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC14_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC14_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC14_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC14_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC14_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC14_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC14_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC14_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC14_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC14_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC14_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC14_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC14_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC14_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC14_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC14_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC14_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC14_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC14_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC14_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC14_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC14_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC14_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC14_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC14_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC14_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC14_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC14_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC14_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC14_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC14_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC14_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC14_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC14_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC14_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC14_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC14_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC14_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC14_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC14_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC14_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC14_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC14_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC14_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC14_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC14_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC15_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC15_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC15_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC15_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC15_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC15_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC15_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC15_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC15_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC15_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC15_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC15_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC15_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC15_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC15_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC15_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC15_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC15_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC15_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC15_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC15_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC15_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC15_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC15_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC15_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC15_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC15_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC15_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC15_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC15_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC15_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC15_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC15_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC15_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC15_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC15_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC15_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC15_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC15_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC15_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC15_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC15_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC15_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC15_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC15_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC15_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC15_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC15_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC15_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC15_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC15_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC16_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC16_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC16_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC16_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC16_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC16_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC16_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC16_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC16_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC16_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC16_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC16_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC16_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC16_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC16_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC16_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC16_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC16_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC16_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC16_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC16_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC16_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC16_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC16_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC16_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC16_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC16_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC16_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC16_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC16_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC16_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC16_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC16_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC16_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC16_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC16_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC16_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC16_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC16_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC16_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC16_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC16_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC16_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC16_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC16_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC16_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC16_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC16_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC16_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC16_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC16_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC16_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC16_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC16_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC16_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC16_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC16_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC16_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC16_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC16_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC16_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC16_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC16_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC16_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC16_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC16_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC16_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC16_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC16_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC17_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC17_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC17_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC17_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC17_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC17_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC17_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC17_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC17_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC17_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC17_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC17_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC17_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC17_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC17_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC17_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC17_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC17_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC17_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC17_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC17_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC17_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC17_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC17_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC17_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC17_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC17_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC17_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC17_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC17_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC17_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC17_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC17_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC17_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC17_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC17_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC17_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC17_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC17_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC17_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC17_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC17_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC17_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC17_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC17_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC17_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC17_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC17_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC17_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC17_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC17_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC17_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC17_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC17_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC17_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC17_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC17_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC17_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC17_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC17_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC17_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC17_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC17_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC17_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC17_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC17_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC17_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC17_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC17_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC18_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC18_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC18_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC18_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC18_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC18_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC18_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC18_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC18_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC18_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC18_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC18_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC18_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC18_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC18_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC18_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC18_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC18_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC18_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC18_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC18_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC18_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC18_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC18_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC18_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC18_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC18_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC18_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC18_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC18_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC18_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC18_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC18_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC18_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC18_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC18_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC18_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC18_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC18_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC18_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC18_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC18_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC18_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC18_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC18_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC18_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC18_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC18_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC18_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC18_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC18_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC18_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC18_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC18_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC18_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC18_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC18_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC18_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC18_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC18_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC18_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC18_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC18_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC18_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC18_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC18_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC18_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC18_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC18_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC19_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC19_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC19_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC19_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC19_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC19_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC19_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC19_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC19_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC19_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC19_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC19_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC19_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC19_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC19_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC19_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC19_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC19_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC19_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC19_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC19_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC19_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC19_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC19_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC19_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC19_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC19_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC19_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC19_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC19_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC19_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC19_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC19_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC19_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC19_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC19_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC19_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC19_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC19_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC19_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC19_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC19_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC19_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC19_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC19_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC19_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC19_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC19_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC19_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC19_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC19_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC19_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC19_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC19_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC19_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC19_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC19_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC19_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC19_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC19_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC19_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC19_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC19_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC19_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC19_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC19_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC19_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC19_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC19_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC20_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC20_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC20_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC20_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC20_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC20_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC20_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC20_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC20_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC20_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC20_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC20_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC20_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC20_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC20_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC20_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC20_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC20_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC20_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC20_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC20_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC20_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC20_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC20_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC20_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC20_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC20_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC20_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC20_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC20_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC20_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC20_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC20_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC20_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC20_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC20_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC20_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC20_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC20_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC20_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC20_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC20_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC20_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC20_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC20_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC20_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC20_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC20_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC20_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC20_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC20_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC21_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC21_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC21_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC21_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC21_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC21_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC21_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC21_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC21_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC21_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC21_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC21_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC21_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC21_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC21_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC21_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC21_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC21_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC21_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC21_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC21_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC21_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC21_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC21_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC21_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC21_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC21_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC21_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC21_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC21_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC21_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC21_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC21_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC21_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC21_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC21_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC21_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC21_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC21_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC21_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC21_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC21_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC21_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC21_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC21_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC21_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC21_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC21_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC21_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC21_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC21_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC22_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC22_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC22_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC22_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC22_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC22_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC22_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC22_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC22_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC22_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC22_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC22_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC22_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC22_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC22_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC22_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC22_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC22_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC22_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC22_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC22_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC22_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC22_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC22_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC22_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC22_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC22_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC22_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC22_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC22_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC22_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC22_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC22_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC22_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC22_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC22_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC22_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC22_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC22_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC22_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC22_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC22_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC22_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC22_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC22_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC22_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC22_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC22_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC22_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC22_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC22_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC23_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC23_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC23_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC23_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC23_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC23_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC23_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC23_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC23_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC23_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC23_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC23_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC23_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC23_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC23_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC23_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC23_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC23_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC23_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC23_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC23_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC23_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC23_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC23_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC23_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC23_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC23_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC23_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC23_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC23_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC23_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC23_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC23_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC23_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC23_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC23_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC23_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC23_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC23_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC23_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC23_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC23_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC23_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC23_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC23_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC23_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC23_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC23_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC23_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC23_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC23_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC24_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC24_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC24_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC24_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC24_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC24_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC24_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC24_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC24_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC24_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC24_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC24_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC24_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC24_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC24_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC24_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC24_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC24_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC24_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC24_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC24_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC24_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC24_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC24_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC24_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC24_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC24_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC24_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC24_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC24_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC24_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC24_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC24_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC24_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC24_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC24_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC24_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC24_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC24_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC24_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC24_SLEWRED = @as(c_uint, 0x00001000);
pub const IOC_IOC24_SLEWRED_M = @as(c_uint, 0x00001000);
pub const IOC_IOC24_SLEWRED_S = @as(c_uint, 12);
pub const IOC_IOC24_SLEWRED_REDUCED = @as(c_uint, 0x00001000);
pub const IOC_IOC24_SLEWRED_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC24_IOCURR_W = @as(c_uint, 2);
pub const IOC_IOC24_IOCURR_M = @as(c_uint, 0x00000C00);
pub const IOC_IOC24_IOCURR_S = @as(c_uint, 10);
pub const IOC_IOC24_IOCURR_CUR_8MA = @as(c_uint, 0x00000800);
pub const IOC_IOC24_IOCURR_CUR_4MA = @as(c_uint, 0x00000400);
pub const IOC_IOC24_IOCURR_CUR_2MA = @as(c_uint, 0x00000000);
pub const IOC_IOC24_IOSTR_W = @as(c_uint, 2);
pub const IOC_IOC24_IOSTR_M = @as(c_uint, 0x00000300);
pub const IOC_IOC24_IOSTR_S = @as(c_uint, 8);
pub const IOC_IOC24_IOSTR_MAX = @as(c_uint, 0x00000300);
pub const IOC_IOC24_IOSTR_MEDIUM = @as(c_uint, 0x00000200);
pub const IOC_IOC24_IOSTR_MIN = @as(c_uint, 0x00000100);
pub const IOC_IOC24_IOSTR_AUTO = @as(c_uint, 0x00000000);
pub const IOC_IOC24_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC24_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC24_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC24_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC24_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC24_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC24_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC24_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC24_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC24_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC24_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_IOC25_HYSTEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC25_HYSTEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC25_HYSTEN_S = @as(c_uint, 30);
pub const IOC_IOC25_HYSTEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const IOC_IOC25_HYSTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_INPEN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC25_INPEN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC25_INPEN_S = @as(c_uint, 29);
pub const IOC_IOC25_INPEN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const IOC_IOC25_INPEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_IOMODE_W = @as(c_uint, 3);
pub const IOC_IOC25_IOMODE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const IOC_IOC25_IOMODE_S = @as(c_uint, 24);
pub const IOC_IOC25_IOMODE_OPENS_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const IOC_IOC25_IOMODE_OPENS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const IOC_IOC25_IOMODE_OPEND_INV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const IOC_IOC25_IOMODE_OPEND = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const IOC_IOC25_IOMODE_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const IOC_IOC25_IOMODE_NORMAL = @as(c_uint, 0x00000000);
pub const IOC_IOC25_WUCFGSD_W = @as(c_uint, 2);
pub const IOC_IOC25_WUCFGSD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC25_WUCFGSD_S = @as(c_uint, 20);
pub const IOC_IOC25_WUCFGSD_WAKE_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00300000, .hex);
pub const IOC_IOC25_WUCFGSD_WAKE_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const IOC_IOC25_WUCFGSD_DIS_1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const IOC_IOC25_WUCFGSD_DIS_0 = @as(c_uint, 0x00000000);
pub const IOC_IOC25_WUENSB = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC25_WUENSB_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC25_WUENSB_S = @as(c_uint, 18);
pub const IOC_IOC25_WUENSB_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_IOC25_WUENSB_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_EDGEDET_W = @as(c_uint, 2);
pub const IOC_IOC25_EDGEDET_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC25_EDGEDET_S = @as(c_uint, 16);
pub const IOC_IOC25_EDGEDET_EDGE_BOTH = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_IOC25_EDGEDET_EDGE_POS = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_IOC25_EDGEDET_EDGE_NEG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_IOC25_EDGEDET_EDGE_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_PULLCTL_W = @as(c_uint, 2);
pub const IOC_IOC25_PULLCTL_M = @as(c_uint, 0x00006000);
pub const IOC_IOC25_PULLCTL_S = @as(c_uint, 13);
pub const IOC_IOC25_PULLCTL_PULL_UP = @as(c_uint, 0x00004000);
pub const IOC_IOC25_PULLCTL_PULL_DOWN = @as(c_uint, 0x00002000);
pub const IOC_IOC25_PULLCTL_PULL_DIS = @as(c_uint, 0x00000000);
pub const IOC_IOC25_PORTCFG_W = @as(c_uint, 3);
pub const IOC_IOC25_PORTCFG_M = @as(c_uint, 0x00000007);
pub const IOC_IOC25_PORTCFG_S = @as(c_uint, 0);
pub const IOC_IOC25_PORTCFG_DTB = @as(c_uint, 0x00000007);
pub const IOC_IOC25_PORTCFG_ANA = @as(c_uint, 0x00000006);
pub const IOC_IOC25_PORTCFG_PFUNC5 = @as(c_uint, 0x00000005);
pub const IOC_IOC25_PORTCFG_PFUNC4 = @as(c_uint, 0x00000004);
pub const IOC_IOC25_PORTCFG_PFUNC3 = @as(c_uint, 0x00000003);
pub const IOC_IOC25_PORTCFG_PFUNC2 = @as(c_uint, 0x00000002);
pub const IOC_IOC25_PORTCFG_PFUNC1 = @as(c_uint, 0x00000001);
pub const IOC_IOC25_PORTCFG_BASE = @as(c_uint, 0x00000000);
pub const IOC_DTBCFG_DTB0DIV = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const IOC_DTBCFG_DTB0DIV_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const IOC_DTBCFG_DTB0DIV_S = @as(c_uint, 23);
pub const IOC_DTBCFG_DTB0DIV_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const IOC_DTBCFG_DTB0DIV_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBCFG_PADSEL_W = @as(c_uint, 3);
pub const IOC_DTBCFG_PADSEL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const IOC_DTBCFG_PADSEL_S = @as(c_uint, 16);
pub const IOC_DTBCFG_PADSEL_DTB2TO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hex);
pub const IOC_DTBCFG_PADSEL_DTB5TO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const IOC_DTBCFG_PADSEL_DTB8TO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const IOC_DTBCFG_PADSEL_DTB11TO9 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const IOC_DTBCFG_PADSEL_DTB14TO12 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const IOC_DTBCFG_PADSEL_DTB15TO13 = @as(c_uint, 0x00000000);
pub const IOC_DTBCFG_ULLSEL_W = @as(c_uint, 5);
pub const IOC_DTBCFG_ULLSEL_M = @as(c_uint, 0x00001F00);
pub const IOC_DTBCFG_ULLSEL_S = @as(c_uint, 8);
pub const IOC_DTBCFG_SVTSEL_W = @as(c_uint, 5);
pub const IOC_DTBCFG_SVTSEL_M = @as(c_uint, 0x0000001F);
pub const IOC_DTBCFG_SVTSEL_S = @as(c_uint, 0);
pub const IOC_DTBOE_EN15 = @as(c_uint, 0x00008000);
pub const IOC_DTBOE_EN15_M = @as(c_uint, 0x00008000);
pub const IOC_DTBOE_EN15_S = @as(c_uint, 15);
pub const IOC_DTBOE_EN15_EN = @as(c_uint, 0x00008000);
pub const IOC_DTBOE_EN15_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN14 = @as(c_uint, 0x00004000);
pub const IOC_DTBOE_EN14_M = @as(c_uint, 0x00004000);
pub const IOC_DTBOE_EN14_S = @as(c_uint, 14);
pub const IOC_DTBOE_EN14_EN = @as(c_uint, 0x00004000);
pub const IOC_DTBOE_EN14_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN13 = @as(c_uint, 0x00002000);
pub const IOC_DTBOE_EN13_M = @as(c_uint, 0x00002000);
pub const IOC_DTBOE_EN13_S = @as(c_uint, 13);
pub const IOC_DTBOE_EN13_EN = @as(c_uint, 0x00002000);
pub const IOC_DTBOE_EN13_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN12 = @as(c_uint, 0x00001000);
pub const IOC_DTBOE_EN12_M = @as(c_uint, 0x00001000);
pub const IOC_DTBOE_EN12_S = @as(c_uint, 12);
pub const IOC_DTBOE_EN12_EN = @as(c_uint, 0x00001000);
pub const IOC_DTBOE_EN12_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN11 = @as(c_uint, 0x00000800);
pub const IOC_DTBOE_EN11_M = @as(c_uint, 0x00000800);
pub const IOC_DTBOE_EN11_S = @as(c_uint, 11);
pub const IOC_DTBOE_EN11_EN = @as(c_uint, 0x00000800);
pub const IOC_DTBOE_EN11_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN10 = @as(c_uint, 0x00000400);
pub const IOC_DTBOE_EN10_M = @as(c_uint, 0x00000400);
pub const IOC_DTBOE_EN10_S = @as(c_uint, 10);
pub const IOC_DTBOE_EN10_EN = @as(c_uint, 0x00000400);
pub const IOC_DTBOE_EN10_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN9 = @as(c_uint, 0x00000200);
pub const IOC_DTBOE_EN9_M = @as(c_uint, 0x00000200);
pub const IOC_DTBOE_EN9_S = @as(c_uint, 9);
pub const IOC_DTBOE_EN9_EN = @as(c_uint, 0x00000200);
pub const IOC_DTBOE_EN9_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN8 = @as(c_uint, 0x00000100);
pub const IOC_DTBOE_EN8_M = @as(c_uint, 0x00000100);
pub const IOC_DTBOE_EN8_S = @as(c_uint, 8);
pub const IOC_DTBOE_EN8_EN = @as(c_uint, 0x00000100);
pub const IOC_DTBOE_EN8_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN7 = @as(c_uint, 0x00000080);
pub const IOC_DTBOE_EN7_M = @as(c_uint, 0x00000080);
pub const IOC_DTBOE_EN7_S = @as(c_uint, 7);
pub const IOC_DTBOE_EN7_EN = @as(c_uint, 0x00000080);
pub const IOC_DTBOE_EN7_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN6 = @as(c_uint, 0x00000040);
pub const IOC_DTBOE_EN6_M = @as(c_uint, 0x00000040);
pub const IOC_DTBOE_EN6_S = @as(c_uint, 6);
pub const IOC_DTBOE_EN6_EN = @as(c_uint, 0x00000040);
pub const IOC_DTBOE_EN6_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN5 = @as(c_uint, 0x00000020);
pub const IOC_DTBOE_EN5_M = @as(c_uint, 0x00000020);
pub const IOC_DTBOE_EN5_S = @as(c_uint, 5);
pub const IOC_DTBOE_EN5_EN = @as(c_uint, 0x00000020);
pub const IOC_DTBOE_EN5_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN4 = @as(c_uint, 0x00000010);
pub const IOC_DTBOE_EN4_M = @as(c_uint, 0x00000010);
pub const IOC_DTBOE_EN4_S = @as(c_uint, 4);
pub const IOC_DTBOE_EN4_EN = @as(c_uint, 0x00000010);
pub const IOC_DTBOE_EN4_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN3 = @as(c_uint, 0x00000008);
pub const IOC_DTBOE_EN3_M = @as(c_uint, 0x00000008);
pub const IOC_DTBOE_EN3_S = @as(c_uint, 3);
pub const IOC_DTBOE_EN3_EN = @as(c_uint, 0x00000008);
pub const IOC_DTBOE_EN3_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN2 = @as(c_uint, 0x00000004);
pub const IOC_DTBOE_EN2_M = @as(c_uint, 0x00000004);
pub const IOC_DTBOE_EN2_S = @as(c_uint, 2);
pub const IOC_DTBOE_EN2_EN = @as(c_uint, 0x00000004);
pub const IOC_DTBOE_EN2_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN1 = @as(c_uint, 0x00000002);
pub const IOC_DTBOE_EN1_M = @as(c_uint, 0x00000002);
pub const IOC_DTBOE_EN1_S = @as(c_uint, 1);
pub const IOC_DTBOE_EN1_EN = @as(c_uint, 0x00000002);
pub const IOC_DTBOE_EN1_DIS = @as(c_uint, 0x00000000);
pub const IOC_DTBOE_EN0 = @as(c_uint, 0x00000001);
pub const IOC_DTBOE_EN0_M = @as(c_uint, 0x00000001);
pub const IOC_DTBOE_EN0_S = @as(c_uint, 0);
pub const IOC_DTBOE_EN0_EN = @as(c_uint, 0x00000001);
pub const IOC_DTBOE_EN0_DIS = @as(c_uint, 0x00000000);
pub const IOC_EVTCFG_EVTIFG = @as(c_uint, 0x00000100);
pub const IOC_EVTCFG_EVTIFG_M = @as(c_uint, 0x00000100);
pub const IOC_EVTCFG_EVTIFG_S = @as(c_uint, 8);
pub const IOC_EVTCFG_EVTIFG_SET = @as(c_uint, 0x00000100);
pub const IOC_EVTCFG_EVTIFG_CLR = @as(c_uint, 0x00000000);
pub const IOC_EVTCFG_EVTEN = @as(c_uint, 0x00000080);
pub const IOC_EVTCFG_EVTEN_M = @as(c_uint, 0x00000080);
pub const IOC_EVTCFG_EVTEN_S = @as(c_uint, 7);
pub const IOC_EVTCFG_EVTEN_EN = @as(c_uint, 0x00000080);
pub const IOC_EVTCFG_EVTEN_DIS = @as(c_uint, 0x00000000);
pub const IOC_EVTCFG_DIOSEL_W = @as(c_uint, 6);
pub const IOC_EVTCFG_DIOSEL_M = @as(c_uint, 0x0000003F);
pub const IOC_EVTCFG_DIOSEL_S = @as(c_uint, 0);
pub const IOC_TEST_SEL = @as(c_uint, 0x00000001);
pub const IOC_TEST_SEL_M = @as(c_uint, 0x00000001);
pub const IOC_TEST_SEL_S = @as(c_uint, 0);
pub const IOC_TEST_SEL_HI = @as(c_uint, 0x00000001);
pub const IOC_TEST_SEL_LO = @as(c_uint, 0x00000000);
pub const IOC_DTBSTAT_VAL_W = @as(c_uint, 16);
pub const IOC_DTBSTAT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const IOC_DTBSTAT_VAL_S = @as(c_uint, 0);
pub const __HW_LGPT_H__ = "";
pub const LGPT_O_DESC = @as(c_uint, 0x00000000);
pub const LGPT_O_DESCEX = @as(c_uint, 0x00000004);
pub const LGPT_O_STARTCFG = @as(c_uint, 0x00000008);
pub const LGPT_O_CTL = @as(c_uint, 0x0000000C);
pub const LGPT_O_OUTCTL = @as(c_uint, 0x00000010);
pub const LGPT_O_CNTR = @as(c_uint, 0x00000014);
pub const LGPT_O_PRECFG = @as(c_uint, 0x00000018);
pub const LGPT_O_PREEVENT = @as(c_uint, 0x0000001C);
pub const LGPT_O_CHFILT = @as(c_uint, 0x00000020);
pub const LGPT_O_QDECSTAT = @as(c_uint, 0x00000034);
pub const LGPT_O_IRGEN = @as(c_uint, 0x00000038);
pub const LGPT_O_DMA = @as(c_uint, 0x0000003C);
pub const LGPT_O_DMARW = @as(c_uint, 0x00000040);
pub const LGPT_O_ADCTRG = @as(c_uint, 0x00000044);
pub const LGPT_O_IOCTL = @as(c_uint, 0x00000048);
pub const LGPT_O_IMASK = @as(c_uint, 0x00000068);
pub const LGPT_O_RIS = @as(c_uint, 0x0000006C);
pub const LGPT_O_MIS = @as(c_uint, 0x00000070);
pub const LGPT_O_ISET = @as(c_uint, 0x00000074);
pub const LGPT_O_ICLR = @as(c_uint, 0x00000078);
pub const LGPT_O_IMSET = @as(c_uint, 0x0000007C);
pub const LGPT_O_IMCLR = @as(c_uint, 0x00000080);
pub const LGPT_O_EMU = @as(c_uint, 0x00000084);
pub const LGPT_O_C0CFG = @as(c_uint, 0x000000C0);
pub const LGPT_O_C1CFG = @as(c_uint, 0x000000C4);
pub const LGPT_O_C2CFG = @as(c_uint, 0x000000C8);
pub const LGPT_O_PTGT = @as(c_uint, 0x000000FC);
pub const LGPT_O_PC0CC = @as(c_uint, 0x00000100);
pub const LGPT_O_PC1CC = @as(c_uint, 0x00000104);
pub const LGPT_O_PC2CC = @as(c_uint, 0x00000108);
pub const LGPT_O_TGT = @as(c_uint, 0x0000013C);
pub const LGPT_O_C0CC = @as(c_uint, 0x00000140);
pub const LGPT_O_C1CC = @as(c_uint, 0x00000144);
pub const LGPT_O_C2CC = @as(c_uint, 0x00000148);
pub const LGPT_O_PTGTNC = @as(c_uint, 0x0000017C);
pub const LGPT_O_PC0CCNC = @as(c_uint, 0x00000180);
pub const LGPT_O_PC1CCNC = @as(c_uint, 0x00000184);
pub const LGPT_O_PC2CCNC = @as(c_uint, 0x00000188);
pub const LGPT_O_TGTNC = @as(c_uint, 0x000001BC);
pub const LGPT_O_C0CCNC = @as(c_uint, 0x000001C0);
pub const LGPT_O_C1CCNC = @as(c_uint, 0x000001C4);
pub const LGPT_O_C2CCNC = @as(c_uint, 0x000001C8);
pub const LGPT_DESC_MODID_W = @as(c_uint, 16);
pub const LGPT_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LGPT_DESC_MODID_S = @as(c_uint, 16);
pub const LGPT_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const LGPT_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const LGPT_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const LGPT_DESC_INSTIDX_W = @as(c_uint, 4);
pub const LGPT_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const LGPT_DESC_INSTIDX_S = @as(c_uint, 8);
pub const LGPT_DESC_MAJREV_W = @as(c_uint, 4);
pub const LGPT_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const LGPT_DESC_MAJREV_S = @as(c_uint, 4);
pub const LGPT_DESC_MINREV_W = @as(c_uint, 4);
pub const LGPT_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const LGPT_DESC_MINREV_S = @as(c_uint, 0);
pub const LGPT_DESCEX_HIR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LGPT_DESCEX_HIR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LGPT_DESCEX_HIR_S = @as(c_uint, 19);
pub const LGPT_DESCEX_HDBF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LGPT_DESCEX_HDBF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LGPT_DESCEX_HDBF_S = @as(c_uint, 18);
pub const LGPT_DESCEX_PREW_W = @as(c_uint, 4);
pub const LGPT_DESCEX_PREW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0003C000, .hex);
pub const LGPT_DESCEX_PREW_S = @as(c_uint, 14);
pub const LGPT_DESCEX_HQDEC = @as(c_uint, 0x00002000);
pub const LGPT_DESCEX_HQDEC_M = @as(c_uint, 0x00002000);
pub const LGPT_DESCEX_HQDEC_S = @as(c_uint, 13);
pub const LGPT_DESCEX_HCIF = @as(c_uint, 0x00001000);
pub const LGPT_DESCEX_HCIF_M = @as(c_uint, 0x00001000);
pub const LGPT_DESCEX_HCIF_S = @as(c_uint, 12);
pub const LGPT_DESCEX_CIFS_W = @as(c_uint, 4);
pub const LGPT_DESCEX_CIFS_M = @as(c_uint, 0x00000F00);
pub const LGPT_DESCEX_CIFS_S = @as(c_uint, 8);
pub const LGPT_DESCEX_HDMA = @as(c_uint, 0x00000080);
pub const LGPT_DESCEX_HDMA_M = @as(c_uint, 0x00000080);
pub const LGPT_DESCEX_HDMA_S = @as(c_uint, 7);
pub const LGPT_DESCEX_HINT = @as(c_uint, 0x00000040);
pub const LGPT_DESCEX_HINT_M = @as(c_uint, 0x00000040);
pub const LGPT_DESCEX_HINT_S = @as(c_uint, 6);
pub const LGPT_DESCEX_CNTRW_W = @as(c_uint, 2);
pub const LGPT_DESCEX_CNTRW_M = @as(c_uint, 0x00000030);
pub const LGPT_DESCEX_CNTRW_S = @as(c_uint, 4);
pub const LGPT_DESCEX_CNTRW_RESERVED = @as(c_uint, 0x00000030);
pub const LGPT_DESCEX_CNTRW_CNTR32 = @as(c_uint, 0x00000020);
pub const LGPT_DESCEX_CNTRW_CNTR24 = @as(c_uint, 0x00000010);
pub const LGPT_DESCEX_CNTRW_CNTR16 = @as(c_uint, 0x00000000);
pub const LGPT_DESCEX_NCH_W = @as(c_uint, 4);
pub const LGPT_DESCEX_NCH_M = @as(c_uint, 0x0000000F);
pub const LGPT_DESCEX_NCH_S = @as(c_uint, 0);
pub const LGPT_STARTCFG_LGPT_W = @as(c_uint, 2);
pub const LGPT_STARTCFG_LGPT_M = @as(c_uint, 0x00000003);
pub const LGPT_STARTCFG_LGPT_S = @as(c_uint, 0);
pub const LGPT_STARTCFG_LGPT_EV_SYNC = @as(c_uint, 0x00000000);
pub const LGPT_CTL_C2RST = @as(c_uint, 0x00000400);
pub const LGPT_CTL_C2RST_M = @as(c_uint, 0x00000400);
pub const LGPT_CTL_C2RST_S = @as(c_uint, 10);
pub const LGPT_CTL_C2RST_RST = @as(c_uint, 0x00000400);
pub const LGPT_CTL_C2RST_NOEFF = @as(c_uint, 0x00000000);
pub const LGPT_CTL_C1RST = @as(c_uint, 0x00000200);
pub const LGPT_CTL_C1RST_M = @as(c_uint, 0x00000200);
pub const LGPT_CTL_C1RST_S = @as(c_uint, 9);
pub const LGPT_CTL_C1RST_RST = @as(c_uint, 0x00000200);
pub const LGPT_CTL_C1RST_NOEFF = @as(c_uint, 0x00000000);
pub const LGPT_CTL_C0RST = @as(c_uint, 0x00000100);
pub const LGPT_CTL_C0RST_M = @as(c_uint, 0x00000100);
pub const LGPT_CTL_C0RST_S = @as(c_uint, 8);
pub const LGPT_CTL_C0RST_RST = @as(c_uint, 0x00000100);
pub const LGPT_CTL_C0RST_NOEFF = @as(c_uint, 0x00000000);
pub const LGPT_CTL_INTP = @as(c_uint, 0x00000020);
pub const LGPT_CTL_INTP_M = @as(c_uint, 0x00000020);
pub const LGPT_CTL_INTP_S = @as(c_uint, 5);
pub const LGPT_CTL_INTP_LATE = @as(c_uint, 0x00000020);
pub const LGPT_CTL_INTP_EARLY = @as(c_uint, 0x00000000);
pub const LGPT_CTL_CMPDIR_W = @as(c_uint, 2);
pub const LGPT_CTL_CMPDIR_M = @as(c_uint, 0x00000018);
pub const LGPT_CTL_CMPDIR_S = @as(c_uint, 3);
pub const LGPT_CTL_CMPDIR_RESERVED = @as(c_uint, 0x00000018);
pub const LGPT_CTL_CMPDIR_DOWN = @as(c_uint, 0x00000010);
pub const LGPT_CTL_CMPDIR_UP = @as(c_uint, 0x00000008);
pub const LGPT_CTL_CMPDIR_BOTH = @as(c_uint, 0x00000000);
pub const LGPT_CTL_MODE_W = @as(c_uint, 3);
pub const LGPT_CTL_MODE_M = @as(c_uint, 0x00000007);
pub const LGPT_CTL_MODE_S = @as(c_uint, 0);
pub const LGPT_CTL_MODE_SYNC_UPDWN_PER = @as(c_uint, 0x00000007);
pub const LGPT_CTL_MODE_SYNC_UP_PER = @as(c_uint, 0x00000006);
pub const LGPT_CTL_MODE_SYNC_UP_ONCE = @as(c_uint, 0x00000005);
pub const LGPT_CTL_MODE_QDEC = @as(c_uint, 0x00000004);
pub const LGPT_CTL_MODE_UPDWN_PER = @as(c_uint, 0x00000003);
pub const LGPT_CTL_MODE_UP_PER = @as(c_uint, 0x00000002);
pub const LGPT_CTL_MODE_UP_ONCE = @as(c_uint, 0x00000001);
pub const LGPT_CTL_MODE_DIS = @as(c_uint, 0x00000000);
pub const LGPT_OUTCTL_SETOUT2 = @as(c_uint, 0x00000020);
pub const LGPT_OUTCTL_SETOUT2_M = @as(c_uint, 0x00000020);
pub const LGPT_OUTCTL_SETOUT2_S = @as(c_uint, 5);
pub const LGPT_OUTCTL_CLROUT2 = @as(c_uint, 0x00000010);
pub const LGPT_OUTCTL_CLROUT2_M = @as(c_uint, 0x00000010);
pub const LGPT_OUTCTL_CLROUT2_S = @as(c_uint, 4);
pub const LGPT_OUTCTL_SETOUT1 = @as(c_uint, 0x00000008);
pub const LGPT_OUTCTL_SETOUT1_M = @as(c_uint, 0x00000008);
pub const LGPT_OUTCTL_SETOUT1_S = @as(c_uint, 3);
pub const LGPT_OUTCTL_CLROUT1 = @as(c_uint, 0x00000004);
pub const LGPT_OUTCTL_CLROUT1_M = @as(c_uint, 0x00000004);
pub const LGPT_OUTCTL_CLROUT1_S = @as(c_uint, 2);
pub const LGPT_OUTCTL_SETOUT0 = @as(c_uint, 0x00000002);
pub const LGPT_OUTCTL_SETOUT0_M = @as(c_uint, 0x00000002);
pub const LGPT_OUTCTL_SETOUT0_S = @as(c_uint, 1);
pub const LGPT_OUTCTL_CLROUT0 = @as(c_uint, 0x00000001);
pub const LGPT_OUTCTL_CLROUT0_M = @as(c_uint, 0x00000001);
pub const LGPT_OUTCTL_CLROUT0_S = @as(c_uint, 0);
pub const LGPT_CNTR_VAL_W = @as(c_uint, 16);
pub const LGPT_CNTR_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_CNTR_VAL_S = @as(c_uint, 0);
pub const LGPT_PRECFG_TICKDIV_W = @as(c_uint, 8);
pub const LGPT_PRECFG_TICKDIV_M = @as(c_uint, 0x0000FF00);
pub const LGPT_PRECFG_TICKDIV_S = @as(c_uint, 8);
pub const LGPT_PRECFG_TICKSRC_W = @as(c_uint, 2);
pub const LGPT_PRECFG_TICKSRC_M = @as(c_uint, 0x00000003);
pub const LGPT_PRECFG_TICKSRC_S = @as(c_uint, 0);
pub const LGPT_PRECFG_TICKSRC_BOTH_TICK = @as(c_uint, 0x00000003);
pub const LGPT_PRECFG_TICKSRC_FALL_TICK = @as(c_uint, 0x00000002);
pub const LGPT_PRECFG_TICKSRC_RISE_TICK = @as(c_uint, 0x00000001);
pub const LGPT_PRECFG_TICKSRC_CLK = @as(c_uint, 0x00000000);
pub const LGPT_PREEVENT_VAL_W = @as(c_uint, 8);
pub const LGPT_PREEVENT_VAL_M = @as(c_uint, 0x000000FF);
pub const LGPT_PREEVENT_VAL_S = @as(c_uint, 0);
pub const LGPT_CHFILT_LOAD_W = @as(c_uint, 8);
pub const LGPT_CHFILT_LOAD_M = @as(c_uint, 0x0000FF00);
pub const LGPT_CHFILT_LOAD_S = @as(c_uint, 8);
pub const LGPT_CHFILT_MODE_W = @as(c_uint, 2);
pub const LGPT_CHFILT_MODE_M = @as(c_uint, 0x00000003);
pub const LGPT_CHFILT_MODE_S = @as(c_uint, 0);
pub const LGPT_CHFILT_MODE_TIMERCLK = @as(c_uint, 0x00000003);
pub const LGPT_CHFILT_MODE_TICKSRC = @as(c_uint, 0x00000002);
pub const LGPT_CHFILT_MODE_CLK = @as(c_uint, 0x00000001);
pub const LGPT_CHFILT_MODE_BYPASS = @as(c_uint, 0x00000000);
pub const LGPT_QDECSTAT_DBLTRANS = @as(c_uint, 0x00000002);
pub const LGPT_QDECSTAT_DBLTRANS_M = @as(c_uint, 0x00000002);
pub const LGPT_QDECSTAT_DBLTRANS_S = @as(c_uint, 1);
pub const LGPT_QDECSTAT_DBLTRANS_DBL = @as(c_uint, 0x00000002);
pub const LGPT_QDECSTAT_DBLTRANS_NONE = @as(c_uint, 0x00000000);
pub const LGPT_QDECSTAT_QDIR = @as(c_uint, 0x00000001);
pub const LGPT_QDECSTAT_QDIR_M = @as(c_uint, 0x00000001);
pub const LGPT_QDECSTAT_QDIR_S = @as(c_uint, 0);
pub const LGPT_QDECSTAT_QDIR_DOWN = @as(c_uint, 0x00000001);
pub const LGPT_QDECSTAT_QDIR_UP = @as(c_uint, 0x00000000);
pub const LGPT_IRGEN_CTL = @as(c_uint, 0x00000001);
pub const LGPT_IRGEN_CTL_M = @as(c_uint, 0x00000001);
pub const LGPT_IRGEN_CTL_S = @as(c_uint, 0);
pub const LGPT_IRGEN_CTL_EN = @as(c_uint, 0x00000001);
pub const LGPT_IRGEN_CTL_DIS = @as(c_uint, 0x00000000);
pub const LGPT_DMA_RWCNTR_W = @as(c_uint, 4);
pub const LGPT_DMA_RWCNTR_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LGPT_DMA_RWCNTR_S = @as(c_uint, 16);
pub const LGPT_DMA_RWADDR_W = @as(c_uint, 7);
pub const LGPT_DMA_RWADDR_M = @as(c_uint, 0x00007F00);
pub const LGPT_DMA_RWADDR_S = @as(c_uint, 8);
pub const LGPT_DMA_REQ_W = @as(c_uint, 4);
pub const LGPT_DMA_REQ_M = @as(c_uint, 0x0000000F);
pub const LGPT_DMA_REQ_S = @as(c_uint, 0);
pub const LGPT_DMA_REQ_C11CC = @as(c_uint, 0x0000000F);
pub const LGPT_DMA_REQ_C10CC = @as(c_uint, 0x0000000E);
pub const LGPT_DMA_REQ_C9CC = @as(c_uint, 0x0000000D);
pub const LGPT_DMA_REQ_C8CC = @as(c_uint, 0x0000000C);
pub const LGPT_DMA_REQ_C7CC = @as(c_uint, 0x0000000B);
pub const LGPT_DMA_REQ_C6CC = @as(c_uint, 0x0000000A);
pub const LGPT_DMA_REQ_C5CC = @as(c_uint, 0x00000009);
pub const LGPT_DMA_REQ_C4CC = @as(c_uint, 0x00000008);
pub const LGPT_DMA_REQ_C3CC = @as(c_uint, 0x00000007);
pub const LGPT_DMA_REQ_C2CC = @as(c_uint, 0x00000006);
pub const LGPT_DMA_REQ_C1CC = @as(c_uint, 0x00000005);
pub const LGPT_DMA_REQ_C0CC = @as(c_uint, 0x00000004);
pub const LGPT_DMA_REQ_FAULT = @as(c_uint, 0x00000003);
pub const LGPT_DMA_REQ_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_DMA_REQ_TGT = @as(c_uint, 0x00000001);
pub const LGPT_DMA_REQ_DIS = @as(c_uint, 0x00000000);
pub const LGPT_DMARW_VAL_W = @as(c_uint, 16);
pub const LGPT_DMARW_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_DMARW_VAL_S = @as(c_uint, 0);
pub const LGPT_ADCTRG_SRC_W = @as(c_uint, 4);
pub const LGPT_ADCTRG_SRC_M = @as(c_uint, 0x0000000F);
pub const LGPT_ADCTRG_SRC_S = @as(c_uint, 0);
pub const LGPT_ADCTRG_SRC_C11CC = @as(c_uint, 0x0000000F);
pub const LGPT_ADCTRG_SRC_C10CC = @as(c_uint, 0x0000000E);
pub const LGPT_ADCTRG_SRC_C9CC = @as(c_uint, 0x0000000D);
pub const LGPT_ADCTRG_SRC_C8CC = @as(c_uint, 0x0000000C);
pub const LGPT_ADCTRG_SRC_C7CC = @as(c_uint, 0x0000000B);
pub const LGPT_ADCTRG_SRC_C6CC = @as(c_uint, 0x0000000A);
pub const LGPT_ADCTRG_SRC_C5CC = @as(c_uint, 0x00000009);
pub const LGPT_ADCTRG_SRC_C4CC = @as(c_uint, 0x00000008);
pub const LGPT_ADCTRG_SRC_C3CC = @as(c_uint, 0x00000007);
pub const LGPT_ADCTRG_SRC_C2CC = @as(c_uint, 0x00000006);
pub const LGPT_ADCTRG_SRC_C1CC = @as(c_uint, 0x00000005);
pub const LGPT_ADCTRG_SRC_C0CC = @as(c_uint, 0x00000004);
pub const LGPT_ADCTRG_SRC_FAULT = @as(c_uint, 0x00000003);
pub const LGPT_ADCTRG_SRC_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_ADCTRG_SRC_TGT = @as(c_uint, 0x00000001);
pub const LGPT_ADCTRG_SRC_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IOCTL_COUT2_W = @as(c_uint, 2);
pub const LGPT_IOCTL_COUT2_M = @as(c_uint, 0x00000C00);
pub const LGPT_IOCTL_COUT2_S = @as(c_uint, 10);
pub const LGPT_IOCTL_COUT2_INV = @as(c_uint, 0x00000C00);
pub const LGPT_IOCTL_COUT2_HIGH = @as(c_uint, 0x00000800);
pub const LGPT_IOCTL_COUT2_LOW = @as(c_uint, 0x00000400);
pub const LGPT_IOCTL_COUT2_NRM = @as(c_uint, 0x00000000);
pub const LGPT_IOCTL_OUT2_W = @as(c_uint, 2);
pub const LGPT_IOCTL_OUT2_M = @as(c_uint, 0x00000300);
pub const LGPT_IOCTL_OUT2_S = @as(c_uint, 8);
pub const LGPT_IOCTL_OUT2_INV = @as(c_uint, 0x00000300);
pub const LGPT_IOCTL_OUT2_HIGH = @as(c_uint, 0x00000200);
pub const LGPT_IOCTL_OUT2_LOW = @as(c_uint, 0x00000100);
pub const LGPT_IOCTL_OUT2_NRM = @as(c_uint, 0x00000000);
pub const LGPT_IOCTL_COUT1_W = @as(c_uint, 2);
pub const LGPT_IOCTL_COUT1_M = @as(c_uint, 0x000000C0);
pub const LGPT_IOCTL_COUT1_S = @as(c_uint, 6);
pub const LGPT_IOCTL_COUT1_INV = @as(c_uint, 0x000000C0);
pub const LGPT_IOCTL_COUT1_HIGH = @as(c_uint, 0x00000080);
pub const LGPT_IOCTL_COUT1_LOW = @as(c_uint, 0x00000040);
pub const LGPT_IOCTL_COUT1_NRM = @as(c_uint, 0x00000000);
pub const LGPT_IOCTL_OUT1_W = @as(c_uint, 2);
pub const LGPT_IOCTL_OUT1_M = @as(c_uint, 0x00000030);
pub const LGPT_IOCTL_OUT1_S = @as(c_uint, 4);
pub const LGPT_IOCTL_OUT1_INV = @as(c_uint, 0x00000030);
pub const LGPT_IOCTL_OUT1_HIGH = @as(c_uint, 0x00000020);
pub const LGPT_IOCTL_OUT1_LOW = @as(c_uint, 0x00000010);
pub const LGPT_IOCTL_OUT1_NRM = @as(c_uint, 0x00000000);
pub const LGPT_IOCTL_COUT0_W = @as(c_uint, 2);
pub const LGPT_IOCTL_COUT0_M = @as(c_uint, 0x0000000C);
pub const LGPT_IOCTL_COUT0_S = @as(c_uint, 2);
pub const LGPT_IOCTL_COUT0_INV = @as(c_uint, 0x0000000C);
pub const LGPT_IOCTL_COUT0_HIGH = @as(c_uint, 0x00000008);
pub const LGPT_IOCTL_COUT0_LOW = @as(c_uint, 0x00000004);
pub const LGPT_IOCTL_COUT0_NRM = @as(c_uint, 0x00000000);
pub const LGPT_IOCTL_OUT0_W = @as(c_uint, 2);
pub const LGPT_IOCTL_OUT0_M = @as(c_uint, 0x00000003);
pub const LGPT_IOCTL_OUT0_S = @as(c_uint, 0);
pub const LGPT_IOCTL_OUT0_INV = @as(c_uint, 0x00000003);
pub const LGPT_IOCTL_OUT0_HIGH = @as(c_uint, 0x00000002);
pub const LGPT_IOCTL_OUT0_LOW = @as(c_uint, 0x00000001);
pub const LGPT_IOCTL_OUT0_NRM = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_IMASK_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_IMASK_C2CC_S = @as(c_uint, 10);
pub const LGPT_IMASK_C2CC_EN = @as(c_uint, 0x00000400);
pub const LGPT_IMASK_C2CC_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_IMASK_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_IMASK_C1CC_S = @as(c_uint, 9);
pub const LGPT_IMASK_C1CC_EN = @as(c_uint, 0x00000200);
pub const LGPT_IMASK_C1CC_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_IMASK_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_IMASK_C0CC_S = @as(c_uint, 8);
pub const LGPT_IMASK_C0CC_EN = @as(c_uint, 0x00000100);
pub const LGPT_IMASK_C0CC_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_IMASK_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_IMASK_FAULT_S = @as(c_uint, 6);
pub const LGPT_IMASK_FAULT_EN = @as(c_uint, 0x00000040);
pub const LGPT_IMASK_FAULT_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_IDX = @as(c_uint, 0x00000020);
pub const LGPT_IMASK_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_IMASK_IDX_S = @as(c_uint, 5);
pub const LGPT_IMASK_IDX_EN = @as(c_uint, 0x00000020);
pub const LGPT_IMASK_IDX_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_IMASK_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_IMASK_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_IMASK_DIRCHNG_EN = @as(c_uint, 0x00000010);
pub const LGPT_IMASK_DIRCHNG_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_IMASK_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_IMASK_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_IMASK_CNTRCHNG_EN = @as(c_uint, 0x00000008);
pub const LGPT_IMASK_CNTRCHNG_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_IMASK_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_IMASK_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_IMASK_DBLTRANS_EN = @as(c_uint, 0x00000004);
pub const LGPT_IMASK_DBLTRANS_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_IMASK_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_IMASK_ZERO_S = @as(c_uint, 1);
pub const LGPT_IMASK_ZERO_EN = @as(c_uint, 0x00000002);
pub const LGPT_IMASK_ZERO_DIS = @as(c_uint, 0x00000000);
pub const LGPT_IMASK_TGT = @as(c_uint, 0x00000001);
pub const LGPT_IMASK_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_IMASK_TGT_S = @as(c_uint, 0);
pub const LGPT_IMASK_TGT_EN = @as(c_uint, 0x00000001);
pub const LGPT_IMASK_TGT_DIS = @as(c_uint, 0x00000000);
pub const LGPT_RIS_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_RIS_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_RIS_C2CC_S = @as(c_uint, 10);
pub const LGPT_RIS_C2CC_SET = @as(c_uint, 0x00000400);
pub const LGPT_RIS_C2CC_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_RIS_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_RIS_C1CC_S = @as(c_uint, 9);
pub const LGPT_RIS_C1CC_SET = @as(c_uint, 0x00000200);
pub const LGPT_RIS_C1CC_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_RIS_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_RIS_C0CC_S = @as(c_uint, 8);
pub const LGPT_RIS_C0CC_SET = @as(c_uint, 0x00000100);
pub const LGPT_RIS_C0CC_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_RIS_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_RIS_FAULT_S = @as(c_uint, 6);
pub const LGPT_RIS_FAULT_SET = @as(c_uint, 0x00000040);
pub const LGPT_RIS_FAULT_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_IDX = @as(c_uint, 0x00000020);
pub const LGPT_RIS_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_RIS_IDX_S = @as(c_uint, 5);
pub const LGPT_RIS_IDX_SET = @as(c_uint, 0x00000020);
pub const LGPT_RIS_IDX_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_RIS_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_RIS_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_RIS_DIRCHNG_SET = @as(c_uint, 0x00000010);
pub const LGPT_RIS_DIRCHNG_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_RIS_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_RIS_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_RIS_CNTRCHNG_SET = @as(c_uint, 0x00000008);
pub const LGPT_RIS_CNTRCHNG_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_RIS_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_RIS_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_RIS_DBLTRANS_SET = @as(c_uint, 0x00000004);
pub const LGPT_RIS_DBLTRANS_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_RIS_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_RIS_ZERO_S = @as(c_uint, 1);
pub const LGPT_RIS_ZERO_SET = @as(c_uint, 0x00000002);
pub const LGPT_RIS_ZERO_CLR = @as(c_uint, 0x00000000);
pub const LGPT_RIS_TGT = @as(c_uint, 0x00000001);
pub const LGPT_RIS_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_RIS_TGT_S = @as(c_uint, 0);
pub const LGPT_RIS_TGT_SET = @as(c_uint, 0x00000001);
pub const LGPT_RIS_TGT_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_MIS_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_MIS_C2CC_S = @as(c_uint, 10);
pub const LGPT_MIS_C2CC_SET = @as(c_uint, 0x00000400);
pub const LGPT_MIS_C2CC_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_MIS_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_MIS_C1CC_S = @as(c_uint, 9);
pub const LGPT_MIS_C1CC_SET = @as(c_uint, 0x00000200);
pub const LGPT_MIS_C1CC_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_MIS_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_MIS_C0CC_S = @as(c_uint, 8);
pub const LGPT_MIS_C0CC_SET = @as(c_uint, 0x00000100);
pub const LGPT_MIS_C0CC_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_MIS_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_MIS_FAULT_S = @as(c_uint, 6);
pub const LGPT_MIS_FAULT_SET = @as(c_uint, 0x00000040);
pub const LGPT_MIS_FAULT_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_IDX = @as(c_uint, 0x00000020);
pub const LGPT_MIS_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_MIS_IDX_S = @as(c_uint, 5);
pub const LGPT_MIS_IDX_SET = @as(c_uint, 0x00000020);
pub const LGPT_MIS_IDX_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_MIS_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_MIS_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_MIS_DIRCHNG_SET = @as(c_uint, 0x00000010);
pub const LGPT_MIS_DIRCHNG_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_MIS_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_MIS_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_MIS_CNTRCHNG_SET = @as(c_uint, 0x00000008);
pub const LGPT_MIS_CNTRCHNG_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_MIS_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_MIS_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_MIS_DBLTRANS_SET = @as(c_uint, 0x00000004);
pub const LGPT_MIS_DBLTRANS_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_MIS_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_MIS_ZERO_S = @as(c_uint, 1);
pub const LGPT_MIS_ZERO_SET = @as(c_uint, 0x00000002);
pub const LGPT_MIS_ZERO_CLR = @as(c_uint, 0x00000000);
pub const LGPT_MIS_TGT = @as(c_uint, 0x00000001);
pub const LGPT_MIS_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_MIS_TGT_S = @as(c_uint, 0);
pub const LGPT_MIS_TGT_SET = @as(c_uint, 0x00000001);
pub const LGPT_MIS_TGT_CLR = @as(c_uint, 0x00000000);
pub const LGPT_ISET_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_ISET_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_ISET_C2CC_S = @as(c_uint, 10);
pub const LGPT_ISET_C2CC_SET = @as(c_uint, 0x00000400);
pub const LGPT_ISET_C2CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_ISET_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_ISET_C1CC_S = @as(c_uint, 9);
pub const LGPT_ISET_C1CC_SET = @as(c_uint, 0x00000200);
pub const LGPT_ISET_C1CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_ISET_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_ISET_C0CC_S = @as(c_uint, 8);
pub const LGPT_ISET_C0CC_SET = @as(c_uint, 0x00000100);
pub const LGPT_ISET_C0CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_ISET_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_ISET_FAULT_S = @as(c_uint, 6);
pub const LGPT_ISET_FAULT_SET = @as(c_uint, 0x00000040);
pub const LGPT_ISET_FAULT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_IDX = @as(c_uint, 0x00000020);
pub const LGPT_ISET_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_ISET_IDX_S = @as(c_uint, 5);
pub const LGPT_ISET_IDX_SET = @as(c_uint, 0x00000020);
pub const LGPT_ISET_IDX_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_ISET_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_ISET_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_ISET_DIRCHNG_SET = @as(c_uint, 0x00000010);
pub const LGPT_ISET_DIRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_ISET_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_ISET_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_ISET_CNTRCHNG_SET = @as(c_uint, 0x00000008);
pub const LGPT_ISET_CNTRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_ISET_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_ISET_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_ISET_DBLTRANS_SET = @as(c_uint, 0x00000004);
pub const LGPT_ISET_DBLTRANS_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_ISET_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_ISET_ZERO_S = @as(c_uint, 1);
pub const LGPT_ISET_ZERO_SET = @as(c_uint, 0x00000002);
pub const LGPT_ISET_ZERO_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ISET_TGT = @as(c_uint, 0x00000001);
pub const LGPT_ISET_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_ISET_TGT_S = @as(c_uint, 0);
pub const LGPT_ISET_TGT_SET = @as(c_uint, 0x00000001);
pub const LGPT_ISET_TGT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_ICLR_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_ICLR_C2CC_S = @as(c_uint, 10);
pub const LGPT_ICLR_C2CC_CLR = @as(c_uint, 0x00000400);
pub const LGPT_ICLR_C2CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_ICLR_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_ICLR_C1CC_S = @as(c_uint, 9);
pub const LGPT_ICLR_C1CC_CLR = @as(c_uint, 0x00000200);
pub const LGPT_ICLR_C1CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_ICLR_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_ICLR_C0CC_S = @as(c_uint, 8);
pub const LGPT_ICLR_C0CC_CLR = @as(c_uint, 0x00000100);
pub const LGPT_ICLR_C0CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_ICLR_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_ICLR_FAULT_S = @as(c_uint, 6);
pub const LGPT_ICLR_FAULT_CLR = @as(c_uint, 0x00000040);
pub const LGPT_ICLR_FAULT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_IDX = @as(c_uint, 0x00000020);
pub const LGPT_ICLR_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_ICLR_IDX_S = @as(c_uint, 5);
pub const LGPT_ICLR_IDX_CLR = @as(c_uint, 0x00000020);
pub const LGPT_ICLR_IDX_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_ICLR_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_ICLR_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_ICLR_DIRCHNG_CLR = @as(c_uint, 0x00000010);
pub const LGPT_ICLR_DIRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_ICLR_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_ICLR_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_ICLR_CNTRCHNG_CLR = @as(c_uint, 0x00000008);
pub const LGPT_ICLR_CNTRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_ICLR_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_ICLR_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_ICLR_DBLTRANS_CLR = @as(c_uint, 0x00000004);
pub const LGPT_ICLR_DBLTRANS_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_ICLR_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_ICLR_ZERO_S = @as(c_uint, 1);
pub const LGPT_ICLR_ZERO_CLR = @as(c_uint, 0x00000002);
pub const LGPT_ICLR_ZERO_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_ICLR_TGT = @as(c_uint, 0x00000001);
pub const LGPT_ICLR_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_ICLR_TGT_S = @as(c_uint, 0);
pub const LGPT_ICLR_TGT_CLR = @as(c_uint, 0x00000001);
pub const LGPT_ICLR_TGT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_IMSET_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_IMSET_C2CC_S = @as(c_uint, 10);
pub const LGPT_IMSET_C2CC_SET = @as(c_uint, 0x00000400);
pub const LGPT_IMSET_C2CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_IMSET_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_IMSET_C1CC_S = @as(c_uint, 9);
pub const LGPT_IMSET_C1CC_SET = @as(c_uint, 0x00000200);
pub const LGPT_IMSET_C1CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_IMSET_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_IMSET_C0CC_S = @as(c_uint, 8);
pub const LGPT_IMSET_C0CC_SET = @as(c_uint, 0x00000100);
pub const LGPT_IMSET_C0CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_IMSET_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_IMSET_FAULT_S = @as(c_uint, 6);
pub const LGPT_IMSET_FAULT_SET = @as(c_uint, 0x00000040);
pub const LGPT_IMSET_FAULT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_IDX = @as(c_uint, 0x00000020);
pub const LGPT_IMSET_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_IMSET_IDX_S = @as(c_uint, 5);
pub const LGPT_IMSET_IDX_SET = @as(c_uint, 0x00000020);
pub const LGPT_IMSET_IDX_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_IMSET_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_IMSET_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_IMSET_DIRCHNG_SET = @as(c_uint, 0x00000010);
pub const LGPT_IMSET_DIRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_IMSET_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_IMSET_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_IMSET_CNTRCHNG_SET = @as(c_uint, 0x00000008);
pub const LGPT_IMSET_CNTRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_IMSET_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_IMSET_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_IMSET_DBLTRANS_SET = @as(c_uint, 0x00000004);
pub const LGPT_IMSET_DBLTRANS_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_IMSET_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_IMSET_ZERO_S = @as(c_uint, 1);
pub const LGPT_IMSET_ZERO_SET = @as(c_uint, 0x00000002);
pub const LGPT_IMSET_ZERO_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMSET_TGT = @as(c_uint, 0x00000001);
pub const LGPT_IMSET_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_IMSET_TGT_S = @as(c_uint, 0);
pub const LGPT_IMSET_TGT_SET = @as(c_uint, 0x00000001);
pub const LGPT_IMSET_TGT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_C2CC = @as(c_uint, 0x00000400);
pub const LGPT_IMCLR_C2CC_M = @as(c_uint, 0x00000400);
pub const LGPT_IMCLR_C2CC_S = @as(c_uint, 10);
pub const LGPT_IMCLR_C2CC_CLR = @as(c_uint, 0x00000400);
pub const LGPT_IMCLR_C2CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_C1CC = @as(c_uint, 0x00000200);
pub const LGPT_IMCLR_C1CC_M = @as(c_uint, 0x00000200);
pub const LGPT_IMCLR_C1CC_S = @as(c_uint, 9);
pub const LGPT_IMCLR_C1CC_CLR = @as(c_uint, 0x00000200);
pub const LGPT_IMCLR_C1CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_C0CC = @as(c_uint, 0x00000100);
pub const LGPT_IMCLR_C0CC_M = @as(c_uint, 0x00000100);
pub const LGPT_IMCLR_C0CC_S = @as(c_uint, 8);
pub const LGPT_IMCLR_C0CC_CLR = @as(c_uint, 0x00000100);
pub const LGPT_IMCLR_C0CC_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_FAULT = @as(c_uint, 0x00000040);
pub const LGPT_IMCLR_FAULT_M = @as(c_uint, 0x00000040);
pub const LGPT_IMCLR_FAULT_S = @as(c_uint, 6);
pub const LGPT_IMCLR_FAULT_CLR = @as(c_uint, 0x00000040);
pub const LGPT_IMCLR_FAULT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_IDX = @as(c_uint, 0x00000020);
pub const LGPT_IMCLR_IDX_M = @as(c_uint, 0x00000020);
pub const LGPT_IMCLR_IDX_S = @as(c_uint, 5);
pub const LGPT_IMCLR_IDX_CLR = @as(c_uint, 0x00000020);
pub const LGPT_IMCLR_IDX_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_DIRCHNG = @as(c_uint, 0x00000010);
pub const LGPT_IMCLR_DIRCHNG_M = @as(c_uint, 0x00000010);
pub const LGPT_IMCLR_DIRCHNG_S = @as(c_uint, 4);
pub const LGPT_IMCLR_DIRCHNG_CLR = @as(c_uint, 0x00000010);
pub const LGPT_IMCLR_DIRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_CNTRCHNG = @as(c_uint, 0x00000008);
pub const LGPT_IMCLR_CNTRCHNG_M = @as(c_uint, 0x00000008);
pub const LGPT_IMCLR_CNTRCHNG_S = @as(c_uint, 3);
pub const LGPT_IMCLR_CNTRCHNG_CLR = @as(c_uint, 0x00000008);
pub const LGPT_IMCLR_CNTRCHNG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_DBLTRANS = @as(c_uint, 0x00000004);
pub const LGPT_IMCLR_DBLTRANS_M = @as(c_uint, 0x00000004);
pub const LGPT_IMCLR_DBLTRANS_S = @as(c_uint, 2);
pub const LGPT_IMCLR_DBLTRANS_CLR = @as(c_uint, 0x00000004);
pub const LGPT_IMCLR_DBLTRANS_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_ZERO = @as(c_uint, 0x00000002);
pub const LGPT_IMCLR_ZERO_M = @as(c_uint, 0x00000002);
pub const LGPT_IMCLR_ZERO_S = @as(c_uint, 1);
pub const LGPT_IMCLR_ZERO_CLR = @as(c_uint, 0x00000002);
pub const LGPT_IMCLR_ZERO_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_IMCLR_TGT = @as(c_uint, 0x00000001);
pub const LGPT_IMCLR_TGT_M = @as(c_uint, 0x00000001);
pub const LGPT_IMCLR_TGT_S = @as(c_uint, 0);
pub const LGPT_IMCLR_TGT_CLR = @as(c_uint, 0x00000001);
pub const LGPT_IMCLR_TGT_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LGPT_EMU_CTL = @as(c_uint, 0x00000002);
pub const LGPT_EMU_CTL_M = @as(c_uint, 0x00000002);
pub const LGPT_EMU_CTL_S = @as(c_uint, 1);
pub const LGPT_EMU_CTL_ZERCOND = @as(c_uint, 0x00000002);
pub const LGPT_EMU_CTL_IMMEDIATE = @as(c_uint, 0x00000000);
pub const LGPT_EMU_HALT = @as(c_uint, 0x00000001);
pub const LGPT_EMU_HALT_M = @as(c_uint, 0x00000001);
pub const LGPT_EMU_HALT_S = @as(c_uint, 0);
pub const LGPT_EMU_HALT_EN = @as(c_uint, 0x00000001);
pub const LGPT_EMU_HALT_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C0CFG_OUT2 = @as(c_uint, 0x00000400);
pub const LGPT_C0CFG_OUT2_M = @as(c_uint, 0x00000400);
pub const LGPT_C0CFG_OUT2_S = @as(c_uint, 10);
pub const LGPT_C0CFG_OUT2_EN = @as(c_uint, 0x00000400);
pub const LGPT_C0CFG_OUT2_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C0CFG_OUT1 = @as(c_uint, 0x00000200);
pub const LGPT_C0CFG_OUT1_M = @as(c_uint, 0x00000200);
pub const LGPT_C0CFG_OUT1_S = @as(c_uint, 9);
pub const LGPT_C0CFG_OUT1_EN = @as(c_uint, 0x00000200);
pub const LGPT_C0CFG_OUT1_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C0CFG_OUT0 = @as(c_uint, 0x00000100);
pub const LGPT_C0CFG_OUT0_M = @as(c_uint, 0x00000100);
pub const LGPT_C0CFG_OUT0_S = @as(c_uint, 8);
pub const LGPT_C0CFG_OUT0_EN = @as(c_uint, 0x00000100);
pub const LGPT_C0CFG_OUT0_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C0CFG_INPUT = @as(c_uint, 0x00000040);
pub const LGPT_C0CFG_INPUT_M = @as(c_uint, 0x00000040);
pub const LGPT_C0CFG_INPUT_S = @as(c_uint, 6);
pub const LGPT_C0CFG_INPUT_IO = @as(c_uint, 0x00000040);
pub const LGPT_C0CFG_INPUT_EV = @as(c_uint, 0x00000000);
pub const LGPT_C0CFG_EDGE_W = @as(c_uint, 2);
pub const LGPT_C0CFG_EDGE_M = @as(c_uint, 0x00000030);
pub const LGPT_C0CFG_EDGE_S = @as(c_uint, 4);
pub const LGPT_C0CFG_EDGE_BOTH = @as(c_uint, 0x00000030);
pub const LGPT_C0CFG_EDGE_FALL = @as(c_uint, 0x00000020);
pub const LGPT_C0CFG_EDGE_RISE = @as(c_uint, 0x00000010);
pub const LGPT_C0CFG_EDGE_NONE = @as(c_uint, 0x00000000);
pub const LGPT_C0CFG_CCACT_W = @as(c_uint, 4);
pub const LGPT_C0CFG_CCACT_M = @as(c_uint, 0x0000000F);
pub const LGPT_C0CFG_CCACT_S = @as(c_uint, 0);
pub const LGPT_C0CFG_CCACT_PULSE_ON_CMP = @as(c_uint, 0x0000000F);
pub const LGPT_C0CFG_CCACT_TGL_ON_CMP = @as(c_uint, 0x0000000E);
pub const LGPT_C0CFG_CCACT_SET_ON_CMP = @as(c_uint, 0x0000000D);
pub const LGPT_C0CFG_CCACT_CLR_ON_CMP = @as(c_uint, 0x0000000C);
pub const LGPT_C0CFG_CCACT_SET_ON_0_TGL_ON_CMP = @as(c_uint, 0x0000000B);
pub const LGPT_C0CFG_CCACT_CLR_ON_0_TGL_ON_CMP = @as(c_uint, 0x0000000A);
pub const LGPT_C0CFG_CCACT_SET_ON_CAPT = @as(c_uint, 0x00000009);
pub const LGPT_C0CFG_CCACT_PER_PULSE_WIDTH_MEAS = @as(c_uint, 0x00000008);
pub const LGPT_C0CFG_CCACT_PULSE_ON_CMP_DIS = @as(c_uint, 0x00000007);
pub const LGPT_C0CFG_CCACT_TGL_ON_CMP_DIS = @as(c_uint, 0x00000006);
pub const LGPT_C0CFG_CCACT_SET_ON_CMP_DIS = @as(c_uint, 0x00000005);
pub const LGPT_C0CFG_CCACT_CLR_ON_CMP_DIS = @as(c_uint, 0x00000004);
pub const LGPT_C0CFG_CCACT_SET_ON_0_TGL_ON_CMP_DIS = @as(c_uint, 0x00000003);
pub const LGPT_C0CFG_CCACT_CLR_ON_0_TGL_ON_CMP_DIS = @as(c_uint, 0x00000002);
pub const LGPT_C0CFG_CCACT_SET_ON_CAPT_DIS = @as(c_uint, 0x00000001);
pub const LGPT_C0CFG_CCACT_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C1CFG_OUT2 = @as(c_uint, 0x00000400);
pub const LGPT_C1CFG_OUT2_M = @as(c_uint, 0x00000400);
pub const LGPT_C1CFG_OUT2_S = @as(c_uint, 10);
pub const LGPT_C1CFG_OUT2_EN = @as(c_uint, 0x00000400);
pub const LGPT_C1CFG_OUT2_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C1CFG_OUT1 = @as(c_uint, 0x00000200);
pub const LGPT_C1CFG_OUT1_M = @as(c_uint, 0x00000200);
pub const LGPT_C1CFG_OUT1_S = @as(c_uint, 9);
pub const LGPT_C1CFG_OUT1_EN = @as(c_uint, 0x00000200);
pub const LGPT_C1CFG_OUT1_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C1CFG_OUT0 = @as(c_uint, 0x00000100);
pub const LGPT_C1CFG_OUT0_M = @as(c_uint, 0x00000100);
pub const LGPT_C1CFG_OUT0_S = @as(c_uint, 8);
pub const LGPT_C1CFG_OUT0_EN = @as(c_uint, 0x00000100);
pub const LGPT_C1CFG_OUT0_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C1CFG_INPUT = @as(c_uint, 0x00000040);
pub const LGPT_C1CFG_INPUT_M = @as(c_uint, 0x00000040);
pub const LGPT_C1CFG_INPUT_S = @as(c_uint, 6);
pub const LGPT_C1CFG_INPUT_IO = @as(c_uint, 0x00000040);
pub const LGPT_C1CFG_INPUT_EV = @as(c_uint, 0x00000000);
pub const LGPT_C1CFG_EDGE_W = @as(c_uint, 2);
pub const LGPT_C1CFG_EDGE_M = @as(c_uint, 0x00000030);
pub const LGPT_C1CFG_EDGE_S = @as(c_uint, 4);
pub const LGPT_C1CFG_EDGE_BOTH = @as(c_uint, 0x00000030);
pub const LGPT_C1CFG_EDGE_FALL = @as(c_uint, 0x00000020);
pub const LGPT_C1CFG_EDGE_RISE = @as(c_uint, 0x00000010);
pub const LGPT_C1CFG_EDGE_NONE = @as(c_uint, 0x00000000);
pub const LGPT_C1CFG_CCACT_W = @as(c_uint, 4);
pub const LGPT_C1CFG_CCACT_M = @as(c_uint, 0x0000000F);
pub const LGPT_C1CFG_CCACT_S = @as(c_uint, 0);
pub const LGPT_C1CFG_CCACT_PULSE_ON_CMP = @as(c_uint, 0x0000000F);
pub const LGPT_C1CFG_CCACT_TGL_ON_CMP = @as(c_uint, 0x0000000E);
pub const LGPT_C1CFG_CCACT_SET_ON_CMP = @as(c_uint, 0x0000000D);
pub const LGPT_C1CFG_CCACT_CLR_ON_CMP = @as(c_uint, 0x0000000C);
pub const LGPT_C1CFG_CCACT_SET_ON_0_TGL_ON_CMP = @as(c_uint, 0x0000000B);
pub const LGPT_C1CFG_CCACT_CLR_ON_0_TGL_ON_CMP = @as(c_uint, 0x0000000A);
pub const LGPT_C1CFG_CCACT_SET_ON_CAPT = @as(c_uint, 0x00000009);
pub const LGPT_C1CFG_CCACT_PER_PULSE_WIDTH_MEAS = @as(c_uint, 0x00000008);
pub const LGPT_C1CFG_CCACT_PULSE_ON_CMP_DIS = @as(c_uint, 0x00000007);
pub const LGPT_C1CFG_CCACT_TGL_ON_CMP_DIS = @as(c_uint, 0x00000006);
pub const LGPT_C1CFG_CCACT_SET_ON_CMP_DIS = @as(c_uint, 0x00000005);
pub const LGPT_C1CFG_CCACT_CLR_ON_CMP_DIS = @as(c_uint, 0x00000004);
pub const LGPT_C1CFG_CCACT_SET_ON_0_TGL_ON_CMP_DIS = @as(c_uint, 0x00000003);
pub const LGPT_C1CFG_CCACT_CLR_ON_0_TGL_ON_CMP_DIS = @as(c_uint, 0x00000002);
pub const LGPT_C1CFG_CCACT_SET_ON_CAPT_DIS = @as(c_uint, 0x00000001);
pub const LGPT_C1CFG_CCACT_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C2CFG_OUT2 = @as(c_uint, 0x00000400);
pub const LGPT_C2CFG_OUT2_M = @as(c_uint, 0x00000400);
pub const LGPT_C2CFG_OUT2_S = @as(c_uint, 10);
pub const LGPT_C2CFG_OUT2_EN = @as(c_uint, 0x00000400);
pub const LGPT_C2CFG_OUT2_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C2CFG_OUT1 = @as(c_uint, 0x00000200);
pub const LGPT_C2CFG_OUT1_M = @as(c_uint, 0x00000200);
pub const LGPT_C2CFG_OUT1_S = @as(c_uint, 9);
pub const LGPT_C2CFG_OUT1_EN = @as(c_uint, 0x00000200);
pub const LGPT_C2CFG_OUT1_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C2CFG_OUT0 = @as(c_uint, 0x00000100);
pub const LGPT_C2CFG_OUT0_M = @as(c_uint, 0x00000100);
pub const LGPT_C2CFG_OUT0_S = @as(c_uint, 8);
pub const LGPT_C2CFG_OUT0_EN = @as(c_uint, 0x00000100);
pub const LGPT_C2CFG_OUT0_DIS = @as(c_uint, 0x00000000);
pub const LGPT_C2CFG_INPUT = @as(c_uint, 0x00000040);
pub const LGPT_C2CFG_INPUT_M = @as(c_uint, 0x00000040);
pub const LGPT_C2CFG_INPUT_S = @as(c_uint, 6);
pub const LGPT_C2CFG_INPUT_IO = @as(c_uint, 0x00000040);
pub const LGPT_C2CFG_INPUT_EV = @as(c_uint, 0x00000000);
pub const LGPT_C2CFG_EDGE_W = @as(c_uint, 2);
pub const LGPT_C2CFG_EDGE_M = @as(c_uint, 0x00000030);
pub const LGPT_C2CFG_EDGE_S = @as(c_uint, 4);
pub const LGPT_C2CFG_EDGE_BOTH = @as(c_uint, 0x00000030);
pub const LGPT_C2CFG_EDGE_FALL = @as(c_uint, 0x00000020);
pub const LGPT_C2CFG_EDGE_RISE = @as(c_uint, 0x00000010);
pub const LGPT_C2CFG_EDGE_NONE = @as(c_uint, 0x00000000);
pub const LGPT_C2CFG_CCACT_W = @as(c_uint, 4);
pub const LGPT_C2CFG_CCACT_M = @as(c_uint, 0x0000000F);
pub const LGPT_C2CFG_CCACT_S = @as(c_uint, 0);
pub const LGPT_C2CFG_CCACT_PULSE_ON_CMP = @as(c_uint, 0x0000000F);
pub const LGPT_C2CFG_CCACT_TGL_ON_CMP = @as(c_uint, 0x0000000E);
pub const LGPT_C2CFG_CCACT_SET_ON_CMP = @as(c_uint, 0x0000000D);
pub const LGPT_C2CFG_CCACT_CLR_ON_CMP = @as(c_uint, 0x0000000C);
pub const LGPT_C2CFG_CCACT_SET_ON_0_TGL_ON_CMP = @as(c_uint, 0x0000000B);
pub const LGPT_C2CFG_CCACT_CLR_ON_0_TGL_ON_CMP = @as(c_uint, 0x0000000A);
pub const LGPT_C2CFG_CCACT_SET_ON_CAPT = @as(c_uint, 0x00000009);
pub const LGPT_C2CFG_CCACT_PER_PULSE_WIDTH_MEAS = @as(c_uint, 0x00000008);
pub const LGPT_C2CFG_CCACT_PULSE_ON_CMP_DIS = @as(c_uint, 0x00000007);
pub const LGPT_C2CFG_CCACT_TGL_ON_CMP_DIS = @as(c_uint, 0x00000006);
pub const LGPT_C2CFG_CCACT_SET_ON_CMP_DIS = @as(c_uint, 0x00000005);
pub const LGPT_C2CFG_CCACT_CLR_ON_CMP_DIS = @as(c_uint, 0x00000004);
pub const LGPT_C2CFG_CCACT_SET_ON_0_TGL_ON_CMP_DIS = @as(c_uint, 0x00000003);
pub const LGPT_C2CFG_CCACT_CLR_ON_0_TGL_ON_CMP_DIS = @as(c_uint, 0x00000002);
pub const LGPT_C2CFG_CCACT_SET_ON_CAPT_DIS = @as(c_uint, 0x00000001);
pub const LGPT_C2CFG_CCACT_DIS = @as(c_uint, 0x00000000);
pub const LGPT_PTGT_VAL_W = @as(c_uint, 16);
pub const LGPT_PTGT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PTGT_VAL_S = @as(c_uint, 0);
pub const LGPT_PC0CC_VAL_W = @as(c_uint, 16);
pub const LGPT_PC0CC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PC0CC_VAL_S = @as(c_uint, 0);
pub const LGPT_PC1CC_VAL_W = @as(c_uint, 16);
pub const LGPT_PC1CC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PC1CC_VAL_S = @as(c_uint, 0);
pub const LGPT_PC2CC_VAL_W = @as(c_uint, 16);
pub const LGPT_PC2CC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PC2CC_VAL_S = @as(c_uint, 0);
pub const LGPT_TGT_VAL_W = @as(c_uint, 16);
pub const LGPT_TGT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_TGT_VAL_S = @as(c_uint, 0);
pub const LGPT_C0CC_VAL_W = @as(c_uint, 16);
pub const LGPT_C0CC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_C0CC_VAL_S = @as(c_uint, 0);
pub const LGPT_C1CC_VAL_W = @as(c_uint, 16);
pub const LGPT_C1CC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_C1CC_VAL_S = @as(c_uint, 0);
pub const LGPT_C2CC_VAL_W = @as(c_uint, 16);
pub const LGPT_C2CC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_C2CC_VAL_S = @as(c_uint, 0);
pub const LGPT_PTGTNC_VAL_W = @as(c_uint, 16);
pub const LGPT_PTGTNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PTGTNC_VAL_S = @as(c_uint, 0);
pub const LGPT_PC0CCNC_VAL_W = @as(c_uint, 16);
pub const LGPT_PC0CCNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PC0CCNC_VAL_S = @as(c_uint, 0);
pub const LGPT_PC1CCNC_VAL_W = @as(c_uint, 16);
pub const LGPT_PC1CCNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PC1CCNC_VAL_S = @as(c_uint, 0);
pub const LGPT_PC2CCNC_VAL_W = @as(c_uint, 16);
pub const LGPT_PC2CCNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_PC2CCNC_VAL_S = @as(c_uint, 0);
pub const LGPT_TGTNC_VAL_W = @as(c_uint, 16);
pub const LGPT_TGTNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_TGTNC_VAL_S = @as(c_uint, 0);
pub const LGPT_C0CCNC_VAL_W = @as(c_uint, 16);
pub const LGPT_C0CCNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_C0CCNC_VAL_S = @as(c_uint, 0);
pub const LGPT_C1CCNC_VAL_W = @as(c_uint, 16);
pub const LGPT_C1CCNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_C1CCNC_VAL_S = @as(c_uint, 0);
pub const LGPT_C2CCNC_VAL_W = @as(c_uint, 16);
pub const LGPT_C2CCNC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LGPT_C2CCNC_VAL_S = @as(c_uint, 0);
pub const __HW_LGPT3_H__ = "";
pub const LGPT3_CNTR_VAL_W = @as(c_uint, 24);
pub const LGPT3_CNTR_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_DMARW_VAL_W = @as(c_uint, 24);
pub const LGPT3_DMARW_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PTGT_VAL_W = @as(c_uint, 24);
pub const LGPT3_PTGT_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PC0CC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PC0CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PC1CC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PC1CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PC2CC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PC2CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_TGT_VAL_W = @as(c_uint, 24);
pub const LGPT3_TGT_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_C0CC_VAL_W = @as(c_uint, 24);
pub const LGPT3_C0CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_C1CC_VAL_W = @as(c_uint, 24);
pub const LGPT3_C1CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_C2CC_VAL_W = @as(c_uint, 24);
pub const LGPT3_C2CC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PTGTNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PTGTNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PC0CCNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PC0CCNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PC1CCNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PC1CCNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_PC2CCNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_PC2CCNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_TGTNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_TGTNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_C0CCNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_C0CCNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_C1CCNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_C1CCNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const LGPT3_C2CCNC_VAL_W = @as(c_uint, 24);
pub const LGPT3_C2CCNC_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const __HW_LRFDDBELL_H__ = "";
pub const LRFDDBELL_O_DESC = @as(c_uint, 0x00000000);
pub const LRFDDBELL_O_CLKCTL = @as(c_uint, 0x00000004);
pub const LRFDDBELL_O_DMACFG = @as(c_uint, 0x00000008);
pub const LRFDDBELL_O_SYSTIMOEV = @as(c_uint, 0x0000000C);
pub const LRFDDBELL_O_SYSTDMATRIG = @as(c_uint, 0x00000010);
pub const LRFDDBELL_O_GPOSEL0 = @as(c_uint, 0x00000014);
pub const LRFDDBELL_O_GPOSEL1 = @as(c_uint, 0x00000018);
pub const LRFDDBELL_O_IMASK0 = @as(c_uint, 0x00000044);
pub const LRFDDBELL_O_RIS0 = @as(c_uint, 0x00000048);
pub const LRFDDBELL_O_MIS0 = @as(c_uint, 0x0000004C);
pub const LRFDDBELL_O_ISET0 = @as(c_uint, 0x00000050);
pub const LRFDDBELL_O_ICLR0 = @as(c_uint, 0x00000054);
pub const LRFDDBELL_O_IMASK1 = @as(c_uint, 0x00000084);
pub const LRFDDBELL_O_RIS1 = @as(c_uint, 0x00000088);
pub const LRFDDBELL_O_MIS1 = @as(c_uint, 0x0000008C);
pub const LRFDDBELL_O_ISET1 = @as(c_uint, 0x00000090);
pub const LRFDDBELL_O_ICLR1 = @as(c_uint, 0x00000094);
pub const LRFDDBELL_O_IMASK2 = @as(c_uint, 0x000000C4);
pub const LRFDDBELL_O_RIS2 = @as(c_uint, 0x000000C8);
pub const LRFDDBELL_O_MIS2 = @as(c_uint, 0x000000CC);
pub const LRFDDBELL_O_ISET2 = @as(c_uint, 0x000000D0);
pub const LRFDDBELL_O_ICLR2 = @as(c_uint, 0x000000D4);
pub const LRFDDBELL_DESC_MODULEID_W = @as(c_uint, 16);
pub const LRFDDBELL_DESC_MODULEID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const LRFDDBELL_DESC_MODULEID_S = @as(c_uint, 16);
pub const LRFDDBELL_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const LRFDDBELL_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const LRFDDBELL_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const LRFDDBELL_DESC_STDIPOFF_STDIPMMR = @as(c_uint, 0x00001000);
pub const LRFDDBELL_DESC_STDIPOFF_NO_STDIPMMR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_DESC_INSTNUM_W = @as(c_uint, 4);
pub const LRFDDBELL_DESC_INSTNUM_M = @as(c_uint, 0x00000F00);
pub const LRFDDBELL_DESC_INSTNUM_S = @as(c_uint, 8);
pub const LRFDDBELL_DESC_MAJREV_W = @as(c_uint, 4);
pub const LRFDDBELL_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const LRFDDBELL_DESC_MAJREV_S = @as(c_uint, 4);
pub const LRFDDBELL_DESC_MINREV_W = @as(c_uint, 4);
pub const LRFDDBELL_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const LRFDDBELL_DESC_MINREV_S = @as(c_uint, 0);
pub const LRFDDBELL_CLKCTL_DEM = @as(c_uint, 0x00002000);
pub const LRFDDBELL_CLKCTL_DEM_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_CLKCTL_DEM_S = @as(c_uint, 13);
pub const LRFDDBELL_CLKCTL_DEM_EN = @as(c_uint, 0x00002000);
pub const LRFDDBELL_CLKCTL_DEM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_MOD = @as(c_uint, 0x00001000);
pub const LRFDDBELL_CLKCTL_MOD_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_CLKCTL_MOD_S = @as(c_uint, 12);
pub const LRFDDBELL_CLKCTL_MOD_EN = @as(c_uint, 0x00001000);
pub const LRFDDBELL_CLKCTL_MOD_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_S2RRAM = @as(c_uint, 0x00000800);
pub const LRFDDBELL_CLKCTL_S2RRAM_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_CLKCTL_S2RRAM_S = @as(c_uint, 11);
pub const LRFDDBELL_CLKCTL_S2RRAM_EN = @as(c_uint, 0x00000800);
pub const LRFDDBELL_CLKCTL_S2RRAM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_BUFRAM = @as(c_uint, 0x00000400);
pub const LRFDDBELL_CLKCTL_BUFRAM_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_CLKCTL_BUFRAM_S = @as(c_uint, 10);
pub const LRFDDBELL_CLKCTL_BUFRAM_EN = @as(c_uint, 0x00000400);
pub const LRFDDBELL_CLKCTL_BUFRAM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_DSBRAM = @as(c_uint, 0x00000200);
pub const LRFDDBELL_CLKCTL_DSBRAM_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_CLKCTL_DSBRAM_S = @as(c_uint, 9);
pub const LRFDDBELL_CLKCTL_DSBRAM_EN = @as(c_uint, 0x00000200);
pub const LRFDDBELL_CLKCTL_DSBRAM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_RFERAM = @as(c_uint, 0x00000100);
pub const LRFDDBELL_CLKCTL_RFERAM_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_CLKCTL_RFERAM_S = @as(c_uint, 8);
pub const LRFDDBELL_CLKCTL_RFERAM_EN = @as(c_uint, 0x00000100);
pub const LRFDDBELL_CLKCTL_RFERAM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_MCERAM = @as(c_uint, 0x00000080);
pub const LRFDDBELL_CLKCTL_MCERAM_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_CLKCTL_MCERAM_S = @as(c_uint, 7);
pub const LRFDDBELL_CLKCTL_MCERAM_EN = @as(c_uint, 0x00000080);
pub const LRFDDBELL_CLKCTL_MCERAM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_PBERAM = @as(c_uint, 0x00000040);
pub const LRFDDBELL_CLKCTL_PBERAM_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_CLKCTL_PBERAM_S = @as(c_uint, 6);
pub const LRFDDBELL_CLKCTL_PBERAM_EN = @as(c_uint, 0x00000040);
pub const LRFDDBELL_CLKCTL_PBERAM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_TRC = @as(c_uint, 0x00000020);
pub const LRFDDBELL_CLKCTL_TRC_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_CLKCTL_TRC_S = @as(c_uint, 5);
pub const LRFDDBELL_CLKCTL_TRC_EN = @as(c_uint, 0x00000020);
pub const LRFDDBELL_CLKCTL_TRC_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_S2R = @as(c_uint, 0x00000010);
pub const LRFDDBELL_CLKCTL_S2R_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_CLKCTL_S2R_S = @as(c_uint, 4);
pub const LRFDDBELL_CLKCTL_S2R_EN = @as(c_uint, 0x00000010);
pub const LRFDDBELL_CLKCTL_S2R_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_RFE = @as(c_uint, 0x00000008);
pub const LRFDDBELL_CLKCTL_RFE_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_CLKCTL_RFE_S = @as(c_uint, 3);
pub const LRFDDBELL_CLKCTL_RFE_EN = @as(c_uint, 0x00000008);
pub const LRFDDBELL_CLKCTL_RFE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_MDM = @as(c_uint, 0x00000004);
pub const LRFDDBELL_CLKCTL_MDM_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_CLKCTL_MDM_S = @as(c_uint, 2);
pub const LRFDDBELL_CLKCTL_MDM_EN = @as(c_uint, 0x00000004);
pub const LRFDDBELL_CLKCTL_MDM_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_PBE = @as(c_uint, 0x00000002);
pub const LRFDDBELL_CLKCTL_PBE_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_CLKCTL_PBE_S = @as(c_uint, 1);
pub const LRFDDBELL_CLKCTL_PBE_EN = @as(c_uint, 0x00000002);
pub const LRFDDBELL_CLKCTL_PBE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_CLKCTL_BRIDGE = @as(c_uint, 0x00000001);
pub const LRFDDBELL_CLKCTL_BRIDGE_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_CLKCTL_BRIDGE_S = @as(c_uint, 0);
pub const LRFDDBELL_CLKCTL_BRIDGE_EN = @as(c_uint, 0x00000001);
pub const LRFDDBELL_CLKCTL_BRIDGE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_DMACFG_TRIGSRC_W = @as(c_uint, 2);
pub const LRFDDBELL_DMACFG_TRIGSRC_M = @as(c_uint, 0x00000006);
pub const LRFDDBELL_DMACFG_TRIGSRC_S = @as(c_uint, 1);
pub const LRFDDBELL_DMACFG_TRIGSRC_FIFO = @as(c_uint, 0x00000006);
pub const LRFDDBELL_DMACFG_TRIGSRC_RFEFW = @as(c_uint, 0x00000004);
pub const LRFDDBELL_DMACFG_TRIGSRC_MCEFW = @as(c_uint, 0x00000002);
pub const LRFDDBELL_DMACFG_TRIGSRC_PBEFW = @as(c_uint, 0x00000000);
pub const LRFDDBELL_DMACFG_EN = @as(c_uint, 0x00000001);
pub const LRFDDBELL_DMACFG_EN_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_DMACFG_EN_S = @as(c_uint, 0);
pub const LRFDDBELL_DMACFG_EN_ON = @as(c_uint, 0x00000001);
pub const LRFDDBELL_DMACFG_EN_OFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTIMOEV_SRC2_W = @as(c_uint, 4);
pub const LRFDDBELL_SYSTIMOEV_SRC2_M = @as(c_uint, 0x00000F00);
pub const LRFDDBELL_SYSTIMOEV_SRC2_S = @as(c_uint, 8);
pub const LRFDDBELL_SYSTIMOEV_SRC2_PBESYSTIM2 = @as(c_uint, 0x00000C00);
pub const LRFDDBELL_SYSTIMOEV_SRC2_PBESYSTIM1 = @as(c_uint, 0x00000B00);
pub const LRFDDBELL_SYSTIMOEV_SRC2_PBESYSTIM0 = @as(c_uint, 0x00000A00);
pub const LRFDDBELL_SYSTIMOEV_SRC2_MDMHW2 = @as(c_uint, 0x00000900);
pub const LRFDDBELL_SYSTIMOEV_SRC2_MDMHW1 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_SYSTIMOEV_SRC2_MDMHW0 = @as(c_uint, 0x00000700);
pub const LRFDDBELL_SYSTIMOEV_SRC2_MCESYSTIM2 = @as(c_uint, 0x00000600);
pub const LRFDDBELL_SYSTIMOEV_SRC2_MCESYSTIM1 = @as(c_uint, 0x00000500);
pub const LRFDDBELL_SYSTIMOEV_SRC2_MCESYSTIM0 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_SYSTIMOEV_SRC2_RFESYSTIM2 = @as(c_uint, 0x00000300);
pub const LRFDDBELL_SYSTIMOEV_SRC2_RFESYSTIM1 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_SYSTIMOEV_SRC2_RFESYSTIM0 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_SYSTIMOEV_SRC2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTIMOEV_SRC1_W = @as(c_uint, 4);
pub const LRFDDBELL_SYSTIMOEV_SRC1_M = @as(c_uint, 0x000000F0);
pub const LRFDDBELL_SYSTIMOEV_SRC1_S = @as(c_uint, 4);
pub const LRFDDBELL_SYSTIMOEV_SRC1_PBESYSTIM2 = @as(c_uint, 0x000000C0);
pub const LRFDDBELL_SYSTIMOEV_SRC1_PBESYSTIM1 = @as(c_uint, 0x000000B0);
pub const LRFDDBELL_SYSTIMOEV_SRC1_PBESYSTIM0 = @as(c_uint, 0x000000A0);
pub const LRFDDBELL_SYSTIMOEV_SRC1_MDMHW2 = @as(c_uint, 0x00000090);
pub const LRFDDBELL_SYSTIMOEV_SRC1_MDMHW1 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_SYSTIMOEV_SRC1_MDMHW0 = @as(c_uint, 0x00000070);
pub const LRFDDBELL_SYSTIMOEV_SRC1_MCESYSTIM2 = @as(c_uint, 0x00000060);
pub const LRFDDBELL_SYSTIMOEV_SRC1_MCESYSTIM1 = @as(c_uint, 0x00000050);
pub const LRFDDBELL_SYSTIMOEV_SRC1_MCESYSTIM0 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_SYSTIMOEV_SRC1_RFESYSTIM2 = @as(c_uint, 0x00000030);
pub const LRFDDBELL_SYSTIMOEV_SRC1_RFESYSTIM1 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_SYSTIMOEV_SRC1_RFESYSTIM0 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_SYSTIMOEV_SRC1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTIMOEV_SRC0_W = @as(c_uint, 4);
pub const LRFDDBELL_SYSTIMOEV_SRC0_M = @as(c_uint, 0x0000000F);
pub const LRFDDBELL_SYSTIMOEV_SRC0_S = @as(c_uint, 0);
pub const LRFDDBELL_SYSTIMOEV_SRC0_PBESYSTIM2 = @as(c_uint, 0x0000000C);
pub const LRFDDBELL_SYSTIMOEV_SRC0_PBESYSTIM1 = @as(c_uint, 0x0000000B);
pub const LRFDDBELL_SYSTIMOEV_SRC0_PBESYSTIM0 = @as(c_uint, 0x0000000A);
pub const LRFDDBELL_SYSTIMOEV_SRC0_MDMHW2 = @as(c_uint, 0x00000009);
pub const LRFDDBELL_SYSTIMOEV_SRC0_MDMHW1 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_SYSTIMOEV_SRC0_MDMHW0 = @as(c_uint, 0x00000007);
pub const LRFDDBELL_SYSTIMOEV_SRC0_MCESYSTIM2 = @as(c_uint, 0x00000006);
pub const LRFDDBELL_SYSTIMOEV_SRC0_MCESYSTIM1 = @as(c_uint, 0x00000005);
pub const LRFDDBELL_SYSTIMOEV_SRC0_MCESYSTIM0 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_SYSTIMOEV_SRC0_RFESYSTIM2 = @as(c_uint, 0x00000003);
pub const LRFDDBELL_SYSTIMOEV_SRC0_RFESYSTIM1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_SYSTIMOEV_SRC0_RFESYSTIM0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_SYSTIMOEV_SRC0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTDMATRIG_DMA = @as(c_uint, 0x00000008);
pub const LRFDDBELL_SYSTDMATRIG_DMA_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_SYSTDMATRIG_DMA_S = @as(c_uint, 3);
pub const LRFDDBELL_SYSTDMATRIG_DMA_TRIG = @as(c_uint, 0x00000008);
pub const LRFDDBELL_SYSTDMATRIG_DMA_NOTRIG = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTDMATRIG_SYST2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_SYSTDMATRIG_SYST2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_SYSTDMATRIG_SYST2_S = @as(c_uint, 2);
pub const LRFDDBELL_SYSTDMATRIG_SYST2_TRIG = @as(c_uint, 0x00000004);
pub const LRFDDBELL_SYSTDMATRIG_SYST2_NOTRIG = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTDMATRIG_SYST1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_SYSTDMATRIG_SYST1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_SYSTDMATRIG_SYST1_S = @as(c_uint, 1);
pub const LRFDDBELL_SYSTDMATRIG_SYST1_TRIG = @as(c_uint, 0x00000002);
pub const LRFDDBELL_SYSTDMATRIG_SYST1_NOTRIG = @as(c_uint, 0x00000000);
pub const LRFDDBELL_SYSTDMATRIG_SYST0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_SYSTDMATRIG_SYST0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_SYSTDMATRIG_SYST0_S = @as(c_uint, 0);
pub const LRFDDBELL_SYSTDMATRIG_SYST0_TRIG = @as(c_uint, 0x00000001);
pub const LRFDDBELL_SYSTDMATRIG_SYST0_NOTRIG = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL0_SRC3_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL0_SRC3_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1F000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_S = @as(c_uint, 24);
pub const LRFDDBELL_GPOSEL0_SRC3_RFCTRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x19000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x18000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x17000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x16000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x15000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x14000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x13000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x12000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_RFEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x11000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0E000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0D000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0B000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0A000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_MCEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x09000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x06000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_PBEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC3_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL0_SRC2_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL0_SRC2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001F0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_S = @as(c_uint, 16);
pub const LRFDDBELL_GPOSEL0_SRC2_RFCTRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00190000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00180000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00170000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00160000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00150000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00140000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00130000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00120000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_RFEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00110000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000E0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000D0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000B0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000A0000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_MCEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00090000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_PBEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_GPOSEL0_SRC2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL0_SRC1_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL0_SRC1_M = @as(c_uint, 0x00001F00);
pub const LRFDDBELL_GPOSEL0_SRC1_S = @as(c_uint, 8);
pub const LRFDDBELL_GPOSEL0_SRC1_RFCTRC = @as(c_uint, 0x00001900);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO7 = @as(c_uint, 0x00001800);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO6 = @as(c_uint, 0x00001700);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO5 = @as(c_uint, 0x00001600);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO4 = @as(c_uint, 0x00001500);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO3 = @as(c_uint, 0x00001400);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO2 = @as(c_uint, 0x00001300);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO1 = @as(c_uint, 0x00001200);
pub const LRFDDBELL_GPOSEL0_SRC1_RFEGPO0 = @as(c_uint, 0x00001100);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO7 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO6 = @as(c_uint, 0x00000F00);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO5 = @as(c_uint, 0x00000E00);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO4 = @as(c_uint, 0x00000D00);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO3 = @as(c_uint, 0x00000C00);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO2 = @as(c_uint, 0x00000B00);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO1 = @as(c_uint, 0x00000A00);
pub const LRFDDBELL_GPOSEL0_SRC1_MCEGPO0 = @as(c_uint, 0x00000900);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO7 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO6 = @as(c_uint, 0x00000700);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO5 = @as(c_uint, 0x00000600);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO4 = @as(c_uint, 0x00000500);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO3 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO2 = @as(c_uint, 0x00000300);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO1 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_GPOSEL0_SRC1_PBEGPO0 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_GPOSEL0_SRC1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL0_SRC0_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL0_SRC0_M = @as(c_uint, 0x0000001F);
pub const LRFDDBELL_GPOSEL0_SRC0_S = @as(c_uint, 0);
pub const LRFDDBELL_GPOSEL0_SRC0_RFCTRC = @as(c_uint, 0x00000019);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO7 = @as(c_uint, 0x00000018);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO6 = @as(c_uint, 0x00000017);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO5 = @as(c_uint, 0x00000016);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO4 = @as(c_uint, 0x00000015);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO3 = @as(c_uint, 0x00000014);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO2 = @as(c_uint, 0x00000013);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO1 = @as(c_uint, 0x00000012);
pub const LRFDDBELL_GPOSEL0_SRC0_RFEGPO0 = @as(c_uint, 0x00000011);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO7 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO6 = @as(c_uint, 0x0000000F);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO5 = @as(c_uint, 0x0000000E);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO4 = @as(c_uint, 0x0000000D);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO3 = @as(c_uint, 0x0000000C);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO2 = @as(c_uint, 0x0000000B);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO1 = @as(c_uint, 0x0000000A);
pub const LRFDDBELL_GPOSEL0_SRC0_MCEGPO0 = @as(c_uint, 0x00000009);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO7 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO6 = @as(c_uint, 0x00000007);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO5 = @as(c_uint, 0x00000006);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO4 = @as(c_uint, 0x00000005);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO3 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO2 = @as(c_uint, 0x00000003);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_GPOSEL0_SRC0_PBEGPO0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_GPOSEL0_SRC0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL1_SRC7_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL1_SRC7_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x1F000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_S = @as(c_uint, 24);
pub const LRFDDBELL_GPOSEL1_SRC7_RFCTRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x19000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x18000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x17000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x16000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x15000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x14000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x13000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x12000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_RFEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x11000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0F000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0E000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0D000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0C000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0B000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0A000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_MCEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x09000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x06000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x05000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x03000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_PBEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC7_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL1_SRC6_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL1_SRC6_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001F0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_S = @as(c_uint, 16);
pub const LRFDDBELL_GPOSEL1_SRC6_RFCTRC = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00190000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00180000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00170000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00160000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00150000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00140000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00130000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00120000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_RFEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00110000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000F0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000E0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000D0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000C0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000B0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x000A0000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_MCEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00090000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO7 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO6 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00070000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO5 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00060000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO4 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00050000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO3 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00030000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_PBEGPO0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_GPOSEL1_SRC6_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL1_SRC5_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL1_SRC5_M = @as(c_uint, 0x00001F00);
pub const LRFDDBELL_GPOSEL1_SRC5_S = @as(c_uint, 8);
pub const LRFDDBELL_GPOSEL1_SRC5_RFCTRC = @as(c_uint, 0x00001900);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO7 = @as(c_uint, 0x00001800);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO6 = @as(c_uint, 0x00001700);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO5 = @as(c_uint, 0x00001600);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO4 = @as(c_uint, 0x00001500);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO3 = @as(c_uint, 0x00001400);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO2 = @as(c_uint, 0x00001300);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO1 = @as(c_uint, 0x00001200);
pub const LRFDDBELL_GPOSEL1_SRC5_RFEGPO0 = @as(c_uint, 0x00001100);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO7 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO6 = @as(c_uint, 0x00000F00);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO5 = @as(c_uint, 0x00000E00);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO4 = @as(c_uint, 0x00000D00);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO3 = @as(c_uint, 0x00000C00);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO2 = @as(c_uint, 0x00000B00);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO1 = @as(c_uint, 0x00000A00);
pub const LRFDDBELL_GPOSEL1_SRC5_MCEGPO0 = @as(c_uint, 0x00000900);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO7 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO6 = @as(c_uint, 0x00000700);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO5 = @as(c_uint, 0x00000600);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO4 = @as(c_uint, 0x00000500);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO3 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO2 = @as(c_uint, 0x00000300);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO1 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_GPOSEL1_SRC5_PBEGPO0 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_GPOSEL1_SRC5_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_GPOSEL1_SRC4_W = @as(c_uint, 5);
pub const LRFDDBELL_GPOSEL1_SRC4_M = @as(c_uint, 0x0000001F);
pub const LRFDDBELL_GPOSEL1_SRC4_S = @as(c_uint, 0);
pub const LRFDDBELL_GPOSEL1_SRC4_RFCTRC = @as(c_uint, 0x00000019);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO7 = @as(c_uint, 0x00000018);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO6 = @as(c_uint, 0x00000017);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO5 = @as(c_uint, 0x00000016);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO4 = @as(c_uint, 0x00000015);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO3 = @as(c_uint, 0x00000014);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO2 = @as(c_uint, 0x00000013);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO1 = @as(c_uint, 0x00000012);
pub const LRFDDBELL_GPOSEL1_SRC4_RFEGPO0 = @as(c_uint, 0x00000011);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO7 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO6 = @as(c_uint, 0x0000000F);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO5 = @as(c_uint, 0x0000000E);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO4 = @as(c_uint, 0x0000000D);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO3 = @as(c_uint, 0x0000000C);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO2 = @as(c_uint, 0x0000000B);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO1 = @as(c_uint, 0x0000000A);
pub const LRFDDBELL_GPOSEL1_SRC4_MCEGPO0 = @as(c_uint, 0x00000009);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO7 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO6 = @as(c_uint, 0x00000007);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO5 = @as(c_uint, 0x00000006);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO4 = @as(c_uint, 0x00000005);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO3 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO2 = @as(c_uint, 0x00000003);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_GPOSEL1_SRC4_PBEGPO0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_GPOSEL1_SRC4_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_IMASK0_SYSTIM2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_IMASK0_SYSTIM1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_IMASK0_SYSTIM0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK0_SYSTIM0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK0_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK0_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_IMASK0_MDMDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK0_MDMDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK0_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK0_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_IMASK0_MDMIN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK0_MDMIN_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK0_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK0_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_IMASK0_MDMOUT_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK0_MDMOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_IMASK0_MDMSOFT2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_IMASK0_MDMSOFT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_IMASK0_MDMSOFT0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK0_MDMSOFT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK0_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK0_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_IMASK0_RFEDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK0_RFEDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK0_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK0_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_IMASK0_RFESOFT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK0_RFESOFT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK0_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK0_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_IMASK0_RFESOFT0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK0_RFESOFT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK0_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_IMASK0_LOCK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK0_LOCK_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK0_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_IMASK0_LOL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK0_LOL_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK0_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK0_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_IMASK0_TXFIFO_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK0_TXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK0_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK0_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_IMASK0_RXFIFO_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK0_RXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK0_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK0_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_IMASK0_PBE15_EN = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK0_PBE15_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK0_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK0_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_IMASK0_PBE14_EN = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK0_PBE14_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK0_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK0_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_IMASK0_PBE13_EN = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK0_PBE13_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK0_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK0_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_IMASK0_PBE12_EN = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK0_PBE12_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK0_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK0_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_IMASK0_PBE11_EN = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK0_PBE11_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK0_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK0_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_IMASK0_PBE10_EN = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK0_PBE10_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK0_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK0_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_IMASK0_PBE8_EN = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK0_PBE8_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK0_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK0_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_IMASK0_PBE7_EN = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK0_PBE7_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK0_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK0_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_IMASK0_PBE6_EN = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK0_PBE6_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK0_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK0_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_IMASK0_PBE5_EN = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK0_PBE5_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK0_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK0_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_IMASK0_PBE4_EN = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK0_PBE4_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK0_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK0_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_IMASK0_PBE3_EN = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK0_PBE3_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK0_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK0_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_IMASK0_PBE2_EN = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK0_PBE2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK0_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK0_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_IMASK0_PBE1_EN = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK0_PBE1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK0_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK0_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK0_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_IMASK0_PBE0_EN = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK0_PBE0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_RIS0_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_RIS0_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_RIS0_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS0_SYSTIM0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS0_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS0_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_RIS0_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS0_MDMDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS0_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS0_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_RIS0_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS0_MDMIN_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS0_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS0_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_RIS0_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS0_MDMOUT_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_RIS0_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_RIS0_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_RIS0_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS0_MDMSOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS0_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS0_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_RIS0_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS0_RFEDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS0_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS0_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_RIS0_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS0_RFESOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS0_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS0_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_RIS0_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS0_RFESOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS0_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_RIS0_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS0_LOCK_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS0_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_RIS0_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS0_LOL_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS0_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS0_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_RIS0_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS0_TXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS0_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS0_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_RIS0_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS0_RXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS0_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS0_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_RIS0_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS0_PBE15_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS0_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS0_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_RIS0_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS0_PBE14_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS0_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS0_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_RIS0_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS0_PBE13_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS0_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS0_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_RIS0_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS0_PBE12_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS0_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS0_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_RIS0_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS0_PBE11_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS0_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS0_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_RIS0_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS0_PBE10_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS0_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS0_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_RIS0_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS0_PBE9_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS0_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS0_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_RIS0_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS0_PBE8_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS0_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS0_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_RIS0_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS0_PBE7_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS0_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS0_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_RIS0_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS0_PBE6_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS0_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS0_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_RIS0_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS0_PBE5_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS0_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS0_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_RIS0_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS0_PBE4_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS0_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS0_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_RIS0_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS0_PBE3_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS0_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS0_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_RIS0_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS0_PBE2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS0_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS0_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_RIS0_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS0_PBE1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS0_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS0_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS0_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_RIS0_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS0_PBE0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_MIS0_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_MIS0_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_MIS0_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS0_SYSTIM0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS0_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS0_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_MIS0_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS0_MDMDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS0_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS0_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_MIS0_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS0_MDMIN_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS0_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS0_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_MIS0_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS0_MDMOUT_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_MIS0_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_MIS0_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_MIS0_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS0_MDMSOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS0_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS0_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_MIS0_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS0_RFEDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS0_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS0_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_MIS0_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS0_RFESOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS0_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS0_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_MIS0_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS0_RFESOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS0_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_MIS0_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS0_LOCK_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS0_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_MIS0_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS0_LOL_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS0_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS0_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_MIS0_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS0_TXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS0_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS0_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_MIS0_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS0_RXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS0_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS0_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_MIS0_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS0_PBE15_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS0_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS0_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_MIS0_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS0_PBE14_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS0_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS0_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_MIS0_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS0_PBE13_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS0_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS0_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_MIS0_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS0_PBE12_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS0_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS0_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_MIS0_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS0_PBE11_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS0_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS0_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_MIS0_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS0_PBE10_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS0_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS0_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_MIS0_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS0_PBE9_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS0_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS0_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_MIS0_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS0_PBE8_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS0_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS0_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_MIS0_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS0_PBE7_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS0_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS0_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_MIS0_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS0_PBE6_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS0_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS0_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_MIS0_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS0_PBE5_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS0_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS0_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_MIS0_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS0_PBE4_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS0_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS0_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_MIS0_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS0_PBE3_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS0_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS0_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_MIS0_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS0_PBE2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS0_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS0_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_MIS0_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS0_PBE1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS0_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS0_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS0_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_MIS0_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS0_PBE0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_ISET0_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_ISET0_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_ISET0_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET0_SYSTIM0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET0_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET0_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_ISET0_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET0_MDMDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET0_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET0_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_ISET0_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET0_MDMIN_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET0_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET0_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_ISET0_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET0_MDMOUT_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_ISET0_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_ISET0_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_ISET0_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET0_MDMSOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET0_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET0_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_ISET0_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET0_RFEDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET0_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET0_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_ISET0_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET0_RFESOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET0_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET0_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_ISET0_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET0_RFESOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET0_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_ISET0_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET0_LOCK_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET0_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_ISET0_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET0_LOL_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET0_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET0_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_ISET0_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET0_TXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET0_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET0_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_ISET0_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET0_RXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET0_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET0_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_ISET0_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET0_PBE15_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET0_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET0_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_ISET0_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET0_PBE14_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET0_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET0_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_ISET0_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET0_PBE13_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET0_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET0_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_ISET0_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET0_PBE12_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET0_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET0_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_ISET0_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET0_PBE11_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET0_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET0_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_ISET0_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET0_PBE10_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET0_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET0_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_ISET0_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET0_PBE9_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET0_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET0_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_ISET0_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET0_PBE8_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET0_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET0_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_ISET0_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET0_PBE7_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET0_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET0_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_ISET0_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET0_PBE6_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET0_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET0_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_ISET0_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET0_PBE5_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET0_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET0_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_ISET0_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET0_PBE4_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET0_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET0_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_ISET0_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET0_PBE3_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET0_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET0_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_ISET0_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET0_PBE2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET0_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET0_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_ISET0_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET0_PBE1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET0_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET0_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET0_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_ISET0_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET0_PBE0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_ICLR0_SYSTIM2_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_ICLR0_SYSTIM1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_ICLR0_SYSTIM0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR0_SYSTIM0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR0_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR0_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_ICLR0_MDMDONE_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR0_MDMDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR0_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR0_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_ICLR0_MDMIN_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR0_MDMIN_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR0_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR0_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_ICLR0_MDMOUT_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR0_MDMOUT_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_ICLR0_MDMSOFT2_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_ICLR0_MDMSOFT1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_ICLR0_MDMSOFT0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR0_MDMSOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR0_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR0_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_ICLR0_RFEDONE_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR0_RFEDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR0_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR0_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_ICLR0_RFESOFT1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR0_RFESOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR0_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR0_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_ICLR0_RFESOFT0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR0_RFESOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR0_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR0_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_ICLR0_LOCK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR0_LOCK_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR0_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR0_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_ICLR0_LOL_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR0_LOL_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR0_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR0_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_ICLR0_TXFIFO_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR0_TXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR0_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR0_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_ICLR0_RXFIFO_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR0_RXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR0_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR0_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_ICLR0_PBE15_CLR = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR0_PBE15_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR0_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR0_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_ICLR0_PBE14_CLR = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR0_PBE14_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR0_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR0_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_ICLR0_PBE13_CLR = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR0_PBE13_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR0_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR0_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_ICLR0_PBE12_CLR = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR0_PBE12_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR0_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR0_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_ICLR0_PBE11_CLR = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR0_PBE11_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR0_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR0_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_ICLR0_PBE10_CLR = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR0_PBE10_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR0_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR0_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_ICLR0_PBE9_CLR = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR0_PBE9_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR0_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR0_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_ICLR0_PBE8_CLR = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR0_PBE8_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR0_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR0_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_ICLR0_PBE7_CLR = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR0_PBE7_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR0_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR0_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_ICLR0_PBE6_CLR = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR0_PBE6_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR0_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR0_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_ICLR0_PBE5_CLR = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR0_PBE5_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR0_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR0_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_ICLR0_PBE4_CLR = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR0_PBE4_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR0_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR0_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_ICLR0_PBE3_CLR = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR0_PBE3_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR0_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR0_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_ICLR0_PBE2_CLR = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR0_PBE2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR0_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR0_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_ICLR0_PBE1_CLR = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR0_PBE1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR0_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR0_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR0_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_ICLR0_PBE0_CLR = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR0_PBE0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM2_S = @as(c_uint, 30);
pub const LRFDDBELL_IMASK1_SYSTIM2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM1_S = @as(c_uint, 29);
pub const LRFDDBELL_IMASK1_SYSTIM1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM0_S = @as(c_uint, 28);
pub const LRFDDBELL_IMASK1_SYSTIM0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK1_SYSTIM0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK1_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK1_MDMDONE_S = @as(c_uint, 27);
pub const LRFDDBELL_IMASK1_MDMDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK1_MDMDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK1_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK1_MDMIN_S = @as(c_uint, 26);
pub const LRFDDBELL_IMASK1_MDMIN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK1_MDMIN_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK1_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK1_MDMOUT_S = @as(c_uint, 25);
pub const LRFDDBELL_IMASK1_MDMOUT_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK1_MDMOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT2_S = @as(c_uint, 24);
pub const LRFDDBELL_IMASK1_MDMSOFT2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT1_S = @as(c_uint, 23);
pub const LRFDDBELL_IMASK1_MDMSOFT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT0_S = @as(c_uint, 22);
pub const LRFDDBELL_IMASK1_MDMSOFT0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK1_MDMSOFT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK1_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK1_RFEDONE_S = @as(c_uint, 21);
pub const LRFDDBELL_IMASK1_RFEDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK1_RFEDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK1_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK1_RFESOFT1_S = @as(c_uint, 20);
pub const LRFDDBELL_IMASK1_RFESOFT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK1_RFESOFT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK1_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK1_RFESOFT0_S = @as(c_uint, 19);
pub const LRFDDBELL_IMASK1_RFESOFT0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK1_RFESOFT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK1_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK1_LOCK_S = @as(c_uint, 18);
pub const LRFDDBELL_IMASK1_LOCK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK1_LOCK_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK1_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK1_LOL_S = @as(c_uint, 17);
pub const LRFDDBELL_IMASK1_LOL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK1_LOL_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK1_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK1_TXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_IMASK1_TXFIFO_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK1_TXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_RXFIFO = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK1_RXFIFO_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK1_RXFIFO_S = @as(c_uint, 15);
pub const LRFDDBELL_IMASK1_RXFIFO_EN = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK1_RXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE15 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK1_PBE15_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK1_PBE15_S = @as(c_uint, 14);
pub const LRFDDBELL_IMASK1_PBE15_EN = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK1_PBE15_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE14 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK1_PBE14_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK1_PBE14_S = @as(c_uint, 13);
pub const LRFDDBELL_IMASK1_PBE14_EN = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK1_PBE14_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE13 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK1_PBE13_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK1_PBE13_S = @as(c_uint, 12);
pub const LRFDDBELL_IMASK1_PBE13_EN = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK1_PBE13_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE12 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK1_PBE12_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK1_PBE12_S = @as(c_uint, 11);
pub const LRFDDBELL_IMASK1_PBE12_EN = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK1_PBE12_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE11 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK1_PBE11_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK1_PBE11_S = @as(c_uint, 10);
pub const LRFDDBELL_IMASK1_PBE11_EN = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK1_PBE11_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE10 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_IMASK1_PBE10_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_IMASK1_PBE10_S = @as(c_uint, 9);
pub const LRFDDBELL_IMASK1_PBE10_EN = @as(c_uint, 0x00000200);
pub const LRFDDBELL_IMASK1_PBE10_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK1_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK1_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_IMASK1_PBE8_EN = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK1_PBE8_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK1_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK1_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_IMASK1_PBE7_EN = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK1_PBE7_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK1_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK1_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_IMASK1_PBE6_EN = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK1_PBE6_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK1_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK1_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_IMASK1_PBE5_EN = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK1_PBE5_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK1_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK1_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_IMASK1_PBE4_EN = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK1_PBE4_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK1_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK1_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_IMASK1_PBE3_EN = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK1_PBE3_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK1_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK1_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_IMASK1_PBE2_EN = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK1_PBE2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK1_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK1_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_IMASK1_PBE1_EN = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK1_PBE1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK1_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK1_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK1_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_IMASK1_PBE0_EN = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK1_PBE0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_RIS1_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_RIS1_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_RIS1_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS1_SYSTIM0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS1_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS1_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_RIS1_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS1_MDMDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS1_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS1_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_RIS1_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS1_MDMIN_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS1_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS1_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_RIS1_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS1_MDMOUT_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_RIS1_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_RIS1_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_RIS1_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS1_MDMSOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS1_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS1_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_RIS1_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS1_RFEDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS1_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS1_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_RIS1_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS1_RFESOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS1_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS1_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_RIS1_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS1_RFESOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS1_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS1_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_RIS1_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS1_LOCK_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS1_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS1_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_RIS1_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS1_LOL_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS1_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS1_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_RIS1_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS1_TXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS1_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS1_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_RIS1_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS1_RXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS1_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS1_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_RIS1_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS1_PBE15_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS1_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS1_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_RIS1_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS1_PBE14_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS1_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS1_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_RIS1_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS1_PBE13_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS1_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS1_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_RIS1_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS1_PBE12_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS1_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS1_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_RIS1_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS1_PBE11_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS1_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS1_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_RIS1_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS1_PBE10_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS1_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS1_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_RIS1_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS1_PBE9_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS1_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS1_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_RIS1_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS1_PBE8_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS1_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS1_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_RIS1_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS1_PBE7_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS1_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS1_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_RIS1_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS1_PBE6_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS1_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS1_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_RIS1_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS1_PBE5_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS1_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS1_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_RIS1_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS1_PBE4_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS1_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS1_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_RIS1_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS1_PBE3_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS1_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS1_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_RIS1_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS1_PBE2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS1_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS1_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_RIS1_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS1_PBE1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS1_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS1_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS1_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_RIS1_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS1_PBE0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_MIS1_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_MIS1_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_MIS1_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS1_SYSTIM0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS1_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS1_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_MIS1_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS1_MDMDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS1_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS1_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_MIS1_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS1_MDMIN_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS1_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS1_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_MIS1_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS1_MDMOUT_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_MIS1_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_MIS1_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_MIS1_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS1_MDMSOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS1_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS1_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_MIS1_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS1_RFEDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS1_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS1_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_MIS1_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS1_RFESOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS1_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS1_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_MIS1_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS1_RFESOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS1_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS1_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_MIS1_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS1_LOCK_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS1_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS1_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_MIS1_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS1_LOL_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS1_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS1_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_MIS1_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS1_TXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS1_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS1_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_MIS1_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS1_RXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS1_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS1_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_MIS1_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS1_PBE15_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS1_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS1_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_MIS1_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS1_PBE14_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS1_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS1_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_MIS1_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS1_PBE13_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS1_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS1_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_MIS1_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS1_PBE12_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS1_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS1_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_MIS1_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS1_PBE11_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS1_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS1_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_MIS1_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS1_PBE10_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS1_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS1_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_MIS1_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS1_PBE9_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS1_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS1_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_MIS1_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS1_PBE8_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS1_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS1_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_MIS1_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS1_PBE7_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS1_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS1_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_MIS1_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS1_PBE6_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS1_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS1_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_MIS1_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS1_PBE5_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS1_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS1_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_MIS1_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS1_PBE4_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS1_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS1_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_MIS1_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS1_PBE3_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS1_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS1_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_MIS1_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS1_PBE2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS1_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS1_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_MIS1_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS1_PBE1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS1_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS1_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS1_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_MIS1_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS1_PBE0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_ISET1_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_ISET1_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_ISET1_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET1_SYSTIM0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET1_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET1_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_ISET1_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET1_MDMDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET1_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET1_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_ISET1_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET1_MDMIN_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET1_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET1_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_ISET1_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET1_MDMOUT_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_ISET1_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_ISET1_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_ISET1_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET1_MDMSOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET1_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET1_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_ISET1_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET1_RFEDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET1_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET1_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_ISET1_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET1_RFESOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET1_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET1_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_ISET1_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET1_RFESOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET1_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET1_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_ISET1_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET1_LOCK_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET1_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET1_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_ISET1_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET1_LOL_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET1_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET1_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_ISET1_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET1_TXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET1_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET1_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_ISET1_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET1_RXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET1_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET1_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_ISET1_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET1_PBE15_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET1_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET1_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_ISET1_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET1_PBE14_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET1_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET1_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_ISET1_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET1_PBE13_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET1_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET1_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_ISET1_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET1_PBE12_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET1_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET1_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_ISET1_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET1_PBE11_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET1_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET1_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_ISET1_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET1_PBE10_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET1_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET1_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_ISET1_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET1_PBE9_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET1_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET1_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_ISET1_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET1_PBE8_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET1_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET1_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_ISET1_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET1_PBE7_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET1_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET1_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_ISET1_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET1_PBE6_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET1_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET1_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_ISET1_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET1_PBE5_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET1_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET1_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_ISET1_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET1_PBE4_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET1_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET1_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_ISET1_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET1_PBE3_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET1_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET1_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_ISET1_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET1_PBE2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET1_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET1_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_ISET1_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET1_PBE1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET1_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET1_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET1_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_ISET1_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET1_PBE0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_ICLR1_SYSTIM2_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_ICLR1_SYSTIM1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_ICLR1_SYSTIM0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR1_SYSTIM0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR1_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR1_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_ICLR1_MDMDONE_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR1_MDMDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR1_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR1_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_ICLR1_MDMIN_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR1_MDMIN_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR1_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR1_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_ICLR1_MDMOUT_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR1_MDMOUT_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_ICLR1_MDMSOFT2_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_ICLR1_MDMSOFT1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_ICLR1_MDMSOFT0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR1_MDMSOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR1_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR1_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_ICLR1_RFEDONE_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR1_RFEDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR1_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR1_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_ICLR1_RFESOFT1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR1_RFESOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR1_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR1_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_ICLR1_RFESOFT0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR1_RFESOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR1_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR1_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_ICLR1_LOCK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR1_LOCK_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR1_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR1_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_ICLR1_LOL_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR1_LOL_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR1_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR1_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_ICLR1_TXFIFO_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR1_TXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR1_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR1_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_ICLR1_RXFIFO_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR1_RXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR1_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR1_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_ICLR1_PBE15_CLR = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR1_PBE15_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR1_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR1_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_ICLR1_PBE14_CLR = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR1_PBE14_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR1_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR1_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_ICLR1_PBE13_CLR = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR1_PBE13_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR1_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR1_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_ICLR1_PBE12_CLR = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR1_PBE12_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR1_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR1_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_ICLR1_PBE11_CLR = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR1_PBE11_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR1_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR1_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_ICLR1_PBE10_CLR = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR1_PBE10_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR1_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR1_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_ICLR1_PBE9_CLR = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR1_PBE9_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR1_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR1_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_ICLR1_PBE8_CLR = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR1_PBE8_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR1_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR1_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_ICLR1_PBE7_CLR = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR1_PBE7_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR1_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR1_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_ICLR1_PBE6_CLR = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR1_PBE6_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR1_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR1_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_ICLR1_PBE5_CLR = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR1_PBE5_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR1_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR1_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_ICLR1_PBE4_CLR = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR1_PBE4_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR1_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR1_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_ICLR1_PBE3_CLR = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR1_PBE3_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR1_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR1_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_ICLR1_PBE2_CLR = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR1_PBE2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR1_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR1_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_ICLR1_PBE1_CLR = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR1_PBE1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR1_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR1_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR1_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_ICLR1_PBE0_CLR = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR1_PBE0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM2_S = @as(c_uint, 30);
pub const LRFDDBELL_IMASK2_SYSTIM2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM1_S = @as(c_uint, 29);
pub const LRFDDBELL_IMASK2_SYSTIM1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM0_S = @as(c_uint, 28);
pub const LRFDDBELL_IMASK2_SYSTIM0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_IMASK2_SYSTIM0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK2_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK2_MDMDONE_S = @as(c_uint, 27);
pub const LRFDDBELL_IMASK2_MDMDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_IMASK2_MDMDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK2_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK2_MDMIN_S = @as(c_uint, 26);
pub const LRFDDBELL_IMASK2_MDMIN_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_IMASK2_MDMIN_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK2_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK2_MDMOUT_S = @as(c_uint, 25);
pub const LRFDDBELL_IMASK2_MDMOUT_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_IMASK2_MDMOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT2_S = @as(c_uint, 24);
pub const LRFDDBELL_IMASK2_MDMSOFT2_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT1_S = @as(c_uint, 23);
pub const LRFDDBELL_IMASK2_MDMSOFT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT0_S = @as(c_uint, 22);
pub const LRFDDBELL_IMASK2_MDMSOFT0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_IMASK2_MDMSOFT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK2_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK2_RFEDONE_S = @as(c_uint, 21);
pub const LRFDDBELL_IMASK2_RFEDONE_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_IMASK2_RFEDONE_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK2_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK2_RFESOFT1_S = @as(c_uint, 20);
pub const LRFDDBELL_IMASK2_RFESOFT1_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_IMASK2_RFESOFT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK2_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK2_RFESOFT0_S = @as(c_uint, 19);
pub const LRFDDBELL_IMASK2_RFESOFT0_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_IMASK2_RFESOFT0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK2_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK2_LOCK_S = @as(c_uint, 18);
pub const LRFDDBELL_IMASK2_LOCK_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_IMASK2_LOCK_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK2_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK2_LOL_S = @as(c_uint, 17);
pub const LRFDDBELL_IMASK2_LOL_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_IMASK2_LOL_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK2_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK2_TXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_IMASK2_TXFIFO_EN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_IMASK2_TXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_RXFIFO = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK2_RXFIFO_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK2_RXFIFO_S = @as(c_uint, 15);
pub const LRFDDBELL_IMASK2_RXFIFO_EN = @as(c_uint, 0x00008000);
pub const LRFDDBELL_IMASK2_RXFIFO_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE15 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK2_PBE15_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK2_PBE15_S = @as(c_uint, 14);
pub const LRFDDBELL_IMASK2_PBE15_EN = @as(c_uint, 0x00004000);
pub const LRFDDBELL_IMASK2_PBE15_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE14 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK2_PBE14_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK2_PBE14_S = @as(c_uint, 13);
pub const LRFDDBELL_IMASK2_PBE14_EN = @as(c_uint, 0x00002000);
pub const LRFDDBELL_IMASK2_PBE14_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE13 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK2_PBE13_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK2_PBE13_S = @as(c_uint, 12);
pub const LRFDDBELL_IMASK2_PBE13_EN = @as(c_uint, 0x00001000);
pub const LRFDDBELL_IMASK2_PBE13_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE12 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK2_PBE12_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK2_PBE12_S = @as(c_uint, 11);
pub const LRFDDBELL_IMASK2_PBE12_EN = @as(c_uint, 0x00000800);
pub const LRFDDBELL_IMASK2_PBE12_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE11 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK2_PBE11_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK2_PBE11_S = @as(c_uint, 10);
pub const LRFDDBELL_IMASK2_PBE11_EN = @as(c_uint, 0x00000400);
pub const LRFDDBELL_IMASK2_PBE11_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE10 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_IMASK2_PBE10_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_IMASK2_PBE10_S = @as(c_uint, 9);
pub const LRFDDBELL_IMASK2_PBE10_EN = @as(c_uint, 0x00000200);
pub const LRFDDBELL_IMASK2_PBE10_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK2_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK2_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_IMASK2_PBE8_EN = @as(c_uint, 0x00000100);
pub const LRFDDBELL_IMASK2_PBE8_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK2_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK2_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_IMASK2_PBE7_EN = @as(c_uint, 0x00000080);
pub const LRFDDBELL_IMASK2_PBE7_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK2_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK2_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_IMASK2_PBE6_EN = @as(c_uint, 0x00000040);
pub const LRFDDBELL_IMASK2_PBE6_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK2_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK2_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_IMASK2_PBE5_EN = @as(c_uint, 0x00000020);
pub const LRFDDBELL_IMASK2_PBE5_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK2_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK2_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_IMASK2_PBE4_EN = @as(c_uint, 0x00000010);
pub const LRFDDBELL_IMASK2_PBE4_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK2_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK2_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_IMASK2_PBE3_EN = @as(c_uint, 0x00000008);
pub const LRFDDBELL_IMASK2_PBE3_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK2_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK2_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_IMASK2_PBE2_EN = @as(c_uint, 0x00000004);
pub const LRFDDBELL_IMASK2_PBE2_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK2_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK2_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_IMASK2_PBE1_EN = @as(c_uint, 0x00000002);
pub const LRFDDBELL_IMASK2_PBE1_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_IMASK2_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK2_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK2_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_IMASK2_PBE0_EN = @as(c_uint, 0x00000001);
pub const LRFDDBELL_IMASK2_PBE0_DIS = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_RIS2_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_RIS2_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_RIS2_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_RIS2_SYSTIM0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS2_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS2_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_RIS2_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_RIS2_MDMDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS2_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS2_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_RIS2_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_RIS2_MDMIN_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS2_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS2_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_RIS2_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_RIS2_MDMOUT_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_RIS2_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_RIS2_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_RIS2_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_RIS2_MDMSOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS2_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS2_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_RIS2_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_RIS2_RFEDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS2_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS2_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_RIS2_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_RIS2_RFESOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS2_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS2_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_RIS2_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_RIS2_RFESOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS2_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS2_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_RIS2_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_RIS2_LOCK_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS2_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS2_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_RIS2_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_RIS2_LOL_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS2_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS2_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_RIS2_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_RIS2_TXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS2_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS2_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_RIS2_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_RIS2_RXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS2_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS2_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_RIS2_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_RIS2_PBE15_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS2_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS2_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_RIS2_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_RIS2_PBE14_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS2_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS2_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_RIS2_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_RIS2_PBE13_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS2_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS2_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_RIS2_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_RIS2_PBE12_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS2_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS2_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_RIS2_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_RIS2_PBE11_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS2_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS2_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_RIS2_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_RIS2_PBE10_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS2_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS2_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_RIS2_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_RIS2_PBE9_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS2_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS2_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_RIS2_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_RIS2_PBE8_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS2_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS2_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_RIS2_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_RIS2_PBE7_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS2_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS2_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_RIS2_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_RIS2_PBE6_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS2_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS2_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_RIS2_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_RIS2_PBE5_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS2_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS2_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_RIS2_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_RIS2_PBE4_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS2_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS2_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_RIS2_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_RIS2_PBE3_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS2_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS2_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_RIS2_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_RIS2_PBE2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS2_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS2_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_RIS2_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_RIS2_PBE1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_RIS2_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS2_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS2_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_RIS2_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_RIS2_PBE0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_MIS2_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_MIS2_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_MIS2_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_MIS2_SYSTIM0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS2_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS2_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_MIS2_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_MIS2_MDMDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS2_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS2_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_MIS2_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_MIS2_MDMIN_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS2_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS2_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_MIS2_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_MIS2_MDMOUT_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_MIS2_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_MIS2_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_MIS2_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_MIS2_MDMSOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS2_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS2_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_MIS2_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_MIS2_RFEDONE_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS2_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS2_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_MIS2_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_MIS2_RFESOFT1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS2_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS2_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_MIS2_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_MIS2_RFESOFT0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS2_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS2_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_MIS2_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_MIS2_LOCK_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS2_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS2_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_MIS2_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_MIS2_LOL_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS2_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS2_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_MIS2_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_MIS2_TXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS2_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS2_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_MIS2_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_MIS2_RXFIFO_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS2_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS2_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_MIS2_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_MIS2_PBE15_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS2_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS2_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_MIS2_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_MIS2_PBE14_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS2_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS2_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_MIS2_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_MIS2_PBE13_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS2_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS2_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_MIS2_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_MIS2_PBE12_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS2_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS2_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_MIS2_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_MIS2_PBE11_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS2_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS2_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_MIS2_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_MIS2_PBE10_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS2_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS2_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_MIS2_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_MIS2_PBE9_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS2_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS2_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_MIS2_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_MIS2_PBE8_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS2_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS2_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_MIS2_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_MIS2_PBE7_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS2_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS2_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_MIS2_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_MIS2_PBE6_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS2_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS2_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_MIS2_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_MIS2_PBE5_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS2_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS2_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_MIS2_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_MIS2_PBE4_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS2_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS2_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_MIS2_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_MIS2_PBE3_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS2_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS2_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_MIS2_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_MIS2_PBE2_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS2_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS2_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_MIS2_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_MIS2_PBE1_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_MIS2_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS2_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS2_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_MIS2_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_MIS2_PBE0_CLR = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_ISET2_SYSTIM2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_ISET2_SYSTIM1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_ISET2_SYSTIM0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ISET2_SYSTIM0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET2_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET2_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_ISET2_MDMDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ISET2_MDMDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET2_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET2_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_ISET2_MDMIN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ISET2_MDMIN_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET2_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET2_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_ISET2_MDMOUT_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ISET2_MDMOUT_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_ISET2_MDMSOFT2_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_ISET2_MDMSOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_ISET2_MDMSOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ISET2_MDMSOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET2_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET2_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_ISET2_RFEDONE_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ISET2_RFEDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET2_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET2_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_ISET2_RFESOFT1_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ISET2_RFESOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET2_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET2_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_ISET2_RFESOFT0_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ISET2_RFESOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET2_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET2_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_ISET2_LOCK_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ISET2_LOCK_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET2_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET2_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_ISET2_LOL_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ISET2_LOL_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET2_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET2_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_ISET2_TXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ISET2_TXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET2_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET2_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_ISET2_RXFIFO_SET = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ISET2_RXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET2_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET2_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_ISET2_PBE15_SET = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ISET2_PBE15_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET2_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET2_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_ISET2_PBE14_SET = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ISET2_PBE14_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET2_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET2_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_ISET2_PBE13_SET = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ISET2_PBE13_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET2_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET2_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_ISET2_PBE12_SET = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ISET2_PBE12_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET2_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET2_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_ISET2_PBE11_SET = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ISET2_PBE11_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET2_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET2_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_ISET2_PBE10_SET = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ISET2_PBE10_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET2_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET2_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_ISET2_PBE9_SET = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ISET2_PBE9_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET2_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET2_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_ISET2_PBE8_SET = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ISET2_PBE8_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET2_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET2_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_ISET2_PBE7_SET = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ISET2_PBE7_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET2_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET2_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_ISET2_PBE6_SET = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ISET2_PBE6_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET2_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET2_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_ISET2_PBE5_SET = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ISET2_PBE5_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET2_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET2_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_ISET2_PBE4_SET = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ISET2_PBE4_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET2_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET2_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_ISET2_PBE3_SET = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ISET2_PBE3_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET2_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET2_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_ISET2_PBE2_SET = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ISET2_PBE2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET2_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET2_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_ISET2_PBE1_SET = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ISET2_PBE1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ISET2_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET2_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET2_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_ISET2_PBE0_SET = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ISET2_PBE0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_SYSTIM2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM2_S = @as(c_uint, 31);
pub const LRFDDBELL_ICLR2_SYSTIM2_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_SYSTIM1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM1_S = @as(c_uint, 30);
pub const LRFDDBELL_ICLR2_SYSTIM1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_SYSTIM0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM0_S = @as(c_uint, 29);
pub const LRFDDBELL_ICLR2_SYSTIM0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hex);
pub const LRFDDBELL_ICLR2_SYSTIM0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_MDMDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR2_MDMDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR2_MDMDONE_S = @as(c_uint, 28);
pub const LRFDDBELL_ICLR2_MDMDONE_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hex);
pub const LRFDDBELL_ICLR2_MDMDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_MDMIN = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR2_MDMIN_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR2_MDMIN_S = @as(c_uint, 27);
pub const LRFDDBELL_ICLR2_MDMIN_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const LRFDDBELL_ICLR2_MDMIN_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_MDMOUT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR2_MDMOUT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR2_MDMOUT_S = @as(c_uint, 26);
pub const LRFDDBELL_ICLR2_MDMOUT_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x04000000, .hex);
pub const LRFDDBELL_ICLR2_MDMOUT_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_MDMSOFT2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT2_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT2_S = @as(c_uint, 25);
pub const LRFDDBELL_ICLR2_MDMSOFT2_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x02000000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_MDMSOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT1_S = @as(c_uint, 24);
pub const LRFDDBELL_ICLR2_MDMSOFT1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x01000000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_MDMSOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT0_S = @as(c_uint, 23);
pub const LRFDDBELL_ICLR2_MDMSOFT0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00800000, .hex);
pub const LRFDDBELL_ICLR2_MDMSOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_RFEDONE = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR2_RFEDONE_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR2_RFEDONE_S = @as(c_uint, 22);
pub const LRFDDBELL_ICLR2_RFEDONE_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00400000, .hex);
pub const LRFDDBELL_ICLR2_RFEDONE_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_RFESOFT1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR2_RFESOFT1_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR2_RFESOFT1_S = @as(c_uint, 21);
pub const LRFDDBELL_ICLR2_RFESOFT1_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00200000, .hex);
pub const LRFDDBELL_ICLR2_RFESOFT1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_RFESOFT0 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR2_RFESOFT0_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR2_RFESOFT0_S = @as(c_uint, 20);
pub const LRFDDBELL_ICLR2_RFESOFT0_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00100000, .hex);
pub const LRFDDBELL_ICLR2_RFESOFT0_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR2_LOCK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR2_LOCK_S = @as(c_uint, 19);
pub const LRFDDBELL_ICLR2_LOCK_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00080000, .hex);
pub const LRFDDBELL_ICLR2_LOCK_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_LOL = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR2_LOL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR2_LOL_S = @as(c_uint, 18);
pub const LRFDDBELL_ICLR2_LOL_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00040000, .hex);
pub const LRFDDBELL_ICLR2_LOL_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_TXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR2_TXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR2_TXFIFO_S = @as(c_uint, 17);
pub const LRFDDBELL_ICLR2_TXFIFO_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00020000, .hex);
pub const LRFDDBELL_ICLR2_TXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_RXFIFO = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR2_RXFIFO_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR2_RXFIFO_S = @as(c_uint, 16);
pub const LRFDDBELL_ICLR2_RXFIFO_CLR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const LRFDDBELL_ICLR2_RXFIFO_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE15 = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR2_PBE15_M = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR2_PBE15_S = @as(c_uint, 15);
pub const LRFDDBELL_ICLR2_PBE15_CLR = @as(c_uint, 0x00008000);
pub const LRFDDBELL_ICLR2_PBE15_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE14 = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR2_PBE14_M = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR2_PBE14_S = @as(c_uint, 14);
pub const LRFDDBELL_ICLR2_PBE14_CLR = @as(c_uint, 0x00004000);
pub const LRFDDBELL_ICLR2_PBE14_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE13 = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR2_PBE13_M = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR2_PBE13_S = @as(c_uint, 13);
pub const LRFDDBELL_ICLR2_PBE13_CLR = @as(c_uint, 0x00002000);
pub const LRFDDBELL_ICLR2_PBE13_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE12 = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR2_PBE12_M = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR2_PBE12_S = @as(c_uint, 12);
pub const LRFDDBELL_ICLR2_PBE12_CLR = @as(c_uint, 0x00001000);
pub const LRFDDBELL_ICLR2_PBE12_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE11 = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR2_PBE11_M = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR2_PBE11_S = @as(c_uint, 11);
pub const LRFDDBELL_ICLR2_PBE11_CLR = @as(c_uint, 0x00000800);
pub const LRFDDBELL_ICLR2_PBE11_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE10 = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR2_PBE10_M = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR2_PBE10_S = @as(c_uint, 10);
pub const LRFDDBELL_ICLR2_PBE10_CLR = @as(c_uint, 0x00000400);
pub const LRFDDBELL_ICLR2_PBE10_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE9 = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR2_PBE9_M = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR2_PBE9_S = @as(c_uint, 9);
pub const LRFDDBELL_ICLR2_PBE9_CLR = @as(c_uint, 0x00000200);
pub const LRFDDBELL_ICLR2_PBE9_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE8 = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR2_PBE8_M = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR2_PBE8_S = @as(c_uint, 8);
pub const LRFDDBELL_ICLR2_PBE8_CLR = @as(c_uint, 0x00000100);
pub const LRFDDBELL_ICLR2_PBE8_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE7 = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR2_PBE7_M = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR2_PBE7_S = @as(c_uint, 7);
pub const LRFDDBELL_ICLR2_PBE7_CLR = @as(c_uint, 0x00000080);
pub const LRFDDBELL_ICLR2_PBE7_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE6 = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR2_PBE6_M = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR2_PBE6_S = @as(c_uint, 6);
pub const LRFDDBELL_ICLR2_PBE6_CLR = @as(c_uint, 0x00000040);
pub const LRFDDBELL_ICLR2_PBE6_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE5 = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR2_PBE5_M = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR2_PBE5_S = @as(c_uint, 5);
pub const LRFDDBELL_ICLR2_PBE5_CLR = @as(c_uint, 0x00000020);
pub const LRFDDBELL_ICLR2_PBE5_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE4 = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR2_PBE4_M = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR2_PBE4_S = @as(c_uint, 4);
pub const LRFDDBELL_ICLR2_PBE4_CLR = @as(c_uint, 0x00000010);
pub const LRFDDBELL_ICLR2_PBE4_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE3 = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR2_PBE3_M = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR2_PBE3_S = @as(c_uint, 3);
pub const LRFDDBELL_ICLR2_PBE3_CLR = @as(c_uint, 0x00000008);
pub const LRFDDBELL_ICLR2_PBE3_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE2 = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR2_PBE2_M = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR2_PBE2_S = @as(c_uint, 2);
pub const LRFDDBELL_ICLR2_PBE2_CLR = @as(c_uint, 0x00000004);
pub const LRFDDBELL_ICLR2_PBE2_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE1 = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR2_PBE1_M = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR2_PBE1_S = @as(c_uint, 1);
pub const LRFDDBELL_ICLR2_PBE1_CLR = @as(c_uint, 0x00000002);
pub const LRFDDBELL_ICLR2_PBE1_NOEFF = @as(c_uint, 0x00000000);
pub const LRFDDBELL_ICLR2_PBE0 = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR2_PBE0_M = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR2_PBE0_S = @as(c_uint, 0);
pub const LRFDDBELL_ICLR2_PBE0_CLR = @as(c_uint, 0x00000001);
pub const LRFDDBELL_ICLR2_PBE0_NOEFF = @as(c_uint, 0x00000000);
pub const __HW_LRFDPBE_H__ = "";
pub const LRFDPBE_O_ENABLE = @as(c_uint, 0x00000000);
pub const LRFDPBE_O_FWSRC = @as(c_uint, 0x00000004);
pub const LRFDPBE_O_INIT = @as(c_uint, 0x00000008);
pub const LRFDPBE_O_STROBES0 = @as(c_uint, 0x0000000C);
pub const LRFDPBE_O_IRQ = @as(c_uint, 0x00000010);
pub const LRFDPBE_O_EVT0 = @as(c_uint, 0x00000014);
pub const LRFDPBE_O_EVT1 = @as(c_uint, 0x00000018);
pub const LRFDPBE_O_EVTMSK0 = @as(c_uint, 0x0000001C);
pub const LRFDPBE_O_EVTMSK1 = @as(c_uint, 0x00000020);
pub const LRFDPBE_O_EVTCLR0 = @as(c_uint, 0x00000024);
pub const LRFDPBE_O_EVTCLR1 = @as(c_uint, 0x00000028);
pub const LRFDPBE_O_PDREQ = @as(c_uint, 0x0000002C);
pub const LRFDPBE_O_API = @as(c_uint, 0x00000030);
pub const LRFDPBE_O_MCEDATOUT0 = @as(c_uint, 0x00000034);
pub const LRFDPBE_O_MCEDATIN0 = @as(c_uint, 0x00000038);
pub const LRFDPBE_O_MCECMDOUT = @as(c_uint, 0x0000003C);
pub const LRFDPBE_O_MCECMDIN = @as(c_uint, 0x00000040);
pub const LRFDPBE_O_MDMAPI = @as(c_uint, 0x00000044);
pub const LRFDPBE_O_MDMMSGBOX = @as(c_uint, 0x00000048);
pub const LRFDPBE_O_FREQ = @as(c_uint, 0x0000004C);
pub const LRFDPBE_O_MDMLQI = @as(c_uint, 0x00000050);
pub const LRFDPBE_O_RFEDATOUT0 = @as(c_uint, 0x00000054);
pub const LRFDPBE_O_RFEDATIN0 = @as(c_uint, 0x00000058);
pub const LRFDPBE_O_RFECMDOUT = @as(c_uint, 0x0000005C);
pub const LRFDPBE_O_RFECMDIN = @as(c_uint, 0x00000060);
pub const LRFDPBE_O_RFEAPI = @as(c_uint, 0x00000064);
pub const LRFDPBE_O_RFECMDPAR0 = @as(c_uint, 0x00000068);
pub const LRFDPBE_O_RFECMDPAR1 = @as(c_uint, 0x0000006C);
pub const LRFDPBE_O_RFEMSGBOX = @as(c_uint, 0x00000070);
pub const LRFDPBE_O_RFERSSI = @as(c_uint, 0x00000074);
pub const LRFDPBE_O_RFERSSIMAX = @as(c_uint, 0x00000078);
pub const LRFDPBE_O_RFERFGAIN = @as(c_uint, 0x0000007C);
pub const LRFDPBE_O_MDMSYNCAL = @as(c_uint, 0x00000080);
pub const LRFDPBE_O_MDMSYNCAH = @as(c_uint, 0x00000084);
pub const LRFDPBE_O_MDMSYNCBL = @as(c_uint, 0x00000088);
pub const LRFDPBE_O_MDMSYNCBH = @as(c_uint, 0x0000008C);
pub const LRFDPBE_O_MDMCMDPAR0 = @as(c_uint, 0x00000090);
pub const LRFDPBE_O_MDMCMDPAR1 = @as(c_uint, 0x00000094);
pub const LRFDPBE_O_MDMCMDPAR2 = @as(c_uint, 0x00000098);
pub const LRFDPBE_O_POLY0L = @as(c_uint, 0x000000A0);
pub const LRFDPBE_O_POLY0H = @as(c_uint, 0x000000A4);
pub const LRFDPBE_O_POLY1L = @as(c_uint, 0x000000A8);
pub const LRFDPBE_O_POLY1H = @as(c_uint, 0x000000AC);
pub const LRFDPBE_O_PHACFG = @as(c_uint, 0x000000B0);
pub const LRFDPBE_O_FCFG0 = @as(c_uint, 0x000000B4);
pub const LRFDPBE_O_FCFG1 = @as(c_uint, 0x000000B8);
pub const LRFDPBE_O_FCFG2 = @as(c_uint, 0x000000BC);
pub const LRFDPBE_O_FCFG3 = @as(c_uint, 0x000000C0);
pub const LRFDPBE_O_FCFG4 = @as(c_uint, 0x000000C4);
pub const LRFDPBE_O_FCFG5 = @as(c_uint, 0x000000C8);
pub const LRFDPBE_O_RXFWBTHRS = @as(c_uint, 0x000000CC);
pub const LRFDPBE_O_RXFRBTHRS = @as(c_uint, 0x000000D0);
pub const LRFDPBE_O_TXFWBTHRS = @as(c_uint, 0x000000D4);
pub const LRFDPBE_O_TXFRBTHRS = @as(c_uint, 0x000000D8);
pub const LRFDPBE_O_TIMCTL = @as(c_uint, 0x000000DC);
pub const LRFDPBE_O_TIMPRE = @as(c_uint, 0x000000E0);
pub const LRFDPBE_O_TIMPER0 = @as(c_uint, 0x000000E4);
pub const LRFDPBE_O_TIMPER1 = @as(c_uint, 0x000000E8);
pub const LRFDPBE_O_TIMCAPT0 = @as(c_uint, 0x000000EC);
pub const LRFDPBE_O_TIMCAPT1 = @as(c_uint, 0x000000F0);
pub const LRFDPBE_O_TRCCTL = @as(c_uint, 0x00000100);
pub const LRFDPBE_O_TRCSTAT = @as(c_uint, 0x00000104);
pub const LRFDPBE_O_TRCCMD = @as(c_uint, 0x00000108);
pub const LRFDPBE_O_TRCPAR0 = @as(c_uint, 0x0000010C);
pub const LRFDPBE_O_TRCPAR1 = @as(c_uint, 0x00000110);
pub const LRFDPBE_O_GPOCTRL = @as(c_uint, 0x00000114);
pub const LRFDPBE_O_MDMFWR = @as(c_uint, 0x00000118);
pub const LRFDPBE_O_MDMFRD = @as(c_uint, 0x0000011C);
pub const LRFDPBE_O_MDMFWRCTL = @as(c_uint, 0x00000120);
pub const LRFDPBE_O_MDMFRDCTL = @as(c_uint, 0x00000124);
pub const LRFDPBE_O_MDMFCFG = @as(c_uint, 0x00000128);
pub const LRFDPBE_O_MDMFSTA = @as(c_uint, 0x0000012C);
pub const LRFDPBE_O_PHASTA = @as(c_uint, 0x00000134);
pub const LRFDPBE_O_LFSR0L = @as(c_uint, 0x00000138);
pub const LRFDPBE_O_LFSR0H = @as(c_uint, 0x0000013C);
pub const LRFDPBE_O_LFSR0BRL = @as(c_uint, 0x00000140);
pub const LRFDPBE_O_LFSR0BRH = @as(c_uint, 0x00000144);
pub const LRFDPBE_O_LFSR1L = @as(c_uint, 0x00000148);
pub const LRFDPBE_O_LFSR1H = @as(c_uint, 0x0000014C);
pub const LRFDPBE_O_LFSR1BRL = @as(c_uint, 0x00000150);
pub const LRFDPBE_O_LFSR1BRH = @as(c_uint, 0x00000154);
pub const LRFDPBE_O_LFSR0INL = @as(c_uint, 0x00000158);
pub const LRFDPBE_O_LFSR0N = @as(c_uint, 0x0000015C);
pub const LRFDPBE_O_LFSR0INM = @as(c_uint, 0x00000160);
pub const LRFDPBE_O_PHAOUT0 = @as(c_uint, 0x00000164);
pub const LRFDPBE_O_LFSR1INL = @as(c_uint, 0x00000168);
pub const LRFDPBE_O_LFSR1N = @as(c_uint, 0x0000016C);
pub const LRFDPBE_O_LFSR1INM = @as(c_uint, 0x00000170);
pub const LRFDPBE_O_PHAOUT0BR = @as(c_uint, 0x00000174);
pub const LRFDPBE_O_SYSTIM0L = @as(c_uint, 0x00000180);
pub const LRFDPBE_O_SYSTIM0H = @as(c_uint, 0x00000184);
pub const LRFDPBE_O_SYSTIM1L = @as(c_uint, 0x00000188);
pub const LRFDPBE_O_SYSTIM1H = @as(c_uint, 0x0000018C);
pub const LRFDPBE_O_SYSTIM2L = @as(c_uint, 0x00000190);
pub const LRFDPBE_O_SYSTIM2H = @as(c_uint, 0x00000194);
pub const LRFDPBE_O_GPI = @as(c_uint, 0x00000198);
pub const LRFDPBE_O_FCMD = @as(c_uint, 0x000001A0);
pub const LRFDPBE_O_FSTAT = @as(c_uint, 0x000001A4);
pub const LRFDPBE_O_RXFWP = @as(c_uint, 0x000001A8);
pub const LRFDPBE_O_RXFRP = @as(c_uint, 0x000001AC);
pub const LRFDPBE_O_RXFSWP = @as(c_uint, 0x000001B0);
pub const LRFDPBE_O_RXFSRP = @as(c_uint, 0x000001B4);
pub const LRFDPBE_O_TXFWP = @as(c_uint, 0x000001B8);
pub const LRFDPBE_O_TXFRP = @as(c_uint, 0x000001BC);
pub const LRFDPBE_O_TXFSWP = @as(c_uint, 0x000001C0);
pub const LRFDPBE_O_TXFSRP = @as(c_uint, 0x000001C4);
pub const LRFDPBE_O_RXFWRITABLE = @as(c_uint, 0x000001C8);
pub const LRFDPBE_O_RXFREADABLE = @as(c_uint, 0x000001CC);
pub const LRFDPBE_O_TXFWRITABLE = @as(c_uint, 0x000001D0);
pub const LRFDPBE_O_TXFREADABLE = @as(c_uint, 0x000001D4);
pub const LRFDPBE_O_RXFBRD = @as(c_uint, 0x000001D8);
pub const LRFDPBE_O_RXFBWR = @as(c_uint, 0x000001DC);
pub const LRFDPBE_O_TXFBRD = @as(c_uint, 0x000001E0);
pub const LRFDPBE_O_TXFBWR = @as(c_uint, 0x000001E4);
pub const LRFDPBE_O_RXFHRD = @as(c_uint, 0x000001E8);
pub const LRFDPBE_O_RXFHWR = @as(c_uint, 0x000001EC);
pub const LRFDPBE_O_TXFHRD = @as(c_uint, 0x000001F0);
pub const LRFDPBE_O_TXFHWR = @as(c_uint, 0x000001F4);
pub const LRFDPBE_ENABLE_MDMF = @as(c_uint, 0x00000004);
pub const LRFDPBE_ENABLE_MDMF_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_ENABLE_MDMF_S = @as(c_uint, 2);
pub const LRFDPBE_ENABLE_MDMF_EN = @as(c_uint, 0x00000004);
pub const LRFDPBE_ENABLE_MDMF_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_ENABLE_LOCTIM = @as(c_uint, 0x00000002);
pub const LRFDPBE_ENABLE_LOCTIM_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_ENABLE_LOCTIM_S = @as(c_uint, 1);
pub const LRFDPBE_ENABLE_LOCTIM_EN = @as(c_uint, 0x00000002);
pub const LRFDPBE_ENABLE_LOCTIM_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_ENABLE_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDPBE_ENABLE_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_ENABLE_TOPSM_S = @as(c_uint, 0);
pub const LRFDPBE_ENABLE_TOPSM_EN = @as(c_uint, 0x00000001);
pub const LRFDPBE_ENABLE_TOPSM_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FWSRC_DATARAM = @as(c_uint, 0x00000004);
pub const LRFDPBE_FWSRC_DATARAM_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_FWSRC_DATARAM_S = @as(c_uint, 2);
pub const LRFDPBE_FWSRC_DATARAM_S2RRAM = @as(c_uint, 0x00000004);
pub const LRFDPBE_FWSRC_DATARAM_PBERAM = @as(c_uint, 0x00000000);
pub const LRFDPBE_FWSRC_FWRAM = @as(c_uint, 0x00000002);
pub const LRFDPBE_FWSRC_FWRAM_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_FWSRC_FWRAM_S = @as(c_uint, 1);
pub const LRFDPBE_FWSRC_FWRAM_S2RRAM = @as(c_uint, 0x00000002);
pub const LRFDPBE_FWSRC_FWRAM_PBERAM = @as(c_uint, 0x00000000);
pub const LRFDPBE_FWSRC_BANK = @as(c_uint, 0x00000001);
pub const LRFDPBE_FWSRC_BANK_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_FWSRC_BANK_S = @as(c_uint, 0);
pub const LRFDPBE_FWSRC_BANK_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_FWSRC_BANK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_INIT_RFE = @as(c_uint, 0x00000010);
pub const LRFDPBE_INIT_RFE_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_INIT_RFE_S = @as(c_uint, 4);
pub const LRFDPBE_INIT_RFE_RESET = @as(c_uint, 0x00000010);
pub const LRFDPBE_INIT_RFE_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_INIT_MDM = @as(c_uint, 0x00000008);
pub const LRFDPBE_INIT_MDM_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_INIT_MDM_S = @as(c_uint, 3);
pub const LRFDPBE_INIT_MDM_RESET = @as(c_uint, 0x00000008);
pub const LRFDPBE_INIT_MDM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_INIT_MDMF = @as(c_uint, 0x00000004);
pub const LRFDPBE_INIT_MDMF_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_INIT_MDMF_S = @as(c_uint, 2);
pub const LRFDPBE_INIT_MDMF_RESET = @as(c_uint, 0x00000004);
pub const LRFDPBE_INIT_MDMF_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_INIT_LOCTIM = @as(c_uint, 0x00000002);
pub const LRFDPBE_INIT_LOCTIM_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_INIT_LOCTIM_S = @as(c_uint, 1);
pub const LRFDPBE_INIT_LOCTIM_RESET = @as(c_uint, 0x00000002);
pub const LRFDPBE_INIT_LOCTIM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_INIT_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDPBE_INIT_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_INIT_TOPSM_S = @as(c_uint, 0);
pub const LRFDPBE_INIT_TOPSM_RESET = @as(c_uint, 0x00000001);
pub const LRFDPBE_INIT_TOPSM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_TIMCAPT1 = @as(c_uint, 0x00000040);
pub const LRFDPBE_STROBES0_TIMCAPT1_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_STROBES0_TIMCAPT1_S = @as(c_uint, 6);
pub const LRFDPBE_STROBES0_TIMCAPT1_ONE = @as(c_uint, 0x00000040);
pub const LRFDPBE_STROBES0_TIMCAPT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_TIMCAPT0 = @as(c_uint, 0x00000020);
pub const LRFDPBE_STROBES0_TIMCAPT0_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_STROBES0_TIMCAPT0_S = @as(c_uint, 5);
pub const LRFDPBE_STROBES0_TIMCAPT0_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE_STROBES0_TIMCAPT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_S2RTRIG = @as(c_uint, 0x00000010);
pub const LRFDPBE_STROBES0_S2RTRIG_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_STROBES0_S2RTRIG_S = @as(c_uint, 4);
pub const LRFDPBE_STROBES0_S2RTRIG_ARM = @as(c_uint, 0x00000010);
pub const LRFDPBE_STROBES0_S2RTRIG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_DMATRIG = @as(c_uint, 0x00000008);
pub const LRFDPBE_STROBES0_DMATRIG_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_STROBES0_DMATRIG_S = @as(c_uint, 3);
pub const LRFDPBE_STROBES0_DMATRIG_ARM = @as(c_uint, 0x00000008);
pub const LRFDPBE_STROBES0_DMATRIG_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_SYSTCAPT2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_STROBES0_SYSTCAPT2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_STROBES0_SYSTCAPT2_S = @as(c_uint, 2);
pub const LRFDPBE_STROBES0_SYSTCAPT2_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE_STROBES0_SYSTCAPT2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_SYSTCAPT1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_STROBES0_SYSTCAPT1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_STROBES0_SYSTCAPT1_S = @as(c_uint, 1);
pub const LRFDPBE_STROBES0_SYSTCAPT1_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE_STROBES0_SYSTCAPT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_STROBES0_SYSTCAPT0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_STROBES0_SYSTCAPT0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_STROBES0_SYSTCAPT0_S = @as(c_uint, 0);
pub const LRFDPBE_STROBES0_SYSTCAPT0_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_STROBES0_SYSTCAPT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT15 = @as(c_uint, 0x00008000);
pub const LRFDPBE_IRQ_SOFT15_M = @as(c_uint, 0x00008000);
pub const LRFDPBE_IRQ_SOFT15_S = @as(c_uint, 15);
pub const LRFDPBE_IRQ_SOFT15_ON = @as(c_uint, 0x00008000);
pub const LRFDPBE_IRQ_SOFT15_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT14 = @as(c_uint, 0x00004000);
pub const LRFDPBE_IRQ_SOFT14_M = @as(c_uint, 0x00004000);
pub const LRFDPBE_IRQ_SOFT14_S = @as(c_uint, 14);
pub const LRFDPBE_IRQ_SOFT14_ON = @as(c_uint, 0x00004000);
pub const LRFDPBE_IRQ_SOFT14_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT13 = @as(c_uint, 0x00002000);
pub const LRFDPBE_IRQ_SOFT13_M = @as(c_uint, 0x00002000);
pub const LRFDPBE_IRQ_SOFT13_S = @as(c_uint, 13);
pub const LRFDPBE_IRQ_SOFT13_ON = @as(c_uint, 0x00002000);
pub const LRFDPBE_IRQ_SOFT13_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT12 = @as(c_uint, 0x00001000);
pub const LRFDPBE_IRQ_SOFT12_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_IRQ_SOFT12_S = @as(c_uint, 12);
pub const LRFDPBE_IRQ_SOFT12_ON = @as(c_uint, 0x00001000);
pub const LRFDPBE_IRQ_SOFT12_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT11 = @as(c_uint, 0x00000800);
pub const LRFDPBE_IRQ_SOFT11_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_IRQ_SOFT11_S = @as(c_uint, 11);
pub const LRFDPBE_IRQ_SOFT11_ON = @as(c_uint, 0x00000800);
pub const LRFDPBE_IRQ_SOFT11_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT10 = @as(c_uint, 0x00000400);
pub const LRFDPBE_IRQ_SOFT10_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_IRQ_SOFT10_S = @as(c_uint, 10);
pub const LRFDPBE_IRQ_SOFT10_ON = @as(c_uint, 0x00000400);
pub const LRFDPBE_IRQ_SOFT10_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT9 = @as(c_uint, 0x00000200);
pub const LRFDPBE_IRQ_SOFT9_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_IRQ_SOFT9_S = @as(c_uint, 9);
pub const LRFDPBE_IRQ_SOFT9_ON = @as(c_uint, 0x00000200);
pub const LRFDPBE_IRQ_SOFT9_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT8 = @as(c_uint, 0x00000100);
pub const LRFDPBE_IRQ_SOFT8_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_IRQ_SOFT8_S = @as(c_uint, 8);
pub const LRFDPBE_IRQ_SOFT8_ON = @as(c_uint, 0x00000100);
pub const LRFDPBE_IRQ_SOFT8_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT7 = @as(c_uint, 0x00000080);
pub const LRFDPBE_IRQ_SOFT7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_IRQ_SOFT7_S = @as(c_uint, 7);
pub const LRFDPBE_IRQ_SOFT7_ON = @as(c_uint, 0x00000080);
pub const LRFDPBE_IRQ_SOFT7_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT6 = @as(c_uint, 0x00000040);
pub const LRFDPBE_IRQ_SOFT6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_IRQ_SOFT6_S = @as(c_uint, 6);
pub const LRFDPBE_IRQ_SOFT6_ON = @as(c_uint, 0x00000040);
pub const LRFDPBE_IRQ_SOFT6_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT5 = @as(c_uint, 0x00000020);
pub const LRFDPBE_IRQ_SOFT5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_IRQ_SOFT5_S = @as(c_uint, 5);
pub const LRFDPBE_IRQ_SOFT5_ON = @as(c_uint, 0x00000020);
pub const LRFDPBE_IRQ_SOFT5_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT4 = @as(c_uint, 0x00000010);
pub const LRFDPBE_IRQ_SOFT4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_IRQ_SOFT4_S = @as(c_uint, 4);
pub const LRFDPBE_IRQ_SOFT4_ON = @as(c_uint, 0x00000010);
pub const LRFDPBE_IRQ_SOFT4_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT3 = @as(c_uint, 0x00000008);
pub const LRFDPBE_IRQ_SOFT3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_IRQ_SOFT3_S = @as(c_uint, 3);
pub const LRFDPBE_IRQ_SOFT3_ON = @as(c_uint, 0x00000008);
pub const LRFDPBE_IRQ_SOFT3_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_IRQ_SOFT2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_IRQ_SOFT2_S = @as(c_uint, 2);
pub const LRFDPBE_IRQ_SOFT2_ON = @as(c_uint, 0x00000004);
pub const LRFDPBE_IRQ_SOFT2_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_IRQ_SOFT1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_IRQ_SOFT1_S = @as(c_uint, 1);
pub const LRFDPBE_IRQ_SOFT1_ON = @as(c_uint, 0x00000002);
pub const LRFDPBE_IRQ_SOFT1_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_IRQ_SOFT0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_IRQ_SOFT0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_IRQ_SOFT0_S = @as(c_uint, 0);
pub const LRFDPBE_IRQ_SOFT0_ON = @as(c_uint, 0x00000001);
pub const LRFDPBE_IRQ_SOFT0_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_MDMFAEMPTY = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVT0_MDMFAEMPTY_M = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVT0_MDMFAEMPTY_S = @as(c_uint, 15);
pub const LRFDPBE_EVT0_MDMFAEMPTY_ONE = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVT0_MDMFAEMPTY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_S2RSTOP = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVT0_S2RSTOP_M = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVT0_S2RSTOP_S = @as(c_uint, 14);
pub const LRFDPBE_EVT0_S2RSTOP_ONE = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVT0_S2RSTOP_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_FIFOERR = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVT0_FIFOERR_M = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVT0_FIFOERR_S = @as(c_uint, 13);
pub const LRFDPBE_EVT0_FIFOERR_ONE = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVT0_FIFOERR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_MDMFAFULL = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVT0_MDMFAFULL_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVT0_MDMFAFULL_S = @as(c_uint, 12);
pub const LRFDPBE_EVT0_MDMFAFULL_ONE = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVT0_MDMFAFULL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_SYSTCMP2 = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVT0_SYSTCMP2_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVT0_SYSTCMP2_S = @as(c_uint, 11);
pub const LRFDPBE_EVT0_SYSTCMP2_ONE = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVT0_SYSTCMP2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_SYSTCMP1 = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVT0_SYSTCMP1_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVT0_SYSTCMP1_S = @as(c_uint, 10);
pub const LRFDPBE_EVT0_SYSTCMP1_ONE = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVT0_SYSTCMP1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_SYSTCMP0 = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVT0_SYSTCMP0_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVT0_SYSTCMP0_S = @as(c_uint, 9);
pub const LRFDPBE_EVT0_SYSTCMP0_ONE = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVT0_SYSTCMP0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_MDMMSGBOX = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVT0_MDMMSGBOX_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVT0_MDMMSGBOX_S = @as(c_uint, 8);
pub const LRFDPBE_EVT0_MDMMSGBOX_ONE = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVT0_MDMMSGBOX_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_RFEMSGBOX = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVT0_RFEMSGBOX_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVT0_RFEMSGBOX_S = @as(c_uint, 7);
pub const LRFDPBE_EVT0_RFEMSGBOX_ONE = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVT0_RFEMSGBOX_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_RFEDAT = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVT0_RFEDAT_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVT0_RFEDAT_S = @as(c_uint, 6);
pub const LRFDPBE_EVT0_RFEDAT_ONE = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVT0_RFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_RFECMD = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVT0_RFECMD_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVT0_RFECMD_S = @as(c_uint, 5);
pub const LRFDPBE_EVT0_RFECMD_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVT0_RFECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_MDMDAT = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVT0_MDMDAT_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVT0_MDMDAT_S = @as(c_uint, 4);
pub const LRFDPBE_EVT0_MDMDAT_ONE = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVT0_MDMDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_MDMCMD = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVT0_MDMCMD_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVT0_MDMCMD_S = @as(c_uint, 3);
pub const LRFDPBE_EVT0_MDMCMD_ONE = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVT0_MDMCMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_TIMER1 = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVT0_TIMER1_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVT0_TIMER1_S = @as(c_uint, 2);
pub const LRFDPBE_EVT0_TIMER1_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVT0_TIMER1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_TIMER0 = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVT0_TIMER0_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVT0_TIMER0_S = @as(c_uint, 1);
pub const LRFDPBE_EVT0_TIMER0_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVT0_TIMER0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT0_PBEAPI = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVT0_PBEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVT0_PBEAPI_S = @as(c_uint, 0);
pub const LRFDPBE_EVT0_PBEAPI_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVT0_PBEAPI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_TXRDBTHR = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVT1_TXRDBTHR_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVT1_TXRDBTHR_S = @as(c_uint, 12);
pub const LRFDPBE_EVT1_TXRDBTHR_MET = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVT1_TXRDBTHR_BELOW = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_TXWRBTHR = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVT1_TXWRBTHR_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVT1_TXWRBTHR_S = @as(c_uint, 11);
pub const LRFDPBE_EVT1_TXWRBTHR_MET = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVT1_TXWRBTHR_BELOW = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_RXRDBTHR = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVT1_RXRDBTHR_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVT1_RXRDBTHR_S = @as(c_uint, 10);
pub const LRFDPBE_EVT1_RXRDBTHR_MET = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVT1_RXRDBTHR_BELOW = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_RXWRBTHR = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVT1_RXWRBTHR_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVT1_RXWRBTHR_S = @as(c_uint, 9);
pub const LRFDPBE_EVT1_RXWRBTHR_MET = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVT1_RXWRBTHR_BELOW = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_MDMPROG = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVT1_MDMPROG_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVT1_MDMPROG_S = @as(c_uint, 8);
pub const LRFDPBE_EVT1_MDMPROG_ONE = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVT1_MDMPROG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI7 = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVT1_PBEGPI7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVT1_PBEGPI7_S = @as(c_uint, 7);
pub const LRFDPBE_EVT1_PBEGPI7_ONE = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVT1_PBEGPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI6 = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVT1_PBEGPI6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVT1_PBEGPI6_S = @as(c_uint, 6);
pub const LRFDPBE_EVT1_PBEGPI6_ONE = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVT1_PBEGPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI5 = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVT1_PBEGPI5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVT1_PBEGPI5_S = @as(c_uint, 5);
pub const LRFDPBE_EVT1_PBEGPI5_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVT1_PBEGPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI4 = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVT1_PBEGPI4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVT1_PBEGPI4_S = @as(c_uint, 4);
pub const LRFDPBE_EVT1_PBEGPI4_ONE = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVT1_PBEGPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI3 = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVT1_PBEGPI3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVT1_PBEGPI3_S = @as(c_uint, 3);
pub const LRFDPBE_EVT1_PBEGPI3_ONE = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVT1_PBEGPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVT1_PBEGPI2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVT1_PBEGPI2_S = @as(c_uint, 2);
pub const LRFDPBE_EVT1_PBEGPI2_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVT1_PBEGPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVT1_PBEGPI1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVT1_PBEGPI1_S = @as(c_uint, 1);
pub const LRFDPBE_EVT1_PBEGPI1_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVT1_PBEGPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVT1_PBEGPI0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVT1_PBEGPI0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVT1_PBEGPI0_S = @as(c_uint, 0);
pub const LRFDPBE_EVT1_PBEGPI0_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVT1_PBEGPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_MDMFAEMPTY = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVTMSK0_MDMFAEMPTY_M = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVTMSK0_MDMFAEMPTY_S = @as(c_uint, 15);
pub const LRFDPBE_EVTMSK0_MDMFAEMPTY_EN = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVTMSK0_MDMFAEMPTY_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_S2RSTOP = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVTMSK0_S2RSTOP_M = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVTMSK0_S2RSTOP_S = @as(c_uint, 14);
pub const LRFDPBE_EVTMSK0_S2RSTOP_EN = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVTMSK0_S2RSTOP_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_FIFOERR = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVTMSK0_FIFOERR_M = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVTMSK0_FIFOERR_S = @as(c_uint, 13);
pub const LRFDPBE_EVTMSK0_FIFOERR_EN = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVTMSK0_FIFOERR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_MDMFAFULL = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTMSK0_MDMFAFULL_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTMSK0_MDMFAFULL_S = @as(c_uint, 12);
pub const LRFDPBE_EVTMSK0_MDMFAFULL_EN = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTMSK0_MDMFAFULL_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_SYSTCMP2 = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTMSK0_SYSTCMP2_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTMSK0_SYSTCMP2_S = @as(c_uint, 11);
pub const LRFDPBE_EVTMSK0_SYSTCMP2_EN = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTMSK0_SYSTCMP2_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_SYSTCMP1 = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTMSK0_SYSTCMP1_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTMSK0_SYSTCMP1_S = @as(c_uint, 10);
pub const LRFDPBE_EVTMSK0_SYSTCMP1_EN = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTMSK0_SYSTCMP1_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_SYSTCMP0 = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTMSK0_SYSTCMP0_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTMSK0_SYSTCMP0_S = @as(c_uint, 9);
pub const LRFDPBE_EVTMSK0_SYSTCMP0_EN = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTMSK0_SYSTCMP0_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_MDMMSGBOX = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTMSK0_MDMMSGBOX_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTMSK0_MDMMSGBOX_S = @as(c_uint, 8);
pub const LRFDPBE_EVTMSK0_MDMMSGBOX_EN = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTMSK0_MDMMSGBOX_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_RFEMSGBOX = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTMSK0_RFEMSGBOX_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTMSK0_RFEMSGBOX_S = @as(c_uint, 7);
pub const LRFDPBE_EVTMSK0_RFEMSGBOX_EN = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTMSK0_RFEMSGBOX_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_RFEDAT = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTMSK0_RFEDAT_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTMSK0_RFEDAT_S = @as(c_uint, 6);
pub const LRFDPBE_EVTMSK0_RFEDAT_EN = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTMSK0_RFEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_RFECMD = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTMSK0_RFECMD_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTMSK0_RFECMD_S = @as(c_uint, 5);
pub const LRFDPBE_EVTMSK0_RFECMD_EN = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTMSK0_RFECMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_MDMDAT = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTMSK0_MDMDAT_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTMSK0_MDMDAT_S = @as(c_uint, 4);
pub const LRFDPBE_EVTMSK0_MDMDAT_EN = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTMSK0_MDMDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_MDMCMD = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTMSK0_MDMCMD_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTMSK0_MDMCMD_S = @as(c_uint, 3);
pub const LRFDPBE_EVTMSK0_MDMCMD_EN = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTMSK0_MDMCMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_TIMER1 = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTMSK0_TIMER1_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTMSK0_TIMER1_S = @as(c_uint, 2);
pub const LRFDPBE_EVTMSK0_TIMER1_EN = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTMSK0_TIMER1_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_TIMER0 = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTMSK0_TIMER0_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTMSK0_TIMER0_S = @as(c_uint, 1);
pub const LRFDPBE_EVTMSK0_TIMER0_EN = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTMSK0_TIMER0_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK0_PBEAPI = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTMSK0_PBEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTMSK0_PBEAPI_S = @as(c_uint, 0);
pub const LRFDPBE_EVTMSK0_PBEAPI_EN = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTMSK0_PBEAPI_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_TXRDBTHR = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTMSK1_TXRDBTHR_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTMSK1_TXRDBTHR_S = @as(c_uint, 12);
pub const LRFDPBE_EVTMSK1_TXRDBTHR_EN = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTMSK1_TXRDBTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_TXWRBTHR = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTMSK1_TXWRBTHR_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTMSK1_TXWRBTHR_S = @as(c_uint, 11);
pub const LRFDPBE_EVTMSK1_TXWRBTHR_EN = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTMSK1_TXWRBTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_RXRDBTHR = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTMSK1_RXRDBTHR_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTMSK1_RXRDBTHR_S = @as(c_uint, 10);
pub const LRFDPBE_EVTMSK1_RXRDBTHR_EN = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTMSK1_RXRDBTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_RXWRBTHR = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTMSK1_RXWRBTHR_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTMSK1_RXWRBTHR_S = @as(c_uint, 9);
pub const LRFDPBE_EVTMSK1_RXWRBTHR_EN = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTMSK1_RXWRBTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_MDMPROG = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTMSK1_MDMPROG_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTMSK1_MDMPROG_S = @as(c_uint, 8);
pub const LRFDPBE_EVTMSK1_MDMPROG_EN = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTMSK1_MDMPROG_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI7 = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTMSK1_PBEGPI7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTMSK1_PBEGPI7_S = @as(c_uint, 7);
pub const LRFDPBE_EVTMSK1_PBEGPI7_EN = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTMSK1_PBEGPI7_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI6 = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTMSK1_PBEGPI6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTMSK1_PBEGPI6_S = @as(c_uint, 6);
pub const LRFDPBE_EVTMSK1_PBEGPI6_EN = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTMSK1_PBEGPI6_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI5 = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTMSK1_PBEGPI5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTMSK1_PBEGPI5_S = @as(c_uint, 5);
pub const LRFDPBE_EVTMSK1_PBEGPI5_EN = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTMSK1_PBEGPI5_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI4 = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTMSK1_PBEGPI4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTMSK1_PBEGPI4_S = @as(c_uint, 4);
pub const LRFDPBE_EVTMSK1_PBEGPI4_EN = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTMSK1_PBEGPI4_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI3 = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTMSK1_PBEGPI3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTMSK1_PBEGPI3_S = @as(c_uint, 3);
pub const LRFDPBE_EVTMSK1_PBEGPI3_EN = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTMSK1_PBEGPI3_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTMSK1_PBEGPI2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTMSK1_PBEGPI2_S = @as(c_uint, 2);
pub const LRFDPBE_EVTMSK1_PBEGPI2_EN = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTMSK1_PBEGPI2_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTMSK1_PBEGPI1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTMSK1_PBEGPI1_S = @as(c_uint, 1);
pub const LRFDPBE_EVTMSK1_PBEGPI1_EN = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTMSK1_PBEGPI1_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTMSK1_PBEGPI0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTMSK1_PBEGPI0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTMSK1_PBEGPI0_S = @as(c_uint, 0);
pub const LRFDPBE_EVTMSK1_PBEGPI0_EN = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTMSK1_PBEGPI0_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_MDMFAEMPTY = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVTCLR0_MDMFAEMPTY_M = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVTCLR0_MDMFAEMPTY_S = @as(c_uint, 15);
pub const LRFDPBE_EVTCLR0_MDMFAEMPTY_CLEAR = @as(c_uint, 0x00008000);
pub const LRFDPBE_EVTCLR0_MDMFAEMPTY_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_S2RSTOP = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVTCLR0_S2RSTOP_M = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVTCLR0_S2RSTOP_S = @as(c_uint, 14);
pub const LRFDPBE_EVTCLR0_S2RSTOP_CLEAR = @as(c_uint, 0x00004000);
pub const LRFDPBE_EVTCLR0_S2RSTOP_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_FIFOERR = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVTCLR0_FIFOERR_M = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVTCLR0_FIFOERR_S = @as(c_uint, 13);
pub const LRFDPBE_EVTCLR0_FIFOERR_CLEAR = @as(c_uint, 0x00002000);
pub const LRFDPBE_EVTCLR0_FIFOERR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_MDMFAFULL = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTCLR0_MDMFAFULL_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTCLR0_MDMFAFULL_S = @as(c_uint, 12);
pub const LRFDPBE_EVTCLR0_MDMFAFULL_CLEAR = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTCLR0_MDMFAFULL_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_SYSTCMP2 = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTCLR0_SYSTCMP2_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTCLR0_SYSTCMP2_S = @as(c_uint, 11);
pub const LRFDPBE_EVTCLR0_SYSTCMP2_CLEAR = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTCLR0_SYSTCMP2_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_SYSTCMP1 = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTCLR0_SYSTCMP1_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTCLR0_SYSTCMP1_S = @as(c_uint, 10);
pub const LRFDPBE_EVTCLR0_SYSTCMP1_CLEAR = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTCLR0_SYSTCMP1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_SYSTCMP0 = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTCLR0_SYSTCMP0_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTCLR0_SYSTCMP0_S = @as(c_uint, 9);
pub const LRFDPBE_EVTCLR0_SYSTCMP0_CLEAR = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTCLR0_SYSTCMP0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_MDMMSGBOX = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTCLR0_MDMMSGBOX_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTCLR0_MDMMSGBOX_S = @as(c_uint, 8);
pub const LRFDPBE_EVTCLR0_MDMMSGBOX_CLEAR = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTCLR0_MDMMSGBOX_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_RFEMSGBOX = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTCLR0_RFEMSGBOX_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTCLR0_RFEMSGBOX_S = @as(c_uint, 7);
pub const LRFDPBE_EVTCLR0_RFEMSGBOX_CLEAR = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTCLR0_RFEMSGBOX_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_RFEDAT = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTCLR0_RFEDAT_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTCLR0_RFEDAT_S = @as(c_uint, 6);
pub const LRFDPBE_EVTCLR0_RFEDAT_CLEAR = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTCLR0_RFEDAT_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_RFECMD = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTCLR0_RFECMD_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTCLR0_RFECMD_S = @as(c_uint, 5);
pub const LRFDPBE_EVTCLR0_RFECMD_CLEAR = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTCLR0_RFECMD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_MDMDAT = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTCLR0_MDMDAT_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTCLR0_MDMDAT_S = @as(c_uint, 4);
pub const LRFDPBE_EVTCLR0_MDMDAT_CLEAR = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTCLR0_MDMDAT_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_MDMCMD = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTCLR0_MDMCMD_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTCLR0_MDMCMD_S = @as(c_uint, 3);
pub const LRFDPBE_EVTCLR0_MDMCMD_CLEAR = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTCLR0_MDMCMD_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_TIMER1 = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTCLR0_TIMER1_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTCLR0_TIMER1_S = @as(c_uint, 2);
pub const LRFDPBE_EVTCLR0_TIMER1_CLEAR = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTCLR0_TIMER1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_TIMER0 = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTCLR0_TIMER0_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTCLR0_TIMER0_S = @as(c_uint, 1);
pub const LRFDPBE_EVTCLR0_TIMER0_CLEAR = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTCLR0_TIMER0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR0_PBEAPI = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTCLR0_PBEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTCLR0_PBEAPI_S = @as(c_uint, 0);
pub const LRFDPBE_EVTCLR0_PBEAPI_CLEAR = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTCLR0_PBEAPI_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_TXRDBTHR = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTCLR1_TXRDBTHR_M = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTCLR1_TXRDBTHR_S = @as(c_uint, 12);
pub const LRFDPBE_EVTCLR1_TXRDBTHR_CLEAR = @as(c_uint, 0x00001000);
pub const LRFDPBE_EVTCLR1_TXRDBTHR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_TXWRBTHR = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTCLR1_TXWRBTHR_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTCLR1_TXWRBTHR_S = @as(c_uint, 11);
pub const LRFDPBE_EVTCLR1_TXWRBTHR_CLEAR = @as(c_uint, 0x00000800);
pub const LRFDPBE_EVTCLR1_TXWRBTHR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_RXRDBTHR = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTCLR1_RXRDBTHR_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTCLR1_RXRDBTHR_S = @as(c_uint, 10);
pub const LRFDPBE_EVTCLR1_RXRDBTHR_CLEAR = @as(c_uint, 0x00000400);
pub const LRFDPBE_EVTCLR1_RXRDBTHR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_RXWRBTHR = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTCLR1_RXWRBTHR_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTCLR1_RXWRBTHR_S = @as(c_uint, 9);
pub const LRFDPBE_EVTCLR1_RXWRBTHR_CLEAR = @as(c_uint, 0x00000200);
pub const LRFDPBE_EVTCLR1_RXWRBTHR_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_MDMPROG = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTCLR1_MDMPROG_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTCLR1_MDMPROG_S = @as(c_uint, 8);
pub const LRFDPBE_EVTCLR1_MDMPROG_CLEAR = @as(c_uint, 0x00000100);
pub const LRFDPBE_EVTCLR1_MDMPROG_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI7 = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTCLR1_PBEGPI7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTCLR1_PBEGPI7_S = @as(c_uint, 7);
pub const LRFDPBE_EVTCLR1_PBEGPI7_CLEAR = @as(c_uint, 0x00000080);
pub const LRFDPBE_EVTCLR1_PBEGPI7_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI6 = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTCLR1_PBEGPI6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTCLR1_PBEGPI6_S = @as(c_uint, 6);
pub const LRFDPBE_EVTCLR1_PBEGPI6_CLEAR = @as(c_uint, 0x00000040);
pub const LRFDPBE_EVTCLR1_PBEGPI6_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI5 = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTCLR1_PBEGPI5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTCLR1_PBEGPI5_S = @as(c_uint, 5);
pub const LRFDPBE_EVTCLR1_PBEGPI5_CLEAR = @as(c_uint, 0x00000020);
pub const LRFDPBE_EVTCLR1_PBEGPI5_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI4 = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTCLR1_PBEGPI4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTCLR1_PBEGPI4_S = @as(c_uint, 4);
pub const LRFDPBE_EVTCLR1_PBEGPI4_CLEAR = @as(c_uint, 0x00000010);
pub const LRFDPBE_EVTCLR1_PBEGPI4_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI3 = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTCLR1_PBEGPI3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTCLR1_PBEGPI3_S = @as(c_uint, 3);
pub const LRFDPBE_EVTCLR1_PBEGPI3_CLEAR = @as(c_uint, 0x00000008);
pub const LRFDPBE_EVTCLR1_PBEGPI3_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTCLR1_PBEGPI2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTCLR1_PBEGPI2_S = @as(c_uint, 2);
pub const LRFDPBE_EVTCLR1_PBEGPI2_CLEAR = @as(c_uint, 0x00000004);
pub const LRFDPBE_EVTCLR1_PBEGPI2_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTCLR1_PBEGPI1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTCLR1_PBEGPI1_S = @as(c_uint, 1);
pub const LRFDPBE_EVTCLR1_PBEGPI1_CLEAR = @as(c_uint, 0x00000002);
pub const LRFDPBE_EVTCLR1_PBEGPI1_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_EVTCLR1_PBEGPI0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTCLR1_PBEGPI0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTCLR1_PBEGPI0_S = @as(c_uint, 0);
pub const LRFDPBE_EVTCLR1_PBEGPI0_CLEAR = @as(c_uint, 0x00000001);
pub const LRFDPBE_EVTCLR1_PBEGPI0_RETAIN = @as(c_uint, 0x00000000);
pub const LRFDPBE_PDREQ_TOPSMPDREQ = @as(c_uint, 0x00000001);
pub const LRFDPBE_PDREQ_TOPSMPDREQ_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_PDREQ_TOPSMPDREQ_S = @as(c_uint, 0);
pub const LRFDPBE_PDREQ_TOPSMPDREQ_ON = @as(c_uint, 0x00000001);
pub const LRFDPBE_PDREQ_TOPSMPDREQ_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_API_PBECMD_W = @as(c_uint, 5);
pub const LRFDPBE_API_PBECMD_M = @as(c_uint, 0x0000001F);
pub const LRFDPBE_API_PBECMD_S = @as(c_uint, 0);
pub const LRFDPBE_API_PBECMD_ALLONES = @as(c_uint, 0x0000001F);
pub const LRFDPBE_API_PBECMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MCEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_MCEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MCEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MCEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MCEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MCEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_MCEDATIN0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MCEDATIN0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MCEDATIN0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MCEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MCECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDPBE_MCECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MCECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MCECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MCECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MCECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDPBE_MCECMDIN_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MCECMDIN_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MCECMDIN_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MCECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMAPI_PROTOCOLID_W = @as(c_uint, 4);
pub const LRFDPBE_MDMAPI_PROTOCOLID_M = @as(c_uint, 0x000000F0);
pub const LRFDPBE_MDMAPI_PROTOCOLID_S = @as(c_uint, 4);
pub const LRFDPBE_MDMAPI_PROTOCOLID_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDPBE_MDMAPI_PROTOCOLID_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMAPI_MDMCMD_W = @as(c_uint, 4);
pub const LRFDPBE_MDMAPI_MDMCMD_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MDMAPI_MDMCMD_S = @as(c_uint, 0);
pub const LRFDPBE_MDMAPI_MDMCMD_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MDMAPI_MDMCMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMMSGBOX_VALUE_W = @as(c_uint, 8);
pub const LRFDPBE_MDMMSGBOX_VALUE_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_MDMMSGBOX_VALUE_S = @as(c_uint, 0);
pub const LRFDPBE_MDMMSGBOX_VALUE_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_MDMMSGBOX_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FREQ_OFFSET_W = @as(c_uint, 16);
pub const LRFDPBE_FREQ_OFFSET_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_FREQ_OFFSET_S = @as(c_uint, 0);
pub const LRFDPBE_FREQ_OFFSET_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_FREQ_OFFSET_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMLQI_VAL_W = @as(c_uint, 8);
pub const LRFDPBE_MDMLQI_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_MDMLQI_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MDMLQI_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_MDMLQI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_RFEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_RFEDATIN0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFEDATIN0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFEDATIN0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDPBE_RFECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_RFECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_RFECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDPBE_RFECMDIN_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_RFECMDIN_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFECMDIN_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_RFECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFEAPI_PROTOCOLID_W = @as(c_uint, 4);
pub const LRFDPBE_RFEAPI_PROTOCOLID_M = @as(c_uint, 0x000000F0);
pub const LRFDPBE_RFEAPI_PROTOCOLID_S = @as(c_uint, 4);
pub const LRFDPBE_RFEAPI_PROTOCOLID_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDPBE_RFEAPI_PROTOCOLID_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFEAPI_RFECMD_W = @as(c_uint, 4);
pub const LRFDPBE_RFEAPI_RFECMD_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_RFEAPI_RFECMD_S = @as(c_uint, 0);
pub const LRFDPBE_RFEAPI_RFECMD_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_RFEAPI_RFECMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFECMDPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_RFECMDPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFECMDPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFECMDPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFECMDPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFECMDPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_RFECMDPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFECMDPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFECMDPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RFECMDPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFEMSGBOX_VAL_W = @as(c_uint, 8);
pub const LRFDPBE_RFEMSGBOX_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFEMSGBOX_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFEMSGBOX_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFEMSGBOX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFERSSI_VAL_W = @as(c_uint, 8);
pub const LRFDPBE_RFERSSI_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFERSSI_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFERSSI_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFERSSI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFERSSIMAX_VAL_W = @as(c_uint, 8);
pub const LRFDPBE_RFERSSIMAX_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFERSSIMAX_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_RFERSSIMAX_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFERSSIMAX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RFERFGAIN_DBGAIN_W = @as(c_uint, 8);
pub const LRFDPBE_RFERFGAIN_DBGAIN_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFERFGAIN_DBGAIN_S = @as(c_uint, 0);
pub const LRFDPBE_RFERFGAIN_DBGAIN_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RFERFGAIN_DBGAIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMSYNCAL_SWALSB_W = @as(c_uint, 16);
pub const LRFDPBE_MDMSYNCAL_SWALSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCAL_SWALSB_S = @as(c_uint, 0);
pub const LRFDPBE_MDMSYNCAL_SWALSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCAL_SWALSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMSYNCAH_SWAMSB_W = @as(c_uint, 16);
pub const LRFDPBE_MDMSYNCAH_SWAMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCAH_SWAMSB_S = @as(c_uint, 0);
pub const LRFDPBE_MDMSYNCAH_SWAMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCAH_SWAMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMSYNCBL_SWBLSB_W = @as(c_uint, 16);
pub const LRFDPBE_MDMSYNCBL_SWBLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCBL_SWBLSB_S = @as(c_uint, 0);
pub const LRFDPBE_MDMSYNCBL_SWBLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCBL_SWBLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMSYNCBH_SWBMSB_W = @as(c_uint, 16);
pub const LRFDPBE_MDMSYNCBH_SWBMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCBH_SWBMSB_S = @as(c_uint, 0);
pub const LRFDPBE_MDMSYNCBH_SWBMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMSYNCBH_SWBMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMCMDPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_MDMCMDPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMCMDPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MDMCMDPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMCMDPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMCMDPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_MDMCMDPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMCMDPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MDMCMDPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMCMDPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMCMDPAR2_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_MDMCMDPAR2_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMCMDPAR2_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_MDMCMDPAR2_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMCMDPAR2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_POLY0L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_POLY0L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY0L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_POLY0L_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY0L_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_POLY0H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_POLY0H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY0H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_POLY0H_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY0H_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_POLY1L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_POLY1L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY1L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_POLY1L_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY1L_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_POLY1H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_POLY1H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY1H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_POLY1H_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_POLY1H_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_PHACFG_MODE1_W = @as(c_uint, 2);
pub const LRFDPBE_PHACFG_MODE1_M = @as(c_uint, 0x00000006);
pub const LRFDPBE_PHACFG_MODE1_S = @as(c_uint, 1);
pub const LRFDPBE_PHACFG_MODE1_PARAL = @as(c_uint, 0x00000004);
pub const LRFDPBE_PHACFG_MODE1_CASC = @as(c_uint, 0x00000002);
pub const LRFDPBE_PHACFG_MODE1_INDEP = @as(c_uint, 0x00000000);
pub const LRFDPBE_PHACFG_MODE0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_PHACFG_MODE0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_PHACFG_MODE0_S = @as(c_uint, 0);
pub const LRFDPBE_PHACFG_MODE0_WHITE = @as(c_uint, 0x00000001);
pub const LRFDPBE_PHACFG_MODE0_CRC = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG0_TXIRQMET = @as(c_uint, 0x00000080);
pub const LRFDPBE_FCFG0_TXIRQMET_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_FCFG0_TXIRQMET_S = @as(c_uint, 7);
pub const LRFDPBE_FCFG0_TXIRQMET_TXRDBTHR = @as(c_uint, 0x00000080);
pub const LRFDPBE_FCFG0_TXIRQMET_TXWRBTHR = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG0_RXIRQMET = @as(c_uint, 0x00000040);
pub const LRFDPBE_FCFG0_RXIRQMET_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_FCFG0_RXIRQMET_S = @as(c_uint, 6);
pub const LRFDPBE_FCFG0_RXIRQMET_RXWRBTHR = @as(c_uint, 0x00000040);
pub const LRFDPBE_FCFG0_RXIRQMET_RXRDBTHR = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG0_TXACOM = @as(c_uint, 0x00000020);
pub const LRFDPBE_FCFG0_TXACOM_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_FCFG0_TXACOM_S = @as(c_uint, 5);
pub const LRFDPBE_FCFG0_TXACOM_EN = @as(c_uint, 0x00000020);
pub const LRFDPBE_FCFG0_TXACOM_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG0_TXADEAL = @as(c_uint, 0x00000010);
pub const LRFDPBE_FCFG0_TXADEAL_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_FCFG0_TXADEAL_S = @as(c_uint, 4);
pub const LRFDPBE_FCFG0_TXADEAL_EN = @as(c_uint, 0x00000010);
pub const LRFDPBE_FCFG0_TXADEAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG0_RXACOM = @as(c_uint, 0x00000002);
pub const LRFDPBE_FCFG0_RXACOM_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_FCFG0_RXACOM_S = @as(c_uint, 1);
pub const LRFDPBE_FCFG0_RXACOM_EN = @as(c_uint, 0x00000002);
pub const LRFDPBE_FCFG0_RXACOM_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG0_RXADEAL = @as(c_uint, 0x00000001);
pub const LRFDPBE_FCFG0_RXADEAL_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_FCFG0_RXADEAL_S = @as(c_uint, 0);
pub const LRFDPBE_FCFG0_RXADEAL_EN = @as(c_uint, 0x00000001);
pub const LRFDPBE_FCFG0_RXADEAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG1_TXSTRT_W = @as(c_uint, 9);
pub const LRFDPBE_FCFG1_TXSTRT_M = @as(c_uint, 0x000001FF);
pub const LRFDPBE_FCFG1_TXSTRT_S = @as(c_uint, 0);
pub const LRFDPBE_FCFG1_TXSTRT_ONES = @as(c_uint, 0x000001FF);
pub const LRFDPBE_FCFG1_TXSTRT_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG2_TXHSIZE_W = @as(c_uint, 3);
pub const LRFDPBE_FCFG2_TXHSIZE_M = @as(c_uint, 0x00000700);
pub const LRFDPBE_FCFG2_TXHSIZE_S = @as(c_uint, 8);
pub const LRFDPBE_FCFG2_TXHSIZE_WORD = @as(c_uint, 0x00000200);
pub const LRFDPBE_FCFG2_TXHSIZE_HALFW = @as(c_uint, 0x00000100);
pub const LRFDPBE_FCFG2_TXHSIZE_BYTE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG2_TXSIZE_W = @as(c_uint, 8);
pub const LRFDPBE_FCFG2_TXSIZE_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_FCFG2_TXSIZE_S = @as(c_uint, 0);
pub const LRFDPBE_FCFG2_TXSIZE_ONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_FCFG2_TXSIZE_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG3_RXSTRT_W = @as(c_uint, 9);
pub const LRFDPBE_FCFG3_RXSTRT_M = @as(c_uint, 0x000001FF);
pub const LRFDPBE_FCFG3_RXSTRT_S = @as(c_uint, 0);
pub const LRFDPBE_FCFG3_RXSTRT_ONES = @as(c_uint, 0x000001FF);
pub const LRFDPBE_FCFG3_RXSTRT_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG4_RXHSIZE_W = @as(c_uint, 3);
pub const LRFDPBE_FCFG4_RXHSIZE_M = @as(c_uint, 0x00000700);
pub const LRFDPBE_FCFG4_RXHSIZE_S = @as(c_uint, 8);
pub const LRFDPBE_FCFG4_RXHSIZE_WORD = @as(c_uint, 0x00000200);
pub const LRFDPBE_FCFG4_RXHSIZE_HALFW = @as(c_uint, 0x00000100);
pub const LRFDPBE_FCFG4_RXHSIZE_BYTE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG4_RXSIZE_W = @as(c_uint, 8);
pub const LRFDPBE_FCFG4_RXSIZE_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_FCFG4_RXSIZE_S = @as(c_uint, 0);
pub const LRFDPBE_FCFG4_RXSIZE_ONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_FCFG4_RXSIZE_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG5_DMASREQ_W = @as(c_uint, 3);
pub const LRFDPBE_FCFG5_DMASREQ_M = @as(c_uint, 0x000001C0);
pub const LRFDPBE_FCFG5_DMASREQ_S = @as(c_uint, 6);
pub const LRFDPBE_FCFG5_DMASREQ_TXFIFOFREE = @as(c_uint, 0x00000100);
pub const LRFDPBE_FCFG5_DMASREQ_TXFIFOMD = @as(c_uint, 0x000000C0);
pub const LRFDPBE_FCFG5_DMASREQ_RXFIFOFREE = @as(c_uint, 0x00000080);
pub const LRFDPBE_FCFG5_DMASREQ_RXFIFOMD = @as(c_uint, 0x00000040);
pub const LRFDPBE_FCFG5_DMASREQ_NONE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCFG5_DMAREQ_W = @as(c_uint, 5);
pub const LRFDPBE_FCFG5_DMAREQ_M = @as(c_uint, 0x0000001F);
pub const LRFDPBE_FCFG5_DMAREQ_S = @as(c_uint, 0);
pub const LRFDPBE_FCFG5_DMAREQ_TXFIFO_COMMIT = @as(c_uint, 0x0000000F);
pub const LRFDPBE_FCFG5_DMAREQ_TXFIFO_DISCARD = @as(c_uint, 0x0000000E);
pub const LRFDPBE_FCFG5_DMAREQ_TXFIFO_RETRY = @as(c_uint, 0x0000000D);
pub const LRFDPBE_FCFG5_DMAREQ_TXFIFO_DEALLOC = @as(c_uint, 0x0000000C);
pub const LRFDPBE_FCFG5_DMAREQ_TXFIFO_RESET = @as(c_uint, 0x0000000B);
pub const LRFDPBE_FCFG5_DMAREQ_TXWRBTHR_MET = @as(c_uint, 0x0000000A);
pub const LRFDPBE_FCFG5_DMAREQ_TXRDBTHR_MET = @as(c_uint, 0x00000009);
pub const LRFDPBE_FCFG5_DMAREQ_RXFIFO_COMMIT = @as(c_uint, 0x00000007);
pub const LRFDPBE_FCFG5_DMAREQ_RXFIFO_DISCARD = @as(c_uint, 0x00000006);
pub const LRFDPBE_FCFG5_DMAREQ_RXFIFO_RETRY = @as(c_uint, 0x00000005);
pub const LRFDPBE_FCFG5_DMAREQ_RXFIFO_DEALLOC = @as(c_uint, 0x00000004);
pub const LRFDPBE_FCFG5_DMAREQ_RXFIFO_RESET = @as(c_uint, 0x00000003);
pub const LRFDPBE_FCFG5_DMAREQ_RXWRBTHR_MET = @as(c_uint, 0x00000002);
pub const LRFDPBE_FCFG5_DMAREQ_RXRDBTHR_MET = @as(c_uint, 0x00000001);
pub const LRFDPBE_FCFG5_DMAREQ_NONE = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFWBTHRS_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_RXFWBTHRS_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFWBTHRS_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_RXFWBTHRS_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFWBTHRS_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFRBTHRS_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_RXFRBTHRS_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFRBTHRS_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_RXFRBTHRS_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFRBTHRS_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFWBTHRS_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_TXFWBTHRS_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFWBTHRS_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_TXFWBTHRS_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFWBTHRS_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFRBTHRS_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_TXFRBTHRS_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFRBTHRS_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_TXFRBTHRS_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFRBTHRS_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_CPTSRC1_W = @as(c_uint, 5);
pub const LRFDPBE_TIMCTL_CPTSRC1_M = @as(c_uint, 0x0000F800);
pub const LRFDPBE_TIMCTL_CPTSRC1_S = @as(c_uint, 11);
pub const LRFDPBE_TIMCTL_CPTSRC1_ALLONES = @as(c_uint, 0x0000F800);
pub const LRFDPBE_TIMCTL_CPTSRC1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_ENCPT1 = @as(c_uint, 0x00000400);
pub const LRFDPBE_TIMCTL_ENCPT1_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_TIMCTL_ENCPT1_S = @as(c_uint, 10);
pub const LRFDPBE_TIMCTL_ENCPT1_ON = @as(c_uint, 0x00000400);
pub const LRFDPBE_TIMCTL_ENCPT1_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_SRC1 = @as(c_uint, 0x00000200);
pub const LRFDPBE_TIMCTL_SRC1_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_TIMCTL_SRC1_S = @as(c_uint, 9);
pub const LRFDPBE_TIMCTL_SRC1_PRE1 = @as(c_uint, 0x00000200);
pub const LRFDPBE_TIMCTL_SRC1_CLK = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_EN1 = @as(c_uint, 0x00000100);
pub const LRFDPBE_TIMCTL_EN1_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_TIMCTL_EN1_S = @as(c_uint, 8);
pub const LRFDPBE_TIMCTL_EN1_ON = @as(c_uint, 0x00000100);
pub const LRFDPBE_TIMCTL_EN1_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_CPTSRC0_W = @as(c_uint, 5);
pub const LRFDPBE_TIMCTL_CPTSRC0_M = @as(c_uint, 0x000000F8);
pub const LRFDPBE_TIMCTL_CPTSRC0_S = @as(c_uint, 3);
pub const LRFDPBE_TIMCTL_CPTSRC0_ALLONES = @as(c_uint, 0x000000F8);
pub const LRFDPBE_TIMCTL_CPTSRC0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_ENCPT0 = @as(c_uint, 0x00000004);
pub const LRFDPBE_TIMCTL_ENCPT0_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_TIMCTL_ENCPT0_S = @as(c_uint, 2);
pub const LRFDPBE_TIMCTL_ENCPT0_ON = @as(c_uint, 0x00000004);
pub const LRFDPBE_TIMCTL_ENCPT0_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_SRC0 = @as(c_uint, 0x00000002);
pub const LRFDPBE_TIMCTL_SRC0_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_TIMCTL_SRC0_S = @as(c_uint, 1);
pub const LRFDPBE_TIMCTL_SRC0_PRE0 = @as(c_uint, 0x00000002);
pub const LRFDPBE_TIMCTL_SRC0_CLK = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCTL_EN0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_TIMCTL_EN0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_TIMCTL_EN0_S = @as(c_uint, 0);
pub const LRFDPBE_TIMCTL_EN0_ON = @as(c_uint, 0x00000001);
pub const LRFDPBE_TIMCTL_EN0_OFF = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMPRE_PRE1_W = @as(c_uint, 6);
pub const LRFDPBE_TIMPRE_PRE1_M = @as(c_uint, 0x00003F00);
pub const LRFDPBE_TIMPRE_PRE1_S = @as(c_uint, 8);
pub const LRFDPBE_TIMPRE_PRE1_DIV64 = @as(c_uint, 0x00003F00);
pub const LRFDPBE_TIMPRE_PRE1_NO_DIV = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMPRE_PRE0_W = @as(c_uint, 6);
pub const LRFDPBE_TIMPRE_PRE0_M = @as(c_uint, 0x0000003F);
pub const LRFDPBE_TIMPRE_PRE0_S = @as(c_uint, 0);
pub const LRFDPBE_TIMPRE_PRE0_DIV64 = @as(c_uint, 0x0000003F);
pub const LRFDPBE_TIMPRE_PRE0_NO_DIV = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMPER0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_TIMPER0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMPER0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_TIMPER0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMPER0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMPER1_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_TIMPER1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMPER1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_TIMPER1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMPER1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCAPT0_VALUE_W = @as(c_uint, 16);
pub const LRFDPBE_TIMCAPT0_VALUE_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMCAPT0_VALUE_S = @as(c_uint, 0);
pub const LRFDPBE_TIMCAPT0_VALUE_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMCAPT0_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TIMCAPT1_VALUE_W = @as(c_uint, 16);
pub const LRFDPBE_TIMCAPT1_VALUE_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMCAPT1_VALUE_S = @as(c_uint, 0);
pub const LRFDPBE_TIMCAPT1_VALUE_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TIMCAPT1_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TRCCTL_SEND = @as(c_uint, 0x00000001);
pub const LRFDPBE_TRCCTL_SEND_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_TRCCTL_SEND_S = @as(c_uint, 0);
pub const LRFDPBE_TRCCTL_SEND_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_TRCCTL_SEND_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_TRCSTAT_BUSY = @as(c_uint, 0x00000001);
pub const LRFDPBE_TRCSTAT_BUSY_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_TRCSTAT_BUSY_S = @as(c_uint, 0);
pub const LRFDPBE_TRCSTAT_BUSY_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_TRCSTAT_BUSY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_TRCCMD_PARCNT_W = @as(c_uint, 2);
pub const LRFDPBE_TRCCMD_PARCNT_M = @as(c_uint, 0x00000300);
pub const LRFDPBE_TRCCMD_PARCNT_S = @as(c_uint, 8);
pub const LRFDPBE_TRCCMD_PARCNT_ALLONES = @as(c_uint, 0x00000300);
pub const LRFDPBE_TRCCMD_PARCNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TRCCMD_PKTHDR_W = @as(c_uint, 8);
pub const LRFDPBE_TRCCMD_PKTHDR_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_TRCCMD_PKTHDR_S = @as(c_uint, 0);
pub const LRFDPBE_TRCCMD_PKTHDR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_TRCCMD_PKTHDR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TRCPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_TRCPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TRCPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_TRCPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TRCPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TRCPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_TRCPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TRCPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_TRCPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TRCPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO7 = @as(c_uint, 0x00000080);
pub const LRFDPBE_GPOCTRL_GPO7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_GPOCTRL_GPO7_S = @as(c_uint, 7);
pub const LRFDPBE_GPOCTRL_GPO7_ONE = @as(c_uint, 0x00000080);
pub const LRFDPBE_GPOCTRL_GPO7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO6 = @as(c_uint, 0x00000040);
pub const LRFDPBE_GPOCTRL_GPO6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_GPOCTRL_GPO6_S = @as(c_uint, 6);
pub const LRFDPBE_GPOCTRL_GPO6_ONE = @as(c_uint, 0x00000040);
pub const LRFDPBE_GPOCTRL_GPO6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO5 = @as(c_uint, 0x00000020);
pub const LRFDPBE_GPOCTRL_GPO5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_GPOCTRL_GPO5_S = @as(c_uint, 5);
pub const LRFDPBE_GPOCTRL_GPO5_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE_GPOCTRL_GPO5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO4 = @as(c_uint, 0x00000010);
pub const LRFDPBE_GPOCTRL_GPO4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_GPOCTRL_GPO4_S = @as(c_uint, 4);
pub const LRFDPBE_GPOCTRL_GPO4_ONE = @as(c_uint, 0x00000010);
pub const LRFDPBE_GPOCTRL_GPO4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO3 = @as(c_uint, 0x00000008);
pub const LRFDPBE_GPOCTRL_GPO3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_GPOCTRL_GPO3_S = @as(c_uint, 3);
pub const LRFDPBE_GPOCTRL_GPO3_ONE = @as(c_uint, 0x00000008);
pub const LRFDPBE_GPOCTRL_GPO3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_GPOCTRL_GPO2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_GPOCTRL_GPO2_S = @as(c_uint, 2);
pub const LRFDPBE_GPOCTRL_GPO2_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE_GPOCTRL_GPO2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_GPOCTRL_GPO1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_GPOCTRL_GPO1_S = @as(c_uint, 1);
pub const LRFDPBE_GPOCTRL_GPO1_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE_GPOCTRL_GPO1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPOCTRL_GPO0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_GPOCTRL_GPO0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_GPOCTRL_GPO0_S = @as(c_uint, 0);
pub const LRFDPBE_GPOCTRL_GPO0_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_GPOCTRL_GPO0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFWR_PAYLOADIN_W = @as(c_uint, 16);
pub const LRFDPBE_MDMFWR_PAYLOADIN_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMFWR_PAYLOADIN_S = @as(c_uint, 0);
pub const LRFDPBE_MDMFWR_PAYLOADIN_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMFWR_PAYLOADIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFRD_PAYLOADOUT_W = @as(c_uint, 16);
pub const LRFDPBE_MDMFRD_PAYLOADOUT_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMFRD_PAYLOADOUT_S = @as(c_uint, 0);
pub const LRFDPBE_MDMFRD_PAYLOADOUT_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_MDMFRD_PAYLOADOUT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_W = @as(c_uint, 4);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_S = @as(c_uint, 0);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS16 = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS15 = @as(c_uint, 0x0000000E);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS14 = @as(c_uint, 0x0000000D);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS13 = @as(c_uint, 0x0000000C);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS12 = @as(c_uint, 0x0000000B);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS11 = @as(c_uint, 0x0000000A);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS10 = @as(c_uint, 0x00000009);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS9 = @as(c_uint, 0x00000008);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS8 = @as(c_uint, 0x00000007);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS7 = @as(c_uint, 0x00000006);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS6 = @as(c_uint, 0x00000005);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS5 = @as(c_uint, 0x00000004);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS4 = @as(c_uint, 0x00000003);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS3 = @as(c_uint, 0x00000002);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS2 = @as(c_uint, 0x00000001);
pub const LRFDPBE_MDMFWRCTL_WORDSZWR_BITS1 = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_W = @as(c_uint, 4);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_S = @as(c_uint, 0);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS16 = @as(c_uint, 0x0000000F);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS15 = @as(c_uint, 0x0000000E);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS14 = @as(c_uint, 0x0000000D);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS13 = @as(c_uint, 0x0000000C);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS12 = @as(c_uint, 0x0000000B);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS11 = @as(c_uint, 0x0000000A);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS10 = @as(c_uint, 0x00000009);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS9 = @as(c_uint, 0x00000008);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS8 = @as(c_uint, 0x00000007);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS7 = @as(c_uint, 0x00000006);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS6 = @as(c_uint, 0x00000005);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS5 = @as(c_uint, 0x00000004);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS4 = @as(c_uint, 0x00000003);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS3 = @as(c_uint, 0x00000002);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS2 = @as(c_uint, 0x00000001);
pub const LRFDPBE_MDMFRDCTL_WORDSZRD_BITS1 = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFCFG_AFULLTHR_W = @as(c_uint, 8);
pub const LRFDPBE_MDMFCFG_AFULLTHR_M = @as(c_uint, 0x0000FF00);
pub const LRFDPBE_MDMFCFG_AFULLTHR_S = @as(c_uint, 8);
pub const LRFDPBE_MDMFCFG_AFULLTHR_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDPBE_MDMFCFG_AFULLTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFCFG_AEMPTYTHR_W = @as(c_uint, 8);
pub const LRFDPBE_MDMFCFG_AEMPTYTHR_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_MDMFCFG_AEMPTYTHR_S = @as(c_uint, 0);
pub const LRFDPBE_MDMFCFG_AEMPTYTHR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_MDMFCFG_AEMPTYTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFSTA_OVFL = @as(c_uint, 0x00000020);
pub const LRFDPBE_MDMFSTA_OVFL_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_MDMFSTA_OVFL_S = @as(c_uint, 5);
pub const LRFDPBE_MDMFSTA_OVFL_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE_MDMFSTA_OVFL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFSTA_ALMOSTFULL = @as(c_uint, 0x00000010);
pub const LRFDPBE_MDMFSTA_ALMOSTFULL_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_MDMFSTA_ALMOSTFULL_S = @as(c_uint, 4);
pub const LRFDPBE_MDMFSTA_ALMOSTFULL_ONE = @as(c_uint, 0x00000010);
pub const LRFDPBE_MDMFSTA_ALMOSTFULL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFSTA_ALMOSTEMPTY = @as(c_uint, 0x00000008);
pub const LRFDPBE_MDMFSTA_ALMOSTEMPTY_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_MDMFSTA_ALMOSTEMPTY_S = @as(c_uint, 3);
pub const LRFDPBE_MDMFSTA_ALMOSTEMPTY_ONE = @as(c_uint, 0x00000008);
pub const LRFDPBE_MDMFSTA_ALMOSTEMPTY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFSTA_UNFL = @as(c_uint, 0x00000004);
pub const LRFDPBE_MDMFSTA_UNFL_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_MDMFSTA_UNFL_S = @as(c_uint, 2);
pub const LRFDPBE_MDMFSTA_UNFL_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE_MDMFSTA_UNFL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFSTA_RXVALID = @as(c_uint, 0x00000002);
pub const LRFDPBE_MDMFSTA_RXVALID_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_MDMFSTA_RXVALID_S = @as(c_uint, 1);
pub const LRFDPBE_MDMFSTA_RXVALID_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE_MDMFSTA_RXVALID_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_MDMFSTA_TXREADY = @as(c_uint, 0x00000001);
pub const LRFDPBE_MDMFSTA_TXREADY_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_MDMFSTA_TXREADY_S = @as(c_uint, 0);
pub const LRFDPBE_MDMFSTA_TXREADY_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_MDMFSTA_TXREADY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_PHASTA_BUSY_W = @as(c_uint, 2);
pub const LRFDPBE_PHASTA_BUSY_M = @as(c_uint, 0x00000003);
pub const LRFDPBE_PHASTA_BUSY_S = @as(c_uint, 0);
pub const LRFDPBE_PHASTA_BUSY_BUSY = @as(c_uint, 0x00000001);
pub const LRFDPBE_PHASTA_BUSY_IDLE = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR0L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0L_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0L_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR0H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0H_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0H_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0BRL_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR0BRL_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0BRL_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0BRL_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0BRL_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0BRH_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR0BRH_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0BRH_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0BRH_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0BRH_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR1L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1L_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1L_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR1H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1H_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1H_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1BRL_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR1BRL_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1BRL_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1BRL_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1BRL_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1BRH_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR1BRH_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1BRH_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1BRH_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1BRH_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0INL_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR0INL_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0INL_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0INL_VAL_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDPBE_LFSR0INL_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0N_SIZE_W = @as(c_uint, 4);
pub const LRFDPBE_LFSR0N_SIZE_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_LFSR0N_SIZE_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0N_SIZE_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_LFSR0N_SIZE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR0INM_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR0INM_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR0INM_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR0INM_VAL_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_LFSR0INM_VAL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_PHAOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_PHAOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_PHAOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_PHAOUT0_VAL_ALLONES = @as(c_uint, 0x0000DCD7);
pub const LRFDPBE_PHAOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1INL_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR1INL_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1INL_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1INL_VAL_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDPBE_LFSR1INL_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1N_SIZE_W = @as(c_uint, 4);
pub const LRFDPBE_LFSR1N_SIZE_M = @as(c_uint, 0x0000000F);
pub const LRFDPBE_LFSR1N_SIZE_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1N_SIZE_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDPBE_LFSR1N_SIZE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_LFSR1INM_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_LFSR1INM_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_LFSR1INM_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_LFSR1INM_VAL_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_LFSR1INM_VAL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_PHAOUT0BR_VAL_W = @as(c_uint, 16);
pub const LRFDPBE_PHAOUT0BR_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_PHAOUT0BR_VAL_S = @as(c_uint, 0);
pub const LRFDPBE_PHAOUT0BR_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_PHAOUT0BR_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_SYSTIM0L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_SYSTIM0L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_SYSTIM0L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_SYSTIM0L_VALLSB_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_SYSTIM0L_VALLSB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_SYSTIM0H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_SYSTIM0H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_SYSTIM0H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_SYSTIM0H_VALMSB_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_SYSTIM0H_VALMSB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_SYSTIM1L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_SYSTIM1L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_SYSTIM1L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_SYSTIM1L_VALLSB_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_SYSTIM1L_VALLSB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_SYSTIM1H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_SYSTIM1H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_SYSTIM1H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_SYSTIM1H_VALMSB_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_SYSTIM1H_VALMSB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_SYSTIM2L_VALLSB_W = @as(c_uint, 16);
pub const LRFDPBE_SYSTIM2L_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_SYSTIM2L_VALLSB_S = @as(c_uint, 0);
pub const LRFDPBE_SYSTIM2L_VALLSB_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_SYSTIM2L_VALLSB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_SYSTIM2H_VALMSB_W = @as(c_uint, 16);
pub const LRFDPBE_SYSTIM2H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_SYSTIM2H_VALMSB_S = @as(c_uint, 0);
pub const LRFDPBE_SYSTIM2H_VALMSB_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_SYSTIM2H_VALMSB_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI7 = @as(c_uint, 0x00000080);
pub const LRFDPBE_GPI_GPI7_M = @as(c_uint, 0x00000080);
pub const LRFDPBE_GPI_GPI7_S = @as(c_uint, 7);
pub const LRFDPBE_GPI_GPI7_ONE = @as(c_uint, 0x00000080);
pub const LRFDPBE_GPI_GPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI6 = @as(c_uint, 0x00000040);
pub const LRFDPBE_GPI_GPI6_M = @as(c_uint, 0x00000040);
pub const LRFDPBE_GPI_GPI6_S = @as(c_uint, 6);
pub const LRFDPBE_GPI_GPI6_ONE = @as(c_uint, 0x00000040);
pub const LRFDPBE_GPI_GPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI5 = @as(c_uint, 0x00000020);
pub const LRFDPBE_GPI_GPI5_M = @as(c_uint, 0x00000020);
pub const LRFDPBE_GPI_GPI5_S = @as(c_uint, 5);
pub const LRFDPBE_GPI_GPI5_ONE = @as(c_uint, 0x00000020);
pub const LRFDPBE_GPI_GPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI4 = @as(c_uint, 0x00000010);
pub const LRFDPBE_GPI_GPI4_M = @as(c_uint, 0x00000010);
pub const LRFDPBE_GPI_GPI4_S = @as(c_uint, 4);
pub const LRFDPBE_GPI_GPI4_ONE = @as(c_uint, 0x00000010);
pub const LRFDPBE_GPI_GPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI3 = @as(c_uint, 0x00000008);
pub const LRFDPBE_GPI_GPI3_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_GPI_GPI3_S = @as(c_uint, 3);
pub const LRFDPBE_GPI_GPI3_ONE = @as(c_uint, 0x00000008);
pub const LRFDPBE_GPI_GPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI2 = @as(c_uint, 0x00000004);
pub const LRFDPBE_GPI_GPI2_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_GPI_GPI2_S = @as(c_uint, 2);
pub const LRFDPBE_GPI_GPI2_ONE = @as(c_uint, 0x00000004);
pub const LRFDPBE_GPI_GPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI1 = @as(c_uint, 0x00000002);
pub const LRFDPBE_GPI_GPI1_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_GPI_GPI1_S = @as(c_uint, 1);
pub const LRFDPBE_GPI_GPI1_ONE = @as(c_uint, 0x00000002);
pub const LRFDPBE_GPI_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_GPI_GPI0 = @as(c_uint, 0x00000001);
pub const LRFDPBE_GPI_GPI0_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_GPI_GPI0_S = @as(c_uint, 0);
pub const LRFDPBE_GPI_GPI0_ONE = @as(c_uint, 0x00000001);
pub const LRFDPBE_GPI_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDPBE_FCMD_DATA_W = @as(c_uint, 8);
pub const LRFDPBE_FCMD_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_FCMD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_FCMD_DATA_FIFO_COMMIT = @as(c_uint, 0x0000000F);
pub const LRFDPBE_FCMD_DATA_FIFO_DISCARD = @as(c_uint, 0x0000000E);
pub const LRFDPBE_FCMD_DATA_FIFO_RETRY = @as(c_uint, 0x0000000D);
pub const LRFDPBE_FCMD_DATA_FIFO_DEALLOC = @as(c_uint, 0x0000000C);
pub const LRFDPBE_FCMD_DATA_FIFO_RESET = @as(c_uint, 0x0000000B);
pub const LRFDPBE_FCMD_DATA_RXFIFO_RETRY = @as(c_uint, 0x0000000A);
pub const LRFDPBE_FCMD_DATA_RXFIFO_DISCARD = @as(c_uint, 0x00000009);
pub const LRFDPBE_FCMD_DATA_RXFIFO_COMMIT = @as(c_uint, 0x00000008);
pub const LRFDPBE_FCMD_DATA_TXFIFO_RESET = @as(c_uint, 0x00000007);
pub const LRFDPBE_FCMD_DATA_TXFIFO_DEALLOC = @as(c_uint, 0x00000006);
pub const LRFDPBE_FCMD_DATA_TXFIFO_RETRY = @as(c_uint, 0x00000005);
pub const LRFDPBE_FCMD_DATA_TXFIFO_DISCARD = @as(c_uint, 0x00000004);
pub const LRFDPBE_FCMD_DATA_TXFIFO_COMMIT = @as(c_uint, 0x00000003);
pub const LRFDPBE_FCMD_DATA_RXFIFO_DEALLOC = @as(c_uint, 0x00000002);
pub const LRFDPBE_FCMD_DATA_RXFIFO_RESET = @as(c_uint, 0x00000001);
pub const LRFDPBE_FSTAT_TXUNFL = @as(c_uint, 0x00000800);
pub const LRFDPBE_FSTAT_TXUNFL_M = @as(c_uint, 0x00000800);
pub const LRFDPBE_FSTAT_TXUNFL_S = @as(c_uint, 11);
pub const LRFDPBE_FSTAT_TXUNFL_TRUE = @as(c_uint, 0x00000800);
pub const LRFDPBE_FSTAT_TXUNFL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_TXOVFL = @as(c_uint, 0x00000400);
pub const LRFDPBE_FSTAT_TXOVFL_M = @as(c_uint, 0x00000400);
pub const LRFDPBE_FSTAT_TXOVFL_S = @as(c_uint, 10);
pub const LRFDPBE_FSTAT_TXOVFL_TRUE = @as(c_uint, 0x00000400);
pub const LRFDPBE_FSTAT_TXOVFL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_TXEMPTY = @as(c_uint, 0x00000200);
pub const LRFDPBE_FSTAT_TXEMPTY_M = @as(c_uint, 0x00000200);
pub const LRFDPBE_FSTAT_TXEMPTY_S = @as(c_uint, 9);
pub const LRFDPBE_FSTAT_TXEMPTY_TRUE = @as(c_uint, 0x00000200);
pub const LRFDPBE_FSTAT_TXEMPTY_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_TXFULL = @as(c_uint, 0x00000100);
pub const LRFDPBE_FSTAT_TXFULL_M = @as(c_uint, 0x00000100);
pub const LRFDPBE_FSTAT_TXFULL_S = @as(c_uint, 8);
pub const LRFDPBE_FSTAT_TXFULL_TRUE = @as(c_uint, 0x00000100);
pub const LRFDPBE_FSTAT_TXFULL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_RXUNFL = @as(c_uint, 0x00000008);
pub const LRFDPBE_FSTAT_RXUNFL_M = @as(c_uint, 0x00000008);
pub const LRFDPBE_FSTAT_RXUNFL_S = @as(c_uint, 3);
pub const LRFDPBE_FSTAT_RXUNFL_TRUE = @as(c_uint, 0x00000008);
pub const LRFDPBE_FSTAT_RXUNFL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_RXOVFL = @as(c_uint, 0x00000004);
pub const LRFDPBE_FSTAT_RXOVFL_M = @as(c_uint, 0x00000004);
pub const LRFDPBE_FSTAT_RXOVFL_S = @as(c_uint, 2);
pub const LRFDPBE_FSTAT_RXOVFL_TRUE = @as(c_uint, 0x00000004);
pub const LRFDPBE_FSTAT_RXOVFL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_RXEMPTY = @as(c_uint, 0x00000002);
pub const LRFDPBE_FSTAT_RXEMPTY_M = @as(c_uint, 0x00000002);
pub const LRFDPBE_FSTAT_RXEMPTY_S = @as(c_uint, 1);
pub const LRFDPBE_FSTAT_RXEMPTY_TRUE = @as(c_uint, 0x00000002);
pub const LRFDPBE_FSTAT_RXEMPTY_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_FSTAT_RXFULL = @as(c_uint, 0x00000001);
pub const LRFDPBE_FSTAT_RXFULL_M = @as(c_uint, 0x00000001);
pub const LRFDPBE_FSTAT_RXFULL_S = @as(c_uint, 0);
pub const LRFDPBE_FSTAT_RXFULL_TRUE = @as(c_uint, 0x00000001);
pub const LRFDPBE_FSTAT_RXFULL_FALSE = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFWP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_RXFWP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFWP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_RXFWP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFWP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFRP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_RXFRP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFRP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_RXFRP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFRP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFSWP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_RXFSWP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFSWP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_RXFSWP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFSWP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFSRP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_RXFSRP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFSRP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_RXFSRP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFSRP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFWP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_TXFWP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFWP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_TXFWP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFWP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFRP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_TXFRP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFRP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_TXFRP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFRP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFSWP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_TXFSWP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFSWP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_TXFSWP_PTR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFSWP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFSRP_PTR_W = @as(c_uint, 10);
pub const LRFDPBE_TXFSRP_PTR_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFSRP_PTR_S = @as(c_uint, 0);
pub const LRFDPBE_TXFSRP_PTR_ALLONES_2 = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFSRP_PTR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFWRITABLE_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_RXFWRITABLE_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFWRITABLE_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_RXFWRITABLE_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFWRITABLE_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFREADABLE_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_RXFREADABLE_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFREADABLE_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_RXFREADABLE_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_RXFREADABLE_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFWRITABLE_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_TXFWRITABLE_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFWRITABLE_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_TXFWRITABLE_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFWRITABLE_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFREADABLE_BYTES_W = @as(c_uint, 10);
pub const LRFDPBE_TXFREADABLE_BYTES_M = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFREADABLE_BYTES_S = @as(c_uint, 0);
pub const LRFDPBE_TXFREADABLE_BYTES_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDPBE_TXFREADABLE_BYTES_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFBRD_DATA_W = @as(c_uint, 8);
pub const LRFDPBE_RXFBRD_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RXFBRD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_RXFBRD_DATA_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RXFBRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFBWR_DATA_W = @as(c_uint, 8);
pub const LRFDPBE_RXFBWR_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RXFBWR_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_RXFBWR_DATA_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_RXFBWR_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFBRD_DATA_W = @as(c_uint, 8);
pub const LRFDPBE_TXFBRD_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_TXFBRD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_TXFBRD_DATA_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_TXFBRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFBWR_DATA_W = @as(c_uint, 8);
pub const LRFDPBE_TXFBWR_DATA_M = @as(c_uint, 0x000000FF);
pub const LRFDPBE_TXFBWR_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_TXFBWR_DATA_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDPBE_TXFBWR_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFHRD_DATA_W = @as(c_uint, 16);
pub const LRFDPBE_RXFHRD_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RXFHRD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_RXFHRD_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RXFHRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_RXFHWR_DATA_W = @as(c_uint, 16);
pub const LRFDPBE_RXFHWR_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RXFHWR_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_RXFHWR_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_RXFHWR_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFHRD_DATA_W = @as(c_uint, 16);
pub const LRFDPBE_TXFHRD_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TXFHRD_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_TXFHRD_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TXFHRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDPBE_TXFHWR_DATA_W = @as(c_uint, 16);
pub const LRFDPBE_TXFHWR_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TXFHWR_DATA_S = @as(c_uint, 0);
pub const LRFDPBE_TXFHWR_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDPBE_TXFHWR_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const __HW_LRFDRFE_H__ = "";
pub const LRFDRFE_O_ENABLE = @as(c_uint, 0x00000000);
pub const LRFDRFE_O_FWSRC = @as(c_uint, 0x00000004);
pub const LRFDRFE_O_INIT = @as(c_uint, 0x00000008);
pub const LRFDRFE_O_PDREQ = @as(c_uint, 0x0000000C);
pub const LRFDRFE_O_EVT0 = @as(c_uint, 0x00000010);
pub const LRFDRFE_O_EVT1 = @as(c_uint, 0x00000014);
pub const LRFDRFE_O_EVTMSK0 = @as(c_uint, 0x00000018);
pub const LRFDRFE_O_EVTMSK1 = @as(c_uint, 0x0000001C);
pub const LRFDRFE_O_EVTCLR0 = @as(c_uint, 0x00000020);
pub const LRFDRFE_O_EVTCLR1 = @as(c_uint, 0x00000024);
pub const LRFDRFE_O_HFXTSTAT = @as(c_uint, 0x00000028);
pub const LRFDRFE_O_RFSTATE = @as(c_uint, 0x00000030);
pub const LRFDRFE_O_API = @as(c_uint, 0x00000048);
pub const LRFDRFE_O_CMDPAR0 = @as(c_uint, 0x0000004C);
pub const LRFDRFE_O_CMDPAR1 = @as(c_uint, 0x00000050);
pub const LRFDRFE_O_MSGBOX = @as(c_uint, 0x00000054);
pub const LRFDRFE_O_MCEDATOUT0 = @as(c_uint, 0x00000058);
pub const LRFDRFE_O_MCEDATIN0 = @as(c_uint, 0x0000005C);
pub const LRFDRFE_O_MCECMDOUT = @as(c_uint, 0x00000060);
pub const LRFDRFE_O_MCECMDIN = @as(c_uint, 0x00000064);
pub const LRFDRFE_O_PBEDATOUT0 = @as(c_uint, 0x00000068);
pub const LRFDRFE_O_PBEDATIN0 = @as(c_uint, 0x0000006C);
pub const LRFDRFE_O_PBECMDOUT = @as(c_uint, 0x00000070);
pub const LRFDRFE_O_PBECMDIN = @as(c_uint, 0x00000074);
pub const LRFDRFE_O_STRB = @as(c_uint, 0x00000078);
pub const LRFDRFE_O_MAGNTHRCFG = @as(c_uint, 0x00000080);
pub const LRFDRFE_O_MAGNTHR = @as(c_uint, 0x00000084);
pub const LRFDRFE_O_RSSIOFFSET = @as(c_uint, 0x00000088);
pub const LRFDRFE_O_GAINCTL = @as(c_uint, 0x0000008C);
pub const LRFDRFE_O_MAGNCTL0 = @as(c_uint, 0x00000090);
pub const LRFDRFE_O_MAGNCTL1 = @as(c_uint, 0x00000094);
pub const LRFDRFE_O_SPARE0 = @as(c_uint, 0x00000098);
pub const LRFDRFE_O_SPARE1 = @as(c_uint, 0x0000009C);
pub const LRFDRFE_O_SPARE2 = @as(c_uint, 0x000000A0);
pub const LRFDRFE_O_SPARE3 = @as(c_uint, 0x000000A4);
pub const LRFDRFE_O_SPARE4 = @as(c_uint, 0x000000A8);
pub const LRFDRFE_O_SPARE5 = @as(c_uint, 0x000000AC);
pub const LRFDRFE_O_LNA = @as(c_uint, 0x000000B0);
pub const LRFDRFE_O_IFAMPRFLDO = @as(c_uint, 0x000000B4);
pub const LRFDRFE_O_PA0 = @as(c_uint, 0x000000B8);
pub const LRFDRFE_O_PA1 = @as(c_uint, 0x000000BC);
pub const LRFDRFE_O_ULNA = @as(c_uint, 0x000000C0);
pub const LRFDRFE_O_IFADC0 = @as(c_uint, 0x000000C4);
pub const LRFDRFE_O_IFADC1 = @as(c_uint, 0x000000C8);
pub const LRFDRFE_O_IFADCLF = @as(c_uint, 0x000000CC);
pub const LRFDRFE_O_IFADCQUANT = @as(c_uint, 0x000000D0);
pub const LRFDRFE_O_IFADCALDO = @as(c_uint, 0x000000D4);
pub const LRFDRFE_O_IFADCDLDO = @as(c_uint, 0x000000D8);
pub const LRFDRFE_O_IFADCTST = @as(c_uint, 0x000000DC);
pub const LRFDRFE_O_ATSTREFL = @as(c_uint, 0x000000E0);
pub const LRFDRFE_O_ATSTREFH = @as(c_uint, 0x000000E4);
pub const LRFDRFE_O_DCO = @as(c_uint, 0x000000E8);
pub const LRFDRFE_O_DIV = @as(c_uint, 0x000000EC);
pub const LRFDRFE_O_DIVLDO = @as(c_uint, 0x000000F0);
pub const LRFDRFE_O_TDCLDO = @as(c_uint, 0x000000F4);
pub const LRFDRFE_O_DCOLDO0 = @as(c_uint, 0x000000F8);
pub const LRFDRFE_O_DCOLDO1 = @as(c_uint, 0x000000FC);
pub const LRFDRFE_O_PRE0 = @as(c_uint, 0x00000100);
pub const LRFDRFE_O_PRE1 = @as(c_uint, 0x00000104);
pub const LRFDRFE_O_PRE2 = @as(c_uint, 0x00000108);
pub const LRFDRFE_O_PRE3 = @as(c_uint, 0x0000010C);
pub const LRFDRFE_O_CAL0 = @as(c_uint, 0x00000110);
pub const LRFDRFE_O_CAL1 = @as(c_uint, 0x00000114);
pub const LRFDRFE_O_CAL2 = @as(c_uint, 0x00000118);
pub const LRFDRFE_O_CAL3 = @as(c_uint, 0x0000011C);
pub const LRFDRFE_O_MISC0 = @as(c_uint, 0x00000120);
pub const LRFDRFE_O_MISC1 = @as(c_uint, 0x00000124);
pub const LRFDRFE_O_LF0 = @as(c_uint, 0x00000128);
pub const LRFDRFE_O_LF1 = @as(c_uint, 0x0000012C);
pub const LRFDRFE_O_PHEDISC = @as(c_uint, 0x00000130);
pub const LRFDRFE_O_PHINIT = @as(c_uint, 0x00000134);
pub const LRFDRFE_O_PLLMON0 = @as(c_uint, 0x00000138);
pub const LRFDRFE_O_PLLMON1 = @as(c_uint, 0x0000013C);
pub const LRFDRFE_O_MOD0 = @as(c_uint, 0x00000140);
pub const LRFDRFE_O_MOD1 = @as(c_uint, 0x00000144);
pub const LRFDRFE_O_DTX0 = @as(c_uint, 0x00000148);
pub const LRFDRFE_O_DTX1 = @as(c_uint, 0x0000014C);
pub const LRFDRFE_O_DTX2 = @as(c_uint, 0x00000150);
pub const LRFDRFE_O_DTX3 = @as(c_uint, 0x00000154);
pub const LRFDRFE_O_DTX4 = @as(c_uint, 0x00000158);
pub const LRFDRFE_O_DTX5 = @as(c_uint, 0x0000015C);
pub const LRFDRFE_O_DTX6 = @as(c_uint, 0x00000160);
pub const LRFDRFE_O_DTX7 = @as(c_uint, 0x00000164);
pub const LRFDRFE_O_DTX8 = @as(c_uint, 0x00000168);
pub const LRFDRFE_O_DTX9 = @as(c_uint, 0x0000016C);
pub const LRFDRFE_O_DTX10 = @as(c_uint, 0x00000170);
pub const LRFDRFE_O_DTX11 = @as(c_uint, 0x00000174);
pub const LRFDRFE_O_PLLM0L = @as(c_uint, 0x00000178);
pub const LRFDRFE_O_PLLM0H = @as(c_uint, 0x0000017C);
pub const LRFDRFE_O_PLLM1L = @as(c_uint, 0x00000180);
pub const LRFDRFE_O_PLLM1H = @as(c_uint, 0x00000184);
pub const LRFDRFE_O_CALMCRS = @as(c_uint, 0x00000188);
pub const LRFDRFE_O_CALMMID = @as(c_uint, 0x0000018C);
pub const LRFDRFE_O_REFDIV = @as(c_uint, 0x00000190);
pub const LRFDRFE_O_DLOCTL0 = @as(c_uint, 0x00000198);
pub const LRFDRFE_O_DLOCTL1 = @as(c_uint, 0x000001A0);
pub const LRFDRFE_O_DCOOVR0 = @as(c_uint, 0x000001A8);
pub const LRFDRFE_O_DCOOVR1 = @as(c_uint, 0x000001AC);
pub const LRFDRFE_O_DTST = @as(c_uint, 0x000001B0);
pub const LRFDRFE_O_DLOEV = @as(c_uint, 0x000001B4);
pub const LRFDRFE_O_DTSTRD = @as(c_uint, 0x000001B8);
pub const LRFDRFE_O_FDCOSPANLSB = @as(c_uint, 0x000001BC);
pub const LRFDRFE_O_FDCOSPANMSB = @as(c_uint, 0x000001C0);
pub const LRFDRFE_O_TDCCAL = @as(c_uint, 0x000001C4);
pub const LRFDRFE_O_CALRES = @as(c_uint, 0x000001C8);
pub const LRFDRFE_O_GPI = @as(c_uint, 0x000001CC);
pub const LRFDRFE_O_MATHACCELIN = @as(c_uint, 0x000001D0);
pub const LRFDRFE_O_LIN2LOGOUT = @as(c_uint, 0x000001D4);
pub const LRFDRFE_O_DIVBY3OUT = @as(c_uint, 0x000001D8);
pub const LRFDRFE_O_TIMCTL = @as(c_uint, 0x000001DC);
pub const LRFDRFE_O_TIMINC = @as(c_uint, 0x000001E0);
pub const LRFDRFE_O_TIMPER = @as(c_uint, 0x000001E4);
pub const LRFDRFE_O_TIMCNT = @as(c_uint, 0x000001E8);
pub const LRFDRFE_O_TIMCAPT = @as(c_uint, 0x000001EC);
pub const LRFDRFE_O_TRCCTRL = @as(c_uint, 0x000001F0);
pub const LRFDRFE_O_TRCSTAT = @as(c_uint, 0x000001F4);
pub const LRFDRFE_O_TRCCMD = @as(c_uint, 0x000001F8);
pub const LRFDRFE_O_TRCPAR0 = @as(c_uint, 0x000001FC);
pub const LRFDRFE_O_TRCPAR1 = @as(c_uint, 0x00000200);
pub const LRFDRFE_O_GPOCTL = @as(c_uint, 0x00000204);
pub const LRFDRFE_O_ANAISOCTL = @as(c_uint, 0x00000208);
pub const LRFDRFE_O_DIVCTL = @as(c_uint, 0x0000020C);
pub const LRFDRFE_O_RXCTRL = @as(c_uint, 0x00000210);
pub const LRFDRFE_O_MAGNACC0 = @as(c_uint, 0x00000214);
pub const LRFDRFE_O_MAGNACC1 = @as(c_uint, 0x00000218);
pub const LRFDRFE_O_RSSI = @as(c_uint, 0x0000021C);
pub const LRFDRFE_O_RSSIMAX = @as(c_uint, 0x00000220);
pub const LRFDRFE_O_RFGAIN = @as(c_uint, 0x00000224);
pub const LRFDRFE_O_IFADCSTAT = @as(c_uint, 0x00000228);
pub const LRFDRFE_O_DIVSTA = @as(c_uint, 0x0000022C);
pub const LRFDRFE_O_DIVIDENDL = @as(c_uint, 0x00000230);
pub const LRFDRFE_O_DIVIDENDH = @as(c_uint, 0x00000234);
pub const LRFDRFE_O_DIVISORL = @as(c_uint, 0x00000238);
pub const LRFDRFE_O_DIVISORH = @as(c_uint, 0x0000023C);
pub const LRFDRFE_O_QUOTIENTL = @as(c_uint, 0x00000240);
pub const LRFDRFE_O_QUOTIENTH = @as(c_uint, 0x00000244);
pub const LRFDRFE_O_PRODUCTL = @as(c_uint, 0x00000248);
pub const LRFDRFE_O_PRODUCTH = @as(c_uint, 0x0000024C);
pub const LRFDRFE_O_MULTSTA = @as(c_uint, 0x00000250);
pub const LRFDRFE_O_MULTCFG = @as(c_uint, 0x00000258);
pub const LRFDRFE_ENABLE_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE_ENABLE_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_ENABLE_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE_ENABLE_ACC1_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_ENABLE_ACC1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ENABLE_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE_ENABLE_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_ENABLE_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE_ENABLE_ACC0_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_ENABLE_ACC0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ENABLE_LOCTIM = @as(c_uint, 0x00000002);
pub const LRFDRFE_ENABLE_LOCTIM_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_ENABLE_LOCTIM_S = @as(c_uint, 1);
pub const LRFDRFE_ENABLE_LOCTIM_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_ENABLE_LOCTIM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ENABLE_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDRFE_ENABLE_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_ENABLE_TOPSM_S = @as(c_uint, 0);
pub const LRFDRFE_ENABLE_TOPSM_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_ENABLE_TOPSM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_FWSRC_DATARAM = @as(c_uint, 0x00000004);
pub const LRFDRFE_FWSRC_DATARAM_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_FWSRC_DATARAM_S = @as(c_uint, 2);
pub const LRFDRFE_FWSRC_DATARAM_S2RRAM = @as(c_uint, 0x00000004);
pub const LRFDRFE_FWSRC_DATARAM_RFERAM = @as(c_uint, 0x00000000);
pub const LRFDRFE_FWSRC_FWRAM = @as(c_uint, 0x00000002);
pub const LRFDRFE_FWSRC_FWRAM_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_FWSRC_FWRAM_S = @as(c_uint, 1);
pub const LRFDRFE_FWSRC_FWRAM_S2RRAM = @as(c_uint, 0x00000002);
pub const LRFDRFE_FWSRC_FWRAM_RFERAM = @as(c_uint, 0x00000000);
pub const LRFDRFE_FWSRC_BANK = @as(c_uint, 0x00000001);
pub const LRFDRFE_FWSRC_BANK_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_FWSRC_BANK_S = @as(c_uint, 0);
pub const LRFDRFE_FWSRC_BANK_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_FWSRC_BANK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_INIT_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE_INIT_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_INIT_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE_INIT_ACC1_RESET = @as(c_uint, 0x00000008);
pub const LRFDRFE_INIT_ACC1_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_INIT_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE_INIT_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_INIT_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE_INIT_ACC0_RESET = @as(c_uint, 0x00000004);
pub const LRFDRFE_INIT_ACC0_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_INIT_LOCTIM = @as(c_uint, 0x00000002);
pub const LRFDRFE_INIT_LOCTIM_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_INIT_LOCTIM_S = @as(c_uint, 1);
pub const LRFDRFE_INIT_LOCTIM_RESET = @as(c_uint, 0x00000002);
pub const LRFDRFE_INIT_LOCTIM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_INIT_TOPSM = @as(c_uint, 0x00000001);
pub const LRFDRFE_INIT_TOPSM_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_INIT_TOPSM_S = @as(c_uint, 0);
pub const LRFDRFE_INIT_TOPSM_RESET = @as(c_uint, 0x00000001);
pub const LRFDRFE_INIT_TOPSM_NO_EFFECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_PDREQ_TOPSMPDREQ = @as(c_uint, 0x00000001);
pub const LRFDRFE_PDREQ_TOPSMPDREQ_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_PDREQ_TOPSMPDREQ_S = @as(c_uint, 0);
pub const LRFDRFE_PDREQ_TOPSMPDREQ_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_PDREQ_TOPSMPDREQ_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_MAGNTHR = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVT0_MAGNTHR_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVT0_MAGNTHR_S = @as(c_uint, 14);
pub const LRFDRFE_EVT0_MAGNTHR_ONE = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVT0_MAGNTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_S2RSTOP = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVT0_S2RSTOP_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVT0_S2RSTOP_S = @as(c_uint, 13);
pub const LRFDRFE_EVT0_S2RSTOP_ONE = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVT0_S2RSTOP_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_SYSTCMP2 = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVT0_SYSTCMP2_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVT0_SYSTCMP2_S = @as(c_uint, 12);
pub const LRFDRFE_EVT0_SYSTCMP2_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVT0_SYSTCMP2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_SYSTCMP1 = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVT0_SYSTCMP1_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVT0_SYSTCMP1_S = @as(c_uint, 11);
pub const LRFDRFE_EVT0_SYSTCMP1_ONE = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVT0_SYSTCMP1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_SYSTCMP0 = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVT0_SYSTCMP0_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVT0_SYSTCMP0_S = @as(c_uint, 10);
pub const LRFDRFE_EVT0_SYSTCMP0_ONE = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVT0_SYSTCMP0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_PBERFEDAT = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVT0_PBERFEDAT_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVT0_PBERFEDAT_S = @as(c_uint, 9);
pub const LRFDRFE_EVT0_PBERFEDAT_ONE = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVT0_PBERFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_MDMRFEDAT = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVT0_MDMRFEDAT_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVT0_MDMRFEDAT_S = @as(c_uint, 8);
pub const LRFDRFE_EVT0_MDMRFEDAT_ONE = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVT0_MDMRFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_DLO = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVT0_DLO_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVT0_DLO_S = @as(c_uint, 7);
pub const LRFDRFE_EVT0_DLO_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVT0_DLO_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_PBECMD = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVT0_PBECMD_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVT0_PBECMD_S = @as(c_uint, 6);
pub const LRFDRFE_EVT0_PBECMD_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVT0_PBECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_COUNTER = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVT0_COUNTER_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVT0_COUNTER_S = @as(c_uint, 5);
pub const LRFDRFE_EVT0_COUNTER_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVT0_COUNTER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_MDMCMD = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVT0_MDMCMD_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVT0_MDMCMD_S = @as(c_uint, 4);
pub const LRFDRFE_EVT0_MDMCMD_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVT0_MDMCMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVT0_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVT0_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE_EVT0_ACC1_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVT0_ACC1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVT0_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVT0_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE_EVT0_ACC0_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVT0_ACC0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVT0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVT0_TIMER_S = @as(c_uint, 1);
pub const LRFDRFE_EVT0_TIMER_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVT0_TIMER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT0_RFEAPI = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVT0_RFEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVT0_RFEAPI_S = @as(c_uint, 0);
pub const LRFDRFE_EVT0_RFEAPI_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVT0_RFEAPI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_PREREFCLK = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVT1_PREREFCLK_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVT1_PREREFCLK_S = @as(c_uint, 13);
pub const LRFDRFE_EVT1_PREREFCLK_ONE = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVT1_PREREFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_REFCLK = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVT1_REFCLK_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVT1_REFCLK_S = @as(c_uint, 12);
pub const LRFDRFE_EVT1_REFCLK_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVT1_REFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_FBLWTHR = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVT1_FBLWTHR_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVT1_FBLWTHR_S = @as(c_uint, 11);
pub const LRFDRFE_EVT1_FBLWTHR_ONE = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVT1_FBLWTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_FABVTHR = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVT1_FABVTHR_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVT1_FABVTHR_S = @as(c_uint, 10);
pub const LRFDRFE_EVT1_FABVTHR_ONE = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVT1_FABVTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_LOCK = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVT1_LOCK_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVT1_LOCK_S = @as(c_uint, 9);
pub const LRFDRFE_EVT1_LOCK_ONE = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVT1_LOCK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_LOL = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVT1_LOL_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVT1_LOL_S = @as(c_uint, 8);
pub const LRFDRFE_EVT1_LOL_ONE = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVT1_LOL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI7 = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVT1_GPI7_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVT1_GPI7_S = @as(c_uint, 7);
pub const LRFDRFE_EVT1_GPI7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVT1_GPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI6 = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVT1_GPI6_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVT1_GPI6_S = @as(c_uint, 6);
pub const LRFDRFE_EVT1_GPI6_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVT1_GPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI5 = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVT1_GPI5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVT1_GPI5_S = @as(c_uint, 5);
pub const LRFDRFE_EVT1_GPI5_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVT1_GPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI4 = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVT1_GPI4_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVT1_GPI4_S = @as(c_uint, 4);
pub const LRFDRFE_EVT1_GPI4_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVT1_GPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVT1_GPI3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVT1_GPI3_S = @as(c_uint, 3);
pub const LRFDRFE_EVT1_GPI3_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVT1_GPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVT1_GPI2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVT1_GPI2_S = @as(c_uint, 2);
pub const LRFDRFE_EVT1_GPI2_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVT1_GPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVT1_GPI1_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVT1_GPI1_S = @as(c_uint, 1);
pub const LRFDRFE_EVT1_GPI1_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVT1_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVT1_GPI0 = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVT1_GPI0_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVT1_GPI0_S = @as(c_uint, 0);
pub const LRFDRFE_EVT1_GPI0_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVT1_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_MAGNTHR = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVTMSK0_MAGNTHR_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVTMSK0_MAGNTHR_S = @as(c_uint, 14);
pub const LRFDRFE_EVTMSK0_MAGNTHR_EN = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVTMSK0_MAGNTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_S2RSTOP = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTMSK0_S2RSTOP_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTMSK0_S2RSTOP_S = @as(c_uint, 13);
pub const LRFDRFE_EVTMSK0_S2RSTOP_EN = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTMSK0_S2RSTOP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_SYSTCMP2 = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTMSK0_SYSTCMP2_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTMSK0_SYSTCMP2_S = @as(c_uint, 12);
pub const LRFDRFE_EVTMSK0_SYSTCMP2_EN = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTMSK0_SYSTCMP2_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_SYSTCMP1 = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTMSK0_SYSTCMP1_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTMSK0_SYSTCMP1_S = @as(c_uint, 11);
pub const LRFDRFE_EVTMSK0_SYSTCMP1_EN = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTMSK0_SYSTCMP1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_SYSTCMP0 = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTMSK0_SYSTCMP0_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTMSK0_SYSTCMP0_S = @as(c_uint, 10);
pub const LRFDRFE_EVTMSK0_SYSTCMP0_EN = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTMSK0_SYSTCMP0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_PBERFEDAT = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTMSK0_PBERFEDAT_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTMSK0_PBERFEDAT_S = @as(c_uint, 9);
pub const LRFDRFE_EVTMSK0_PBERFEDAT_EN = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTMSK0_PBERFEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_MDMRFEDAT = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTMSK0_MDMRFEDAT_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTMSK0_MDMRFEDAT_S = @as(c_uint, 8);
pub const LRFDRFE_EVTMSK0_MDMRFEDAT_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTMSK0_MDMRFEDAT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_DLO = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTMSK0_DLO_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTMSK0_DLO_S = @as(c_uint, 7);
pub const LRFDRFE_EVTMSK0_DLO_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTMSK0_DLO_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_PBECMD = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTMSK0_PBECMD_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTMSK0_PBECMD_S = @as(c_uint, 6);
pub const LRFDRFE_EVTMSK0_PBECMD_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTMSK0_PBECMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_COUNTER = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTMSK0_COUNTER_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTMSK0_COUNTER_S = @as(c_uint, 5);
pub const LRFDRFE_EVTMSK0_COUNTER_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTMSK0_COUNTER_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_MDMCMD = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTMSK0_MDMCMD_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTMSK0_MDMCMD_S = @as(c_uint, 4);
pub const LRFDRFE_EVTMSK0_MDMCMD_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTMSK0_MDMCMD_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTMSK0_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTMSK0_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE_EVTMSK0_ACC1_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTMSK0_ACC1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTMSK0_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTMSK0_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE_EVTMSK0_ACC0_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTMSK0_ACC0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTMSK0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTMSK0_TIMER_S = @as(c_uint, 1);
pub const LRFDRFE_EVTMSK0_TIMER_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTMSK0_TIMER_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK0_RFEAPI = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTMSK0_RFEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTMSK0_RFEAPI_S = @as(c_uint, 0);
pub const LRFDRFE_EVTMSK0_RFEAPI_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTMSK0_RFEAPI_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_PREREFCLK = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTMSK1_PREREFCLK_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTMSK1_PREREFCLK_S = @as(c_uint, 13);
pub const LRFDRFE_EVTMSK1_PREREFCLK_EN = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTMSK1_PREREFCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_REFCLK = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTMSK1_REFCLK_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTMSK1_REFCLK_S = @as(c_uint, 12);
pub const LRFDRFE_EVTMSK1_REFCLK_EN = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTMSK1_REFCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_FBLWTHR = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTMSK1_FBLWTHR_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTMSK1_FBLWTHR_S = @as(c_uint, 11);
pub const LRFDRFE_EVTMSK1_FBLWTHR_EN = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTMSK1_FBLWTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_FABVTHR = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTMSK1_FABVTHR_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTMSK1_FABVTHR_S = @as(c_uint, 10);
pub const LRFDRFE_EVTMSK1_FABVTHR_EN = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTMSK1_FABVTHR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_LOCK = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTMSK1_LOCK_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTMSK1_LOCK_S = @as(c_uint, 9);
pub const LRFDRFE_EVTMSK1_LOCK_EN = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTMSK1_LOCK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_LOL = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTMSK1_LOL_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTMSK1_LOL_S = @as(c_uint, 8);
pub const LRFDRFE_EVTMSK1_LOL_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTMSK1_LOL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI7 = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTMSK1_GPI7_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTMSK1_GPI7_S = @as(c_uint, 7);
pub const LRFDRFE_EVTMSK1_GPI7_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTMSK1_GPI7_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI6 = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTMSK1_GPI6_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTMSK1_GPI6_S = @as(c_uint, 6);
pub const LRFDRFE_EVTMSK1_GPI6_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTMSK1_GPI6_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI5 = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTMSK1_GPI5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTMSK1_GPI5_S = @as(c_uint, 5);
pub const LRFDRFE_EVTMSK1_GPI5_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTMSK1_GPI5_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI4 = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTMSK1_GPI4_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTMSK1_GPI4_S = @as(c_uint, 4);
pub const LRFDRFE_EVTMSK1_GPI4_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTMSK1_GPI4_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTMSK1_GPI3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTMSK1_GPI3_S = @as(c_uint, 3);
pub const LRFDRFE_EVTMSK1_GPI3_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTMSK1_GPI3_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTMSK1_GPI2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTMSK1_GPI2_S = @as(c_uint, 2);
pub const LRFDRFE_EVTMSK1_GPI2_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTMSK1_GPI2_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTMSK1_GPI1_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTMSK1_GPI1_S = @as(c_uint, 1);
pub const LRFDRFE_EVTMSK1_GPI1_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTMSK1_GPI1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTMSK1_GPI0 = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTMSK1_GPI0_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTMSK1_GPI0_S = @as(c_uint, 0);
pub const LRFDRFE_EVTMSK1_GPI0_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTMSK1_GPI0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_MAGNTHR = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVTCLR0_MAGNTHR_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVTCLR0_MAGNTHR_S = @as(c_uint, 14);
pub const LRFDRFE_EVTCLR0_MAGNTHR_ONE = @as(c_uint, 0x00004000);
pub const LRFDRFE_EVTCLR0_MAGNTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_S2RSTOP = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTCLR0_S2RSTOP_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTCLR0_S2RSTOP_S = @as(c_uint, 13);
pub const LRFDRFE_EVTCLR0_S2RSTOP_ONE = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTCLR0_S2RSTOP_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_SYSTCMP2 = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTCLR0_SYSTCMP2_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTCLR0_SYSTCMP2_S = @as(c_uint, 12);
pub const LRFDRFE_EVTCLR0_SYSTCMP2_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTCLR0_SYSTCMP2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_SYSTCMP1 = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTCLR0_SYSTCMP1_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTCLR0_SYSTCMP1_S = @as(c_uint, 11);
pub const LRFDRFE_EVTCLR0_SYSTCMP1_ONE = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTCLR0_SYSTCMP1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_SYSTCMP0 = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTCLR0_SYSTCMP0_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTCLR0_SYSTCMP0_S = @as(c_uint, 10);
pub const LRFDRFE_EVTCLR0_SYSTCMP0_ONE = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTCLR0_SYSTCMP0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_PBERFEDAT = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTCLR0_PBERFEDAT_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTCLR0_PBERFEDAT_S = @as(c_uint, 9);
pub const LRFDRFE_EVTCLR0_PBERFEDAT_ONE = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTCLR0_PBERFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_MDMRFEDAT = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTCLR0_MDMRFEDAT_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTCLR0_MDMRFEDAT_S = @as(c_uint, 8);
pub const LRFDRFE_EVTCLR0_MDMRFEDAT_ONE = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTCLR0_MDMRFEDAT_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_DLO = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTCLR0_DLO_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTCLR0_DLO_S = @as(c_uint, 7);
pub const LRFDRFE_EVTCLR0_DLO_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTCLR0_DLO_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_PBECMD = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTCLR0_PBECMD_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTCLR0_PBECMD_S = @as(c_uint, 6);
pub const LRFDRFE_EVTCLR0_PBECMD_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTCLR0_PBECMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_COUNTER = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTCLR0_COUNTER_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTCLR0_COUNTER_S = @as(c_uint, 5);
pub const LRFDRFE_EVTCLR0_COUNTER_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTCLR0_COUNTER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_MDMCMD = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTCLR0_MDMCMD_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTCLR0_MDMCMD_S = @as(c_uint, 4);
pub const LRFDRFE_EVTCLR0_MDMCMD_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTCLR0_MDMCMD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_ACC1 = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTCLR0_ACC1_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTCLR0_ACC1_S = @as(c_uint, 3);
pub const LRFDRFE_EVTCLR0_ACC1_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTCLR0_ACC1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_ACC0 = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTCLR0_ACC0_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTCLR0_ACC0_S = @as(c_uint, 2);
pub const LRFDRFE_EVTCLR0_ACC0_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTCLR0_ACC0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_TIMER = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTCLR0_TIMER_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTCLR0_TIMER_S = @as(c_uint, 1);
pub const LRFDRFE_EVTCLR0_TIMER_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTCLR0_TIMER_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR0_RFEAPI = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTCLR0_RFEAPI_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTCLR0_RFEAPI_S = @as(c_uint, 0);
pub const LRFDRFE_EVTCLR0_RFEAPI_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTCLR0_RFEAPI_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_PREREFCLK = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTCLR1_PREREFCLK_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTCLR1_PREREFCLK_S = @as(c_uint, 13);
pub const LRFDRFE_EVTCLR1_PREREFCLK_ONE = @as(c_uint, 0x00002000);
pub const LRFDRFE_EVTCLR1_PREREFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_REFCLK = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTCLR1_REFCLK_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTCLR1_REFCLK_S = @as(c_uint, 12);
pub const LRFDRFE_EVTCLR1_REFCLK_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE_EVTCLR1_REFCLK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_FBLWTHR = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTCLR1_FBLWTHR_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTCLR1_FBLWTHR_S = @as(c_uint, 11);
pub const LRFDRFE_EVTCLR1_FBLWTHR_ONE = @as(c_uint, 0x00000800);
pub const LRFDRFE_EVTCLR1_FBLWTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_FABVTHR = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTCLR1_FABVTHR_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTCLR1_FABVTHR_S = @as(c_uint, 10);
pub const LRFDRFE_EVTCLR1_FABVTHR_ONE = @as(c_uint, 0x00000400);
pub const LRFDRFE_EVTCLR1_FABVTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_LOCK = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTCLR1_LOCK_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTCLR1_LOCK_S = @as(c_uint, 9);
pub const LRFDRFE_EVTCLR1_LOCK_ONE = @as(c_uint, 0x00000200);
pub const LRFDRFE_EVTCLR1_LOCK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_LOL = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTCLR1_LOL_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTCLR1_LOL_S = @as(c_uint, 8);
pub const LRFDRFE_EVTCLR1_LOL_ONE = @as(c_uint, 0x00000100);
pub const LRFDRFE_EVTCLR1_LOL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI7 = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTCLR1_GPI7_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTCLR1_GPI7_S = @as(c_uint, 7);
pub const LRFDRFE_EVTCLR1_GPI7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_EVTCLR1_GPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI6 = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTCLR1_GPI6_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTCLR1_GPI6_S = @as(c_uint, 6);
pub const LRFDRFE_EVTCLR1_GPI6_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_EVTCLR1_GPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI5 = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTCLR1_GPI5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTCLR1_GPI5_S = @as(c_uint, 5);
pub const LRFDRFE_EVTCLR1_GPI5_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_EVTCLR1_GPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI4 = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTCLR1_GPI4_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTCLR1_GPI4_S = @as(c_uint, 4);
pub const LRFDRFE_EVTCLR1_GPI4_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_EVTCLR1_GPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTCLR1_GPI3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTCLR1_GPI3_S = @as(c_uint, 3);
pub const LRFDRFE_EVTCLR1_GPI3_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_EVTCLR1_GPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTCLR1_GPI2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTCLR1_GPI2_S = @as(c_uint, 2);
pub const LRFDRFE_EVTCLR1_GPI2_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_EVTCLR1_GPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTCLR1_GPI1_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTCLR1_GPI1_S = @as(c_uint, 1);
pub const LRFDRFE_EVTCLR1_GPI1_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_EVTCLR1_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_EVTCLR1_GPI0 = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTCLR1_GPI0_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTCLR1_GPI0_S = @as(c_uint, 0);
pub const LRFDRFE_EVTCLR1_GPI0_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_EVTCLR1_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_HFXTSTAT_STAT = @as(c_uint, 0x00000001);
pub const LRFDRFE_HFXTSTAT_STAT_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_HFXTSTAT_STAT_S = @as(c_uint, 0);
pub const LRFDRFE_HFXTSTAT_STAT_QUAL = @as(c_uint, 0x00000001);
pub const LRFDRFE_HFXTSTAT_STAT_NONQUAL = @as(c_uint, 0x00000000);
pub const LRFDRFE_RFSTATE_VAL_W = @as(c_uint, 4);
pub const LRFDRFE_RFSTATE_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_RFSTATE_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_RFSTATE_VAL_RX = @as(c_uint, 0x00000003);
pub const LRFDRFE_RFSTATE_VAL_TX = @as(c_uint, 0x00000002);
pub const LRFDRFE_RFSTATE_VAL_SYNTH = @as(c_uint, 0x00000001);
pub const LRFDRFE_RFSTATE_VAL_IDLE = @as(c_uint, 0x00000000);
pub const LRFDRFE_API_PROTOCOLID_W = @as(c_uint, 4);
pub const LRFDRFE_API_PROTOCOLID_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_API_PROTOCOLID_S = @as(c_uint, 4);
pub const LRFDRFE_API_PROTOCOLID_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE_API_PROTOCOLID_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_API_RFECMD_W = @as(c_uint, 4);
pub const LRFDRFE_API_RFECMD_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_API_RFECMD_S = @as(c_uint, 0);
pub const LRFDRFE_API_RFECMD_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_API_RFECMD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CMDPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_CMDPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CMDPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_CMDPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CMDPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CMDPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_CMDPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CMDPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_CMDPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CMDPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MSGBOX_VAL_W = @as(c_uint, 8);
pub const LRFDRFE_MSGBOX_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MSGBOX_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MSGBOX_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MSGBOX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MCEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_MCEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MCEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MCEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MCEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MCEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_MCEDATIN0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MCEDATIN0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MCEDATIN0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MCEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MCECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDRFE_MCECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_MCECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MCECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_MCECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MCECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDRFE_MCECMDIN_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_MCECMDIN_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MCECMDIN_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_MCECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PBEDATOUT0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_PBEDATOUT0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PBEDATOUT0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_PBEDATOUT0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PBEDATOUT0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PBEDATIN0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_PBEDATIN0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PBEDATIN0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_PBEDATIN0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PBEDATIN0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PBECMDOUT_VAL_W = @as(c_uint, 4);
pub const LRFDRFE_PBECMDOUT_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_PBECMDOUT_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_PBECMDOUT_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_PBECMDOUT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PBECMDIN_VAL_W = @as(c_uint, 4);
pub const LRFDRFE_PBECMDIN_VAL_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_PBECMDIN_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_PBECMDIN_VAL_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_PBECMDIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_S2RTRG = @as(c_uint, 0x00000080);
pub const LRFDRFE_STRB_S2RTRG_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_STRB_S2RTRG_S = @as(c_uint, 7);
pub const LRFDRFE_STRB_S2RTRG_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_STRB_S2RTRG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_DMATRG = @as(c_uint, 0x00000040);
pub const LRFDRFE_STRB_DMATRG_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_STRB_DMATRG_S = @as(c_uint, 6);
pub const LRFDRFE_STRB_DMATRG_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_STRB_DMATRG_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_SYSTCPT2 = @as(c_uint, 0x00000020);
pub const LRFDRFE_STRB_SYSTCPT2_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_STRB_SYSTCPT2_S = @as(c_uint, 5);
pub const LRFDRFE_STRB_SYSTCPT2_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_STRB_SYSTCPT2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_SYSTCPT1 = @as(c_uint, 0x00000010);
pub const LRFDRFE_STRB_SYSTCPT1_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_STRB_SYSTCPT1_S = @as(c_uint, 4);
pub const LRFDRFE_STRB_SYSTCPT1_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_STRB_SYSTCPT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_SYSTCPT0 = @as(c_uint, 0x00000008);
pub const LRFDRFE_STRB_SYSTCPT0_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_STRB_SYSTCPT0_S = @as(c_uint, 3);
pub const LRFDRFE_STRB_SYSTCPT0_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_STRB_SYSTCPT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_EVT1 = @as(c_uint, 0x00000004);
pub const LRFDRFE_STRB_EVT1_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_STRB_EVT1_S = @as(c_uint, 2);
pub const LRFDRFE_STRB_EVT1_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_STRB_EVT1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_EVT0 = @as(c_uint, 0x00000002);
pub const LRFDRFE_STRB_EVT0_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_STRB_EVT0_S = @as(c_uint, 1);
pub const LRFDRFE_STRB_EVT0_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_STRB_EVT0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_STRB_CMDDONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_STRB_CMDDONE_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_STRB_CMDDONE_S = @as(c_uint, 0);
pub const LRFDRFE_STRB_CMDDONE_YES = @as(c_uint, 0x00000001);
pub const LRFDRFE_STRB_CMDDONE_NO = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNTHRCFG_SEL = @as(c_uint, 0x00000002);
pub const LRFDRFE_MAGNTHRCFG_SEL_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_MAGNTHRCFG_SEL_S = @as(c_uint, 1);
pub const LRFDRFE_MAGNTHRCFG_SEL_MAGNACC1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_MAGNTHRCFG_SEL_MAGNACC0 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNTHRCFG_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_MAGNTHRCFG_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_MAGNTHRCFG_CTL_S = @as(c_uint, 0);
pub const LRFDRFE_MAGNTHRCFG_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_MAGNTHRCFG_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNTHR_VAL_W = @as(c_uint, 8);
pub const LRFDRFE_MAGNTHR_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MAGNTHR_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MAGNTHR_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MAGNTHR_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_RSSIOFFSET_VAL_W = @as(c_uint, 8);
pub const LRFDRFE_RSSIOFFSET_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RSSIOFFSET_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_RSSIOFFSET_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RSSIOFFSET_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_GAINCTL_BDE2DVGA_W = @as(c_uint, 2);
pub const LRFDRFE_GAINCTL_BDE2DVGA_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE_GAINCTL_BDE2DVGA_S = @as(c_uint, 2);
pub const LRFDRFE_GAINCTL_BDE2DVGA_GAIN8 = @as(c_uint, 0x0000000C);
pub const LRFDRFE_GAINCTL_BDE2DVGA_GAIN4 = @as(c_uint, 0x00000008);
pub const LRFDRFE_GAINCTL_BDE2DVGA_GAIN2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_GAINCTL_BDE2DVGA_GAIN1 = @as(c_uint, 0x00000000);
pub const LRFDRFE_GAINCTL_BDE1DVGA_W = @as(c_uint, 2);
pub const LRFDRFE_GAINCTL_BDE1DVGA_M = @as(c_uint, 0x00000003);
pub const LRFDRFE_GAINCTL_BDE1DVGA_S = @as(c_uint, 0);
pub const LRFDRFE_GAINCTL_BDE1DVGA_GAIN8 = @as(c_uint, 0x00000003);
pub const LRFDRFE_GAINCTL_BDE1DVGA_GAIN4 = @as(c_uint, 0x00000002);
pub const LRFDRFE_GAINCTL_BDE1DVGA_GAIN2 = @as(c_uint, 0x00000001);
pub const LRFDRFE_GAINCTL_BDE1DVGA_GAIN1 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNCTL0_PERMODE = @as(c_uint, 0x00001000);
pub const LRFDRFE_MAGNCTL0_PERMODE_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_MAGNCTL0_PERMODE_S = @as(c_uint, 12);
pub const LRFDRFE_MAGNCTL0_PERMODE_PERIODIC = @as(c_uint, 0x00001000);
pub const LRFDRFE_MAGNCTL0_PERMODE_ONESHOT = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNCTL0_SCL_W = @as(c_uint, 4);
pub const LRFDRFE_MAGNCTL0_SCL_M = @as(c_uint, 0x00000F00);
pub const LRFDRFE_MAGNCTL0_SCL_S = @as(c_uint, 8);
pub const LRFDRFE_MAGNCTL0_SCL_DIV256 = @as(c_uint, 0x00000800);
pub const LRFDRFE_MAGNCTL0_SCL_DIV128 = @as(c_uint, 0x00000700);
pub const LRFDRFE_MAGNCTL0_SCL_DIV64 = @as(c_uint, 0x00000600);
pub const LRFDRFE_MAGNCTL0_SCL_DIV32 = @as(c_uint, 0x00000500);
pub const LRFDRFE_MAGNCTL0_SCL_DIV16 = @as(c_uint, 0x00000400);
pub const LRFDRFE_MAGNCTL0_SCL_DIV8 = @as(c_uint, 0x00000300);
pub const LRFDRFE_MAGNCTL0_SCL_DIV4 = @as(c_uint, 0x00000200);
pub const LRFDRFE_MAGNCTL0_SCL_DIV2 = @as(c_uint, 0x00000100);
pub const LRFDRFE_MAGNCTL0_SCL_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNCTL0_PER_W = @as(c_uint, 8);
pub const LRFDRFE_MAGNCTL0_PER_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MAGNCTL0_PER_S = @as(c_uint, 0);
pub const LRFDRFE_MAGNCTL0_PER_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MAGNCTL0_PER_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNCTL1_PERMODE = @as(c_uint, 0x00001000);
pub const LRFDRFE_MAGNCTL1_PERMODE_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_MAGNCTL1_PERMODE_S = @as(c_uint, 12);
pub const LRFDRFE_MAGNCTL1_PERMODE_PERIODIC = @as(c_uint, 0x00001000);
pub const LRFDRFE_MAGNCTL1_PERMODE_ONESHOT = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNCTL1_SCL_W = @as(c_uint, 4);
pub const LRFDRFE_MAGNCTL1_SCL_M = @as(c_uint, 0x00000F00);
pub const LRFDRFE_MAGNCTL1_SCL_S = @as(c_uint, 8);
pub const LRFDRFE_MAGNCTL1_SCL_DIV256 = @as(c_uint, 0x00000800);
pub const LRFDRFE_MAGNCTL1_SCL_DIV128 = @as(c_uint, 0x00000700);
pub const LRFDRFE_MAGNCTL1_SCL_DIV64 = @as(c_uint, 0x00000600);
pub const LRFDRFE_MAGNCTL1_SCL_DIV32 = @as(c_uint, 0x00000500);
pub const LRFDRFE_MAGNCTL1_SCL_DIV16 = @as(c_uint, 0x00000400);
pub const LRFDRFE_MAGNCTL1_SCL_DIV8 = @as(c_uint, 0x00000300);
pub const LRFDRFE_MAGNCTL1_SCL_DIV4 = @as(c_uint, 0x00000200);
pub const LRFDRFE_MAGNCTL1_SCL_DIV2 = @as(c_uint, 0x00000100);
pub const LRFDRFE_MAGNCTL1_SCL_DIV1 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNCTL1_PER_W = @as(c_uint, 8);
pub const LRFDRFE_MAGNCTL1_PER_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MAGNCTL1_PER_S = @as(c_uint, 0);
pub const LRFDRFE_MAGNCTL1_PER_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_MAGNCTL1_PER_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_SPARE0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_SPARE0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_SPARE0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_SPARE1_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_SPARE1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE1_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_SPARE1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_SPARE2_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_SPARE2_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE2_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_SPARE2_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE2_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_SPARE3_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_SPARE3_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE3_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_SPARE3_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE3_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_SPARE4_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_SPARE4_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE4_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_SPARE4_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE4_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_SPARE5_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_SPARE5_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE5_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_SPARE5_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_SPARE5_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_LNA_SPARE_W = @as(c_uint, 8);
pub const LRFDRFE_LNA_SPARE_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_LNA_SPARE_S = @as(c_uint, 8);
pub const LRFDRFE_LNA_SPARE_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_LNA_SPARE_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_LNA_TRIM_W = @as(c_uint, 4);
pub const LRFDRFE_LNA_TRIM_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_LNA_TRIM_S = @as(c_uint, 4);
pub const LRFDRFE_LNA_TRIM_ONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE_LNA_TRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_LNA_BIAS = @as(c_uint, 0x00000008);
pub const LRFDRFE_LNA_BIAS_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_LNA_BIAS_S = @as(c_uint, 3);
pub const LRFDRFE_LNA_BIAS_INT = @as(c_uint, 0x00000008);
pub const LRFDRFE_LNA_BIAS_BGAP = @as(c_uint, 0x00000000);
pub const LRFDRFE_LNA_IB_W = @as(c_uint, 2);
pub const LRFDRFE_LNA_IB_M = @as(c_uint, 0x00000006);
pub const LRFDRFE_LNA_IB_S = @as(c_uint, 1);
pub const LRFDRFE_LNA_IB_MAX = @as(c_uint, 0x00000006);
pub const LRFDRFE_LNA_IB_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_LNA_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_LNA_EN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_LNA_EN_S = @as(c_uint, 0);
pub const LRFDRFE_LNA_EN_ON = @as(c_uint, 0x00000001);
pub const LRFDRFE_LNA_EN_OFF = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFAMPRFLDO_TRIM_W = @as(c_uint, 7);
pub const LRFDRFE_IFAMPRFLDO_TRIM_M = @as(c_uint, 0x0000FE00);
pub const LRFDRFE_IFAMPRFLDO_TRIM_S = @as(c_uint, 9);
pub const LRFDRFE_IFAMPRFLDO_TRIM_BYPASS = @as(c_uint, 0x0000FE00);
pub const LRFDRFE_IFAMPRFLDO_TRIM_MAX = @as(c_uint, 0x0000FC00);
pub const LRFDRFE_IFAMPRFLDO_TRIM_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFAMPRFLDO_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFAMPRFLDO_EN_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFAMPRFLDO_EN_S = @as(c_uint, 8);
pub const LRFDRFE_IFAMPRFLDO_EN_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFAMPRFLDO_EN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFAMPRFLDO_AAFCAP_W = @as(c_uint, 4);
pub const LRFDRFE_IFAMPRFLDO_AAFCAP_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_IFAMPRFLDO_AAFCAP_S = @as(c_uint, 4);
pub const LRFDRFE_IFAMPRFLDO_AAFCAP_MAX = @as(c_uint, 0x000000F0);
pub const LRFDRFE_IFAMPRFLDO_AAFCAP_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFAMPRFLDO_IFAMPIB_W = @as(c_uint, 3);
pub const LRFDRFE_IFAMPRFLDO_IFAMPIB_M = @as(c_uint, 0x0000000E);
pub const LRFDRFE_IFAMPRFLDO_IFAMPIB_S = @as(c_uint, 1);
pub const LRFDRFE_IFAMPRFLDO_IFAMPIB_MAX = @as(c_uint, 0x0000000E);
pub const LRFDRFE_IFAMPRFLDO_IFAMPIB_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFAMPRFLDO_IFAMP = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFAMPRFLDO_IFAMP_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFAMPRFLDO_IFAMP_S = @as(c_uint, 0);
pub const LRFDRFE_IFAMPRFLDO_IFAMP_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFAMPRFLDO_IFAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA0_SPARE15 = @as(c_uint, 0x00008000);
pub const LRFDRFE_PA0_SPARE15_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_PA0_SPARE15_S = @as(c_uint, 15);
pub const LRFDRFE_PA0_SPARE15_ONE = @as(c_uint, 0x00008000);
pub const LRFDRFE_PA0_SPARE15_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA0_MODE = @as(c_uint, 0x00004000);
pub const LRFDRFE_PA0_MODE_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_PA0_MODE_S = @as(c_uint, 14);
pub const LRFDRFE_PA0_MODE_HIGH = @as(c_uint, 0x00004000);
pub const LRFDRFE_PA0_MODE_LOW = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA0_GAIN_W = @as(c_uint, 3);
pub const LRFDRFE_PA0_GAIN_M = @as(c_uint, 0x00003800);
pub const LRFDRFE_PA0_GAIN_S = @as(c_uint, 11);
pub const LRFDRFE_PA0_GAIN_MAX = @as(c_uint, 0x00003800);
pub const LRFDRFE_PA0_GAIN_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA0_IB_W = @as(c_uint, 6);
pub const LRFDRFE_PA0_IB_M = @as(c_uint, 0x000007E0);
pub const LRFDRFE_PA0_IB_S = @as(c_uint, 5);
pub const LRFDRFE_PA0_IB_MAX = @as(c_uint, 0x000007E0);
pub const LRFDRFE_PA0_IB_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA0_TRIM_W = @as(c_uint, 5);
pub const LRFDRFE_PA0_TRIM_M = @as(c_uint, 0x0000001F);
pub const LRFDRFE_PA0_TRIM_S = @as(c_uint, 0);
pub const LRFDRFE_PA0_TRIM_MAX = @as(c_uint, 0x0000001F);
pub const LRFDRFE_PA0_TRIM_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_SPARE_W = @as(c_uint, 9);
pub const LRFDRFE_PA1_SPARE_M = @as(c_uint, 0x0000FF80);
pub const LRFDRFE_PA1_SPARE_S = @as(c_uint, 7);
pub const LRFDRFE_PA1_SPARE_MAX = @as(c_uint, 0x00000180);
pub const LRFDRFE_PA1_SPARE_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_MIXATST = @as(c_uint, 0x00000040);
pub const LRFDRFE_PA1_MIXATST_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_PA1_MIXATST_S = @as(c_uint, 6);
pub const LRFDRFE_PA1_MIXATST_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_PA1_MIXATST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_LDOITST = @as(c_uint, 0x00000020);
pub const LRFDRFE_PA1_LDOITST_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_PA1_LDOITST_S = @as(c_uint, 5);
pub const LRFDRFE_PA1_LDOITST_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_PA1_LDOITST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_LDOATST = @as(c_uint, 0x00000010);
pub const LRFDRFE_PA1_LDOATST_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_PA1_LDOATST_S = @as(c_uint, 4);
pub const LRFDRFE_PA1_LDOATST_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_PA1_LDOATST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_RC_W = @as(c_uint, 2);
pub const LRFDRFE_PA1_RC_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE_PA1_RC_S = @as(c_uint, 2);
pub const LRFDRFE_PA1_RC_MAX = @as(c_uint, 0x0000000C);
pub const LRFDRFE_PA1_RC_MIN = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_RAMP = @as(c_uint, 0x00000002);
pub const LRFDRFE_PA1_RAMP_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_PA1_RAMP_S = @as(c_uint, 1);
pub const LRFDRFE_PA1_RAMP_UP = @as(c_uint, 0x00000002);
pub const LRFDRFE_PA1_RAMP_DOWN = @as(c_uint, 0x00000000);
pub const LRFDRFE_PA1_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_PA1_EN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_PA1_EN_S = @as(c_uint, 0);
pub const LRFDRFE_PA1_EN_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_PA1_EN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ULNA_SPARE_W = @as(c_uint, 16);
pub const LRFDRFE_ULNA_SPARE_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_ULNA_SPARE_S = @as(c_uint, 0);
pub const LRFDRFE_ULNA_SPARE_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_ULNA_SPARE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_EXTCLK = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADC0_EXTCLK_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADC0_EXTCLK_S = @as(c_uint, 15);
pub const LRFDRFE_IFADC0_EXTCLK_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADC0_EXTCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_DITHERTRIM_W = @as(c_uint, 3);
pub const LRFDRFE_IFADC0_DITHERTRIM_M = @as(c_uint, 0x00007000);
pub const LRFDRFE_IFADC0_DITHERTRIM_S = @as(c_uint, 12);
pub const LRFDRFE_IFADC0_DITHERTRIM_ONES = @as(c_uint, 0x00007000);
pub const LRFDRFE_IFADC0_DITHERTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_DITHEREN_W = @as(c_uint, 2);
pub const LRFDRFE_IFADC0_DITHEREN_M = @as(c_uint, 0x00000C00);
pub const LRFDRFE_IFADC0_DITHEREN_S = @as(c_uint, 10);
pub const LRFDRFE_IFADC0_DITHEREN_ENG = @as(c_uint, 0x00000C00);
pub const LRFDRFE_IFADC0_DITHEREN_ENSD = @as(c_uint, 0x00000800);
pub const LRFDRFE_IFADC0_DITHEREN_ENS = @as(c_uint, 0x00000400);
pub const LRFDRFE_IFADC0_DITHEREN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_ADCIEN = @as(c_uint, 0x00000200);
pub const LRFDRFE_IFADC0_ADCIEN_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_IFADC0_ADCIEN_S = @as(c_uint, 9);
pub const LRFDRFE_IFADC0_ADCIEN_EN = @as(c_uint, 0x00000200);
pub const LRFDRFE_IFADC0_ADCIEN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_ADCQEN = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFADC0_ADCQEN_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFADC0_ADCQEN_S = @as(c_uint, 8);
pub const LRFDRFE_IFADC0_ADCQEN_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFADC0_ADCQEN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_INT2ADJ_W = @as(c_uint, 4);
pub const LRFDRFE_IFADC0_INT2ADJ_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_IFADC0_INT2ADJ_S = @as(c_uint, 4);
pub const LRFDRFE_IFADC0_INT2ADJ_ONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE_IFADC0_INT2ADJ_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC0_AAFCAP_W = @as(c_uint, 2);
pub const LRFDRFE_IFADC0_AAFCAP_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE_IFADC0_AAFCAP_S = @as(c_uint, 2);
pub const LRFDRFE_IFADC0_AAFCAP_ENG = @as(c_uint, 0x0000000C);
pub const LRFDRFE_IFADC0_AAFCAP_ENSD = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADC0_AAFCAP_ENS = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADC0_AAFCAP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_NRZ = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADC1_NRZ_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADC1_NRZ_S = @as(c_uint, 15);
pub const LRFDRFE_IFADC1_NRZ_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADC1_NRZ_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_TRIM_W = @as(c_uint, 6);
pub const LRFDRFE_IFADC1_TRIM_M = @as(c_uint, 0x00007E00);
pub const LRFDRFE_IFADC1_TRIM_S = @as(c_uint, 9);
pub const LRFDRFE_IFADC1_TRIM_ONES = @as(c_uint, 0x00007E00);
pub const LRFDRFE_IFADC1_TRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_RSTN = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADC1_RSTN_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADC1_RSTN_S = @as(c_uint, 7);
pub const LRFDRFE_IFADC1_RSTN_DIS = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADC1_RSTN_EN = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_CLKGEN = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADC1_CLKGEN_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADC1_CLKGEN_S = @as(c_uint, 6);
pub const LRFDRFE_IFADC1_CLKGEN_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADC1_CLKGEN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_ADCDIGCLK = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADC1_ADCDIGCLK_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADC1_ADCDIGCLK_S = @as(c_uint, 5);
pub const LRFDRFE_IFADC1_ADCDIGCLK_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADC1_ADCDIGCLK_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_ADCLFSROUT = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADC1_ADCLFSROUT_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADC1_ADCLFSROUT_S = @as(c_uint, 4);
pub const LRFDRFE_IFADC1_ADCLFSROUT_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADC1_ADCLFSROUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_LPFTSTMODE_W = @as(c_uint, 3);
pub const LRFDRFE_IFADC1_LPFTSTMODE_M = @as(c_uint, 0x0000000E);
pub const LRFDRFE_IFADC1_LPFTSTMODE_S = @as(c_uint, 1);
pub const LRFDRFE_IFADC1_LPFTSTMODE_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADC1_LPFTSTMODE_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADC1_INVCLKOUT = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADC1_INVCLKOUT_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADC1_INVCLKOUT_S = @as(c_uint, 0);
pub const LRFDRFE_IFADC1_INVCLKOUT_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADC1_INVCLKOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCLF_FF3_W = @as(c_uint, 4);
pub const LRFDRFE_IFADCLF_FF3_M = @as(c_uint, 0x0000F000);
pub const LRFDRFE_IFADCLF_FF3_S = @as(c_uint, 12);
pub const LRFDRFE_IFADCLF_FF3_ONES = @as(c_uint, 0x0000F000);
pub const LRFDRFE_IFADCLF_FF3_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCLF_FF2_W = @as(c_uint, 4);
pub const LRFDRFE_IFADCLF_FF2_M = @as(c_uint, 0x00000F00);
pub const LRFDRFE_IFADCLF_FF2_S = @as(c_uint, 8);
pub const LRFDRFE_IFADCLF_FF2_ONES = @as(c_uint, 0x00000F00);
pub const LRFDRFE_IFADCLF_FF2_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCLF_FF1_W = @as(c_uint, 4);
pub const LRFDRFE_IFADCLF_FF1_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_IFADCLF_FF1_S = @as(c_uint, 4);
pub const LRFDRFE_IFADCLF_FF1_ONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE_IFADCLF_FF1_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCLF_INT3_W = @as(c_uint, 4);
pub const LRFDRFE_IFADCLF_INT3_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_IFADCLF_INT3_S = @as(c_uint, 0);
pub const LRFDRFE_IFADCLF_INT3_ONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_IFADCLF_INT3_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_CLKDLYTRIM_W = @as(c_uint, 2);
pub const LRFDRFE_IFADCQUANT_CLKDLYTRIM_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE_IFADCQUANT_CLKDLYTRIM_S = @as(c_uint, 14);
pub const LRFDRFE_IFADCQUANT_CLKDLYTRIM_ONES = @as(c_uint, 0x0000C000);
pub const LRFDRFE_IFADCQUANT_CLKDLYTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_DBGCALVALIN_W = @as(c_uint, 5);
pub const LRFDRFE_IFADCQUANT_DBGCALVALIN_M = @as(c_uint, 0x00003E00);
pub const LRFDRFE_IFADCQUANT_DBGCALVALIN_S = @as(c_uint, 9);
pub const LRFDRFE_IFADCQUANT_DBGCALVALIN_ONES = @as(c_uint, 0x00003E00);
pub const LRFDRFE_IFADCQUANT_DBGCALVALIN_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_DBGCALLEG = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFADCQUANT_DBGCALLEG_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFADCQUANT_DBGCALLEG_S = @as(c_uint, 8);
pub const LRFDRFE_IFADCQUANT_DBGCALLEG_NEG = @as(c_uint, 0x00000100);
pub const LRFDRFE_IFADCQUANT_DBGCALLEG_POS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_W = @as(c_uint, 2);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_M = @as(c_uint, 0x000000C0);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_S = @as(c_uint, 6);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_DBGCAL_QMODB = @as(c_uint, 0x000000C0);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_DBGCAL_QMODP = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_DBGCAL_QMODN = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCQUANT_DBGCALMQ_DBGCAL_QMODZ = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_W = @as(c_uint, 2);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_M = @as(c_uint, 0x00000030);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_S = @as(c_uint, 4);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_DBGCAL_IMODB = @as(c_uint, 0x00000030);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_DBGCAL_IMODP = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_DBGCAL_IMODN = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCQUANT_DBGCALMI_DBGCAL_IMODZ = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_AUTOCAL = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCQUANT_AUTOCAL_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCQUANT_AUTOCAL_S = @as(c_uint, 3);
pub const LRFDRFE_IFADCQUANT_AUTOCAL_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCQUANT_AUTOCAL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCQUANT_QUANTTHR_W = @as(c_uint, 3);
pub const LRFDRFE_IFADCQUANT_QUANTTHR_M = @as(c_uint, 0x00000007);
pub const LRFDRFE_IFADCQUANT_QUANTTHR_S = @as(c_uint, 0);
pub const LRFDRFE_IFADCQUANT_QUANTTHR_ONES = @as(c_uint, 0x00000007);
pub const LRFDRFE_IFADCQUANT_QUANTTHR_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_ATESTVSSANA = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADCALDO_ATESTVSSANA_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADCALDO_ATESTVSSANA_S = @as(c_uint, 15);
pub const LRFDRFE_IFADCALDO_ATESTVSSANA_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_IFADCALDO_ATESTVSSANA_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_TRIMOUT_W = @as(c_uint, 6);
pub const LRFDRFE_IFADCALDO_TRIMOUT_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_IFADCALDO_TRIMOUT_S = @as(c_uint, 8);
pub const LRFDRFE_IFADCALDO_TRIMOUT_ONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_IFADCALDO_TRIMOUT_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_DUMMY = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCALDO_DUMMY_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCALDO_DUMMY_S = @as(c_uint, 7);
pub const LRFDRFE_IFADCALDO_DUMMY_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCALDO_DUMMY_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_ATESTOUT = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCALDO_ATESTOUT_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCALDO_ATESTOUT_S = @as(c_uint, 6);
pub const LRFDRFE_IFADCALDO_ATESTOUT_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCALDO_ATESTOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_ATSTLDOFB = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCALDO_ATSTLDOFB_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCALDO_ATSTLDOFB_S = @as(c_uint, 5);
pub const LRFDRFE_IFADCALDO_ATSTLDOFB_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCALDO_ATSTLDOFB_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_ATESTERRAMP = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCALDO_ATESTERRAMP_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCALDO_ATESTERRAMP_S = @as(c_uint, 4);
pub const LRFDRFE_IFADCALDO_ATESTERRAMP_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCALDO_ATESTERRAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_ITEST = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCALDO_ITEST_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCALDO_ITEST_S = @as(c_uint, 3);
pub const LRFDRFE_IFADCALDO_ITEST_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCALDO_ITEST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_BYPASS = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCALDO_BYPASS_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCALDO_BYPASS_S = @as(c_uint, 2);
pub const LRFDRFE_IFADCALDO_BYPASS_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCALDO_BYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_CLAMP = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCALDO_CLAMP_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCALDO_CLAMP_S = @as(c_uint, 1);
pub const LRFDRFE_IFADCALDO_CLAMP_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCALDO_CLAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCALDO_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADCALDO_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADCALDO_CTL_S = @as(c_uint, 0);
pub const LRFDRFE_IFADCALDO_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADCALDO_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_TRIMOUT_W = @as(c_uint, 6);
pub const LRFDRFE_IFADCDLDO_TRIMOUT_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_IFADCDLDO_TRIMOUT_S = @as(c_uint, 8);
pub const LRFDRFE_IFADCDLDO_TRIMOUT_ONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_IFADCDLDO_TRIMOUT_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_DUMMY = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCDLDO_DUMMY_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCDLDO_DUMMY_S = @as(c_uint, 7);
pub const LRFDRFE_IFADCDLDO_DUMMY_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCDLDO_DUMMY_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_ATESTOUT = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCDLDO_ATESTOUT_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCDLDO_ATESTOUT_S = @as(c_uint, 6);
pub const LRFDRFE_IFADCDLDO_ATESTOUT_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCDLDO_ATESTOUT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_ATSTBGP = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCDLDO_ATSTBGP_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCDLDO_ATSTBGP_S = @as(c_uint, 5);
pub const LRFDRFE_IFADCDLDO_ATSTBGP_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCDLDO_ATSTBGP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_ATESTERRAMP = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCDLDO_ATESTERRAMP_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCDLDO_ATESTERRAMP_S = @as(c_uint, 4);
pub const LRFDRFE_IFADCDLDO_ATESTERRAMP_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_IFADCDLDO_ATESTERRAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_ITEST = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCDLDO_ITEST_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCDLDO_ITEST_S = @as(c_uint, 3);
pub const LRFDRFE_IFADCDLDO_ITEST_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_IFADCDLDO_ITEST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_BYPASS = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCDLDO_BYPASS_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCDLDO_BYPASS_S = @as(c_uint, 2);
pub const LRFDRFE_IFADCDLDO_BYPASS_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCDLDO_BYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_CLAMP = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCDLDO_CLAMP_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCDLDO_CLAMP_S = @as(c_uint, 1);
pub const LRFDRFE_IFADCDLDO_CLAMP_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCDLDO_CLAMP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCDLDO_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADCDLDO_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADCDLDO_CTL_S = @as(c_uint, 0);
pub const LRFDRFE_IFADCDLDO_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_IFADCDLDO_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCTST_EXTCURR = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCTST_EXTCURR_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCTST_EXTCURR_S = @as(c_uint, 7);
pub const LRFDRFE_IFADCTST_EXTCURR_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_IFADCTST_EXTCURR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCTST_QCALDBIQ = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCTST_QCALDBIQ_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCTST_QCALDBIQ_S = @as(c_uint, 6);
pub const LRFDRFE_IFADCTST_QCALDBIQ_COMP1 = @as(c_uint, 0x00000040);
pub const LRFDRFE_IFADCTST_QCALDBIQ_COMP0 = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCTST_QCALDBC = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCTST_QCALDBC_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCTST_QCALDBC_S = @as(c_uint, 5);
pub const LRFDRFE_IFADCTST_QCALDBC_COMP1 = @as(c_uint, 0x00000020);
pub const LRFDRFE_IFADCTST_QCALDBC_COMP0 = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCTST_SEL_W = @as(c_uint, 5);
pub const LRFDRFE_IFADCTST_SEL_M = @as(c_uint, 0x0000001F);
pub const LRFDRFE_IFADCTST_SEL_S = @as(c_uint, 0);
pub const LRFDRFE_IFADCTST_SEL_EXTCLKN1 = @as(c_uint, 0x0000001F);
pub const LRFDRFE_IFADCTST_SEL_NONE = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFL_MUXLSB_W = @as(c_uint, 16);
pub const LRFDRFE_ATSTREFL_MUXLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_ATSTREFL_MUXLSB_S = @as(c_uint, 0);
pub const LRFDRFE_ATSTREFL_MUXLSB_IFADC_ATB = @as(c_uint, 0x00008000);
pub const LRFDRFE_ATSTREFL_MUXLSB_LDO_VTEST = @as(c_uint, 0x00004000);
pub const LRFDRFE_ATSTREFL_MUXLSB_LDO_ITEST = @as(c_uint, 0x00002000);
pub const LRFDRFE_ATSTREFL_MUXLSB_PA_PEAK_OUTN = @as(c_uint, 0x00000800);
pub const LRFDRFE_ATSTREFL_MUXLSB_PA_PEAK_OUTP = @as(c_uint, 0x00000400);
pub const LRFDRFE_ATSTREFL_MUXLSB_MIX_OUTQN = @as(c_uint, 0x00000200);
pub const LRFDRFE_ATSTREFL_MUXLSB_MIX_OUTQP = @as(c_uint, 0x00000100);
pub const LRFDRFE_ATSTREFL_MUXLSB_MIX_OUTIN = @as(c_uint, 0x00000080);
pub const LRFDRFE_ATSTREFL_MUXLSB_MIX_OUTIP = @as(c_uint, 0x00000040);
pub const LRFDRFE_ATSTREFL_MUXLSB_FE_OUTIN_2 = @as(c_uint, 0x00000020);
pub const LRFDRFE_ATSTREFL_MUXLSB_FE_OUTIP_2 = @as(c_uint, 0x00000010);
pub const LRFDRFE_ATSTREFL_MUXLSB_FE_OUTQN = @as(c_uint, 0x00000008);
pub const LRFDRFE_ATSTREFL_MUXLSB_FE_OUTQP = @as(c_uint, 0x00000004);
pub const LRFDRFE_ATSTREFL_MUXLSB_FE_OUTIN = @as(c_uint, 0x00000002);
pub const LRFDRFE_ATSTREFL_MUXLSB_FE_OUTIP = @as(c_uint, 0x00000001);
pub const LRFDRFE_ATSTREFL_MUXLSB_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFH_VREFBPDIS = @as(c_uint, 0x00008000);
pub const LRFDRFE_ATSTREFH_VREFBPDIS_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_ATSTREFH_VREFBPDIS_S = @as(c_uint, 15);
pub const LRFDRFE_ATSTREFH_VREFBPDIS_BPDIS = @as(c_uint, 0x00008000);
pub const LRFDRFE_ATSTREFH_VREFBPDIS_BPEN = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFH_IREFTRIM_W = @as(c_uint, 5);
pub const LRFDRFE_ATSTREFH_IREFTRIM_M = @as(c_uint, 0x00007C00);
pub const LRFDRFE_ATSTREFH_IREFTRIM_S = @as(c_uint, 10);
pub const LRFDRFE_ATSTREFH_IREFTRIM_ONES = @as(c_uint, 0x00007C00);
pub const LRFDRFE_ATSTREFH_IREFTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFH_BIAS = @as(c_uint, 0x00000200);
pub const LRFDRFE_ATSTREFH_BIAS_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_ATSTREFH_BIAS_S = @as(c_uint, 9);
pub const LRFDRFE_ATSTREFH_BIAS_EN = @as(c_uint, 0x00000200);
pub const LRFDRFE_ATSTREFH_BIAS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFH_OUTPUT2 = @as(c_uint, 0x00000100);
pub const LRFDRFE_ATSTREFH_OUTPUT2_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_ATSTREFH_OUTPUT2_S = @as(c_uint, 8);
pub const LRFDRFE_ATSTREFH_OUTPUT2_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_ATSTREFH_OUTPUT2_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFH_OUTPUT1 = @as(c_uint, 0x00000080);
pub const LRFDRFE_ATSTREFH_OUTPUT1_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_ATSTREFH_OUTPUT1_S = @as(c_uint, 7);
pub const LRFDRFE_ATSTREFH_OUTPUT1_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_ATSTREFH_OUTPUT1_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_ATSTREFH_MUXMSB_W = @as(c_uint, 7);
pub const LRFDRFE_ATSTREFH_MUXMSB_M = @as(c_uint, 0x0000007F);
pub const LRFDRFE_ATSTREFH_MUXMSB_S = @as(c_uint, 0);
pub const LRFDRFE_ATSTREFH_MUXMSB_DIVBUF_NMOS_BIAS = @as(c_uint, 0x00000010);
pub const LRFDRFE_ATSTREFH_MUXMSB_DIVBUF_PMOS_BIAS = @as(c_uint, 0x00000008);
pub const LRFDRFE_ATSTREFH_MUXMSB_REFSYS_IREF = @as(c_uint, 0x00000004);
pub const LRFDRFE_ATSTREFH_MUXMSB_IFADC_ATB = @as(c_uint, 0x00000001);
pub const LRFDRFE_ATSTREFH_MUXMSB_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCO_MTDCSPARE_W = @as(c_uint, 2);
pub const LRFDRFE_DCO_MTDCSPARE_M = @as(c_uint, 0x00000600);
pub const LRFDRFE_DCO_MTDCSPARE_S = @as(c_uint, 9);
pub const LRFDRFE_DCO_MTDCSPARE_DIS = @as(c_uint, 0x00000200);
pub const LRFDRFE_DCO_MTDCSPARE_EN = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCO_SPARE7_W = @as(c_uint, 2);
pub const LRFDRFE_DCO_SPARE7_M = @as(c_uint, 0x00000180);
pub const LRFDRFE_DCO_SPARE7_S = @as(c_uint, 7);
pub const LRFDRFE_DCO_SPARE7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_DCO_SPARE7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCO_TAILRESTRIM_W = @as(c_uint, 4);
pub const LRFDRFE_DCO_TAILRESTRIM_M = @as(c_uint, 0x00000078);
pub const LRFDRFE_DCO_TAILRESTRIM_S = @as(c_uint, 3);
pub const LRFDRFE_DCO_TAILRESTRIM_ALLONES = @as(c_uint, 0x00000078);
pub const LRFDRFE_DCO_TAILRESTRIM_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCO_RTRIMCAP = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCO_RTRIMCAP_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCO_RTRIMCAP_S = @as(c_uint, 2);
pub const LRFDRFE_DCO_RTRIMCAP_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCO_RTRIMCAP_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCO_CNRCAP = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCO_CNRCAP_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCO_CNRCAP_S = @as(c_uint, 1);
pub const LRFDRFE_DCO_CNRCAP__50MHZ = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCO_CNRCAP_DEFAULT = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCO_CRSCAPCM = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCO_CRSCAPCM_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCO_CRSCAPCM_S = @as(c_uint, 0);
pub const LRFDRFE_DCO_CRSCAPCM_REDUCED = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCO_CRSCAPCM_DEFAULT = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_PDET = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIV_PDET_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIV_PDET_S = @as(c_uint, 15);
pub const LRFDRFE_DIV_PDET_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIV_PDET_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_NMIREFTRIM_W = @as(c_uint, 3);
pub const LRFDRFE_DIV_NMIREFTRIM_M = @as(c_uint, 0x00007000);
pub const LRFDRFE_DIV_NMIREFTRIM_S = @as(c_uint, 12);
pub const LRFDRFE_DIV_NMIREFTRIM_ALLONES = @as(c_uint, 0x00007000);
pub const LRFDRFE_DIV_NMIREFTRIM_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_PMIREFTRIM_W = @as(c_uint, 3);
pub const LRFDRFE_DIV_PMIREFTRIM_M = @as(c_uint, 0x00000E00);
pub const LRFDRFE_DIV_PMIREFTRIM_S = @as(c_uint, 9);
pub const LRFDRFE_DIV_PMIREFTRIM_ALLONES = @as(c_uint, 0x00000E00);
pub const LRFDRFE_DIV_PMIREFTRIM_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_TXBBOOST = @as(c_uint, 0x00000100);
pub const LRFDRFE_DIV_TXBBOOST_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_DIV_TXBBOOST_S = @as(c_uint, 8);
pub const LRFDRFE_DIV_TXBBOOST_INCREASED = @as(c_uint, 0x00000100);
pub const LRFDRFE_DIV_TXBBOOST_DEFAULT = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_S1GFRC = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIV_S1GFRC_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIV_S1GFRC_S = @as(c_uint, 7);
pub const LRFDRFE_DIV_S1GFRC_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIV_S1GFRC_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_BUFGAIN_W = @as(c_uint, 2);
pub const LRFDRFE_DIV_BUFGAIN_M = @as(c_uint, 0x00000060);
pub const LRFDRFE_DIV_BUFGAIN_S = @as(c_uint, 5);
pub const LRFDRFE_DIV_BUFGAIN__60_PST = @as(c_uint, 0x00000060);
pub const LRFDRFE_DIV_BUFGAIN_DONT_USE = @as(c_uint, 0x00000040);
pub const LRFDRFE_DIV_BUFGAIN__80_PST = @as(c_uint, 0x00000020);
pub const LRFDRFE_DIV_BUFGAIN_MAX = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_BIAS = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIV_BIAS_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIV_BIAS_S = @as(c_uint, 4);
pub const LRFDRFE_DIV_BIAS_DEFAULT = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIV_BIAS_ALTERNATIVE = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_OUT = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIV_OUT_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIV_OUT_S = @as(c_uint, 3);
pub const LRFDRFE_DIV_OUT_FE_2G4 = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIV_OUT_FE_S1G = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIV_RATIO_W = @as(c_uint, 3);
pub const LRFDRFE_DIV_RATIO_M = @as(c_uint, 0x00000007);
pub const LRFDRFE_DIV_RATIO_S = @as(c_uint, 0);
pub const LRFDRFE_DIV_RATIO_DIV30 = @as(c_uint, 0x00000007);
pub const LRFDRFE_DIV_RATIO_DIV15 = @as(c_uint, 0x00000006);
pub const LRFDRFE_DIV_RATIO_DIV10 = @as(c_uint, 0x00000005);
pub const LRFDRFE_DIV_RATIO_DIV5 = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIV_RATIO_DIV12 = @as(c_uint, 0x00000003);
pub const LRFDRFE_DIV_RATIO_DIV6 = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIV_RATIO_DIV4 = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIV_RATIO_DIV2 = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_SPARE15 = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIVLDO_SPARE15_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIVLDO_SPARE15_S = @as(c_uint, 15);
pub const LRFDRFE_DIVLDO_SPARE15_ONES = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIVLDO_SPARE15_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_VOUTTRIM_W = @as(c_uint, 7);
pub const LRFDRFE_DIVLDO_VOUTTRIM_M = @as(c_uint, 0x00007F00);
pub const LRFDRFE_DIVLDO_VOUTTRIM_S = @as(c_uint, 8);
pub const LRFDRFE_DIVLDO_VOUTTRIM_ONES = @as(c_uint, 0x00007F00);
pub const LRFDRFE_DIVLDO_VOUTTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_ITST = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIVLDO_ITST_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIVLDO_ITST_S = @as(c_uint, 7);
pub const LRFDRFE_DIVLDO_ITST_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIVLDO_ITST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_TMUX_W = @as(c_uint, 3);
pub const LRFDRFE_DIVLDO_TMUX_M = @as(c_uint, 0x00000070);
pub const LRFDRFE_DIVLDO_TMUX_S = @as(c_uint, 4);
pub const LRFDRFE_DIVLDO_TMUX_VDDR = @as(c_uint, 0x00000040);
pub const LRFDRFE_DIVLDO_TMUX_LDO_OUT = @as(c_uint, 0x00000020);
pub const LRFDRFE_DIVLDO_TMUX_GND = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIVLDO_TMUX_OFF = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_SPARE3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIVLDO_SPARE3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIVLDO_SPARE3_S = @as(c_uint, 3);
pub const LRFDRFE_DIVLDO_SPARE3_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIVLDO_SPARE3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_MODE = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIVLDO_MODE_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIVLDO_MODE_S = @as(c_uint, 2);
pub const LRFDRFE_DIVLDO_MODE_FAST = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIVLDO_MODE_NORM = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_BYPASS = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIVLDO_BYPASS_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIVLDO_BYPASS_S = @as(c_uint, 1);
pub const LRFDRFE_DIVLDO_BYPASS_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIVLDO_BYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVLDO_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVLDO_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVLDO_CTL_S = @as(c_uint, 0);
pub const LRFDRFE_DIVLDO_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVLDO_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_ITESTCTL = @as(c_uint, 0x00008000);
pub const LRFDRFE_TDCLDO_ITESTCTL_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_TDCLDO_ITESTCTL_S = @as(c_uint, 15);
pub const LRFDRFE_TDCLDO_ITESTCTL_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_TDCLDO_ITESTCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_VOUTTRIM_W = @as(c_uint, 7);
pub const LRFDRFE_TDCLDO_VOUTTRIM_M = @as(c_uint, 0x00007F00);
pub const LRFDRFE_TDCLDO_VOUTTRIM_S = @as(c_uint, 8);
pub const LRFDRFE_TDCLDO_VOUTTRIM_ONES = @as(c_uint, 0x00007F00);
pub const LRFDRFE_TDCLDO_VOUTTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_ITESTBUFCTL = @as(c_uint, 0x00000080);
pub const LRFDRFE_TDCLDO_ITESTBUFCTL_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_TDCLDO_ITESTBUFCTL_S = @as(c_uint, 7);
pub const LRFDRFE_TDCLDO_ITESTBUFCTL_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_TDCLDO_ITESTBUFCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_TMUX_W = @as(c_uint, 3);
pub const LRFDRFE_TDCLDO_TMUX_M = @as(c_uint, 0x00000070);
pub const LRFDRFE_TDCLDO_TMUX_S = @as(c_uint, 4);
pub const LRFDRFE_TDCLDO_TMUX_VSSA = @as(c_uint, 0x00000040);
pub const LRFDRFE_TDCLDO_TMUX_LDO_OUT = @as(c_uint, 0x00000020);
pub const LRFDRFE_TDCLDO_TMUX_VDDA = @as(c_uint, 0x00000010);
pub const LRFDRFE_TDCLDO_TMUX_OFF = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_PDSEL = @as(c_uint, 0x00000008);
pub const LRFDRFE_TDCLDO_PDSEL_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_TDCLDO_PDSEL_S = @as(c_uint, 3);
pub const LRFDRFE_TDCLDO_PDSEL_DIODE = @as(c_uint, 0x00000008);
pub const LRFDRFE_TDCLDO_PDSEL_R = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_MODE = @as(c_uint, 0x00000004);
pub const LRFDRFE_TDCLDO_MODE_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_TDCLDO_MODE_S = @as(c_uint, 2);
pub const LRFDRFE_TDCLDO_MODE_FAST = @as(c_uint, 0x00000004);
pub const LRFDRFE_TDCLDO_MODE_NORM = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_BYPASS = @as(c_uint, 0x00000002);
pub const LRFDRFE_TDCLDO_BYPASS_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_TDCLDO_BYPASS_S = @as(c_uint, 1);
pub const LRFDRFE_TDCLDO_BYPASS_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_TDCLDO_BYPASS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCLDO_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_TDCLDO_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_TDCLDO_CTL_S = @as(c_uint, 0);
pub const LRFDRFE_TDCLDO_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_TDCLDO_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_ITST_W = @as(c_uint, 2);
pub const LRFDRFE_DCOLDO0_ITST_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE_DCOLDO0_ITST_S = @as(c_uint, 14);
pub const LRFDRFE_DCOLDO0_ITST_BOTH = @as(c_uint, 0x0000C000);
pub const LRFDRFE_DCOLDO0_ITST_SECOND = @as(c_uint, 0x00008000);
pub const LRFDRFE_DCOLDO0_ITST_FIRST = @as(c_uint, 0x00004000);
pub const LRFDRFE_DCOLDO0_ITST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_SECONDTRIM_W = @as(c_uint, 6);
pub const LRFDRFE_DCOLDO0_SECONDTRIM_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_DCOLDO0_SECONDTRIM_S = @as(c_uint, 8);
pub const LRFDRFE_DCOLDO0_SECONDTRIM_ONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_DCOLDO0_SECONDTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_FIRSTTRIM_W = @as(c_uint, 4);
pub const LRFDRFE_DCOLDO0_FIRSTTRIM_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_DCOLDO0_FIRSTTRIM_S = @as(c_uint, 4);
pub const LRFDRFE_DCOLDO0_FIRSTTRIM_ONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE_DCOLDO0_FIRSTTRIM_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_PDN = @as(c_uint, 0x00000008);
pub const LRFDRFE_DCOLDO0_PDN_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DCOLDO0_PDN_S = @as(c_uint, 3);
pub const LRFDRFE_DCOLDO0_PDN_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_DCOLDO0_PDN_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_BYPFIRST = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCOLDO0_BYPFIRST_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCOLDO0_BYPFIRST_S = @as(c_uint, 2);
pub const LRFDRFE_DCOLDO0_BYPFIRST_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCOLDO0_BYPFIRST_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_BYPBOTH = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCOLDO0_BYPBOTH_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCOLDO0_BYPBOTH_S = @as(c_uint, 1);
pub const LRFDRFE_DCOLDO0_BYPBOTH_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCOLDO0_BYPBOTH_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO0_CTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOLDO0_CTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOLDO0_CTL_S = @as(c_uint, 0);
pub const LRFDRFE_DCOLDO0_CTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOLDO0_CTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO1_REFSRC = @as(c_uint, 0x00000400);
pub const LRFDRFE_DCOLDO1_REFSRC_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_DCOLDO1_REFSRC_S = @as(c_uint, 10);
pub const LRFDRFE_DCOLDO1_REFSRC_BAW = @as(c_uint, 0x00000400);
pub const LRFDRFE_DCOLDO1_REFSRC_XTAL = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO1_DIVATST_W = @as(c_uint, 2);
pub const LRFDRFE_DCOLDO1_DIVATST_M = @as(c_uint, 0x00000300);
pub const LRFDRFE_DCOLDO1_DIVATST_S = @as(c_uint, 8);
pub const LRFDRFE_DCOLDO1_DIVATST_ONES = @as(c_uint, 0x00000300);
pub const LRFDRFE_DCOLDO1_DIVATST_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO1_PERFM = @as(c_uint, 0x00000080);
pub const LRFDRFE_DCOLDO1_PERFM_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DCOLDO1_PERFM_S = @as(c_uint, 7);
pub const LRFDRFE_DCOLDO1_PERFM_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_DCOLDO1_PERFM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO1_CHRGFILT = @as(c_uint, 0x00000040);
pub const LRFDRFE_DCOLDO1_CHRGFILT_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_DCOLDO1_CHRGFILT_S = @as(c_uint, 6);
pub const LRFDRFE_DCOLDO1_CHRGFILT_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_DCOLDO1_CHRGFILT_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOLDO1_ATST_W = @as(c_uint, 6);
pub const LRFDRFE_DCOLDO1_ATST_M = @as(c_uint, 0x0000003F);
pub const LRFDRFE_DCOLDO1_ATST_S = @as(c_uint, 0);
pub const LRFDRFE_DCOLDO1_ATST_VSSANA = @as(c_uint, 0x00000020);
pub const LRFDRFE_DCOLDO1_ATST_FIRST_OUT = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOLDO1_ATST_LDO_OUT = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE0_SPARE14_W = @as(c_uint, 2);
pub const LRFDRFE_PRE0_SPARE14_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE_PRE0_SPARE14_S = @as(c_uint, 14);
pub const LRFDRFE_PRE0_SPARE14_ALLONES = @as(c_uint, 0x0000C000);
pub const LRFDRFE_PRE0_SPARE14_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE0_PLLDIV1_W = @as(c_uint, 6);
pub const LRFDRFE_PRE0_PLLDIV1_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_PRE0_PLLDIV1_S = @as(c_uint, 8);
pub const LRFDRFE_PRE0_PLLDIV1_ALLONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_PRE0_PLLDIV1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE0_SPARE6_W = @as(c_uint, 2);
pub const LRFDRFE_PRE0_SPARE6_M = @as(c_uint, 0x000000C0);
pub const LRFDRFE_PRE0_SPARE6_S = @as(c_uint, 6);
pub const LRFDRFE_PRE0_SPARE6_ALLONES = @as(c_uint, 0x000000C0);
pub const LRFDRFE_PRE0_SPARE6_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE0_PLLDIV0_W = @as(c_uint, 6);
pub const LRFDRFE_PRE0_PLLDIV0_M = @as(c_uint, 0x0000003F);
pub const LRFDRFE_PRE0_PLLDIV0_S = @as(c_uint, 0);
pub const LRFDRFE_PRE0_PLLDIV0_ALLONES = @as(c_uint, 0x0000003F);
pub const LRFDRFE_PRE0_PLLDIV0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE1_IIRBW_W = @as(c_uint, 2);
pub const LRFDRFE_PRE1_IIRBW_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE_PRE1_IIRBW_S = @as(c_uint, 14);
pub const LRFDRFE_PRE1_IIRBW_K16 = @as(c_uint, 0x0000C000);
pub const LRFDRFE_PRE1_IIRBW_K8 = @as(c_uint, 0x00008000);
pub const LRFDRFE_PRE1_IIRBW_K4 = @as(c_uint, 0x00004000);
pub const LRFDRFE_PRE1_IIRBW_K2 = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE1_IIRORD = @as(c_uint, 0x00002000);
pub const LRFDRFE_PRE1_IIRORD_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_PRE1_IIRORD_S = @as(c_uint, 13);
pub const LRFDRFE_PRE1_IIRORD_SECOND = @as(c_uint, 0x00002000);
pub const LRFDRFE_PRE1_IIRORD_FIRST = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE1_IIRDIV_W = @as(c_uint, 5);
pub const LRFDRFE_PRE1_IIRDIV_M = @as(c_uint, 0x00001F00);
pub const LRFDRFE_PRE1_IIRDIV_S = @as(c_uint, 8);
pub const LRFDRFE_PRE1_IIRDIV_ALLONES = @as(c_uint, 0x00001F00);
pub const LRFDRFE_PRE1_IIRDIV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE1_CALHSDDC = @as(c_uint, 0x00000040);
pub const LRFDRFE_PRE1_CALHSDDC_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_PRE1_CALHSDDC_S = @as(c_uint, 6);
pub const LRFDRFE_PRE1_CALHSDDC_GATE = @as(c_uint, 0x00000040);
pub const LRFDRFE_PRE1_CALHSDDC_NOGATE = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE1_HSDDC_W = @as(c_uint, 6);
pub const LRFDRFE_PRE1_HSDDC_M = @as(c_uint, 0x0000003F);
pub const LRFDRFE_PRE1_HSDDC_S = @as(c_uint, 0);
pub const LRFDRFE_PRE1_HSDDC_ALLONES = @as(c_uint, 0x0000003F);
pub const LRFDRFE_PRE1_HSDDC_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE2_MIDCALDIVLSB_W = @as(c_uint, 4);
pub const LRFDRFE_PRE2_MIDCALDIVLSB_M = @as(c_uint, 0x0000F000);
pub const LRFDRFE_PRE2_MIDCALDIVLSB_S = @as(c_uint, 12);
pub const LRFDRFE_PRE2_MIDCALDIVLSB_ALLONES = @as(c_uint, 0x0000F000);
pub const LRFDRFE_PRE2_MIDCALDIVLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE2_CRSCALDIV_W = @as(c_uint, 6);
pub const LRFDRFE_PRE2_CRSCALDIV_M = @as(c_uint, 0x00000FC0);
pub const LRFDRFE_PRE2_CRSCALDIV_S = @as(c_uint, 6);
pub const LRFDRFE_PRE2_CRSCALDIV_ALLONES = @as(c_uint, 0x00000FC0);
pub const LRFDRFE_PRE2_CRSCALDIV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE2_FSMDIV_W = @as(c_uint, 6);
pub const LRFDRFE_PRE2_FSMDIV_M = @as(c_uint, 0x0000003F);
pub const LRFDRFE_PRE2_FSMDIV_S = @as(c_uint, 0);
pub const LRFDRFE_PRE2_FSMDIV_ALLONES = @as(c_uint, 0x0000003F);
pub const LRFDRFE_PRE2_FSMDIV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE3_FINECALDIV_W = @as(c_uint, 11);
pub const LRFDRFE_PRE3_FINECALDIV_M = @as(c_uint, 0x0000FFE0);
pub const LRFDRFE_PRE3_FINECALDIV_S = @as(c_uint, 5);
pub const LRFDRFE_PRE3_FINECALDIV_ALLONES = @as(c_uint, 0x0000FFE0);
pub const LRFDRFE_PRE3_FINECALDIV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRE3_MIDCALDIVMSB_W = @as(c_uint, 5);
pub const LRFDRFE_PRE3_MIDCALDIVMSB_M = @as(c_uint, 0x0000001F);
pub const LRFDRFE_PRE3_MIDCALDIVMSB_S = @as(c_uint, 0);
pub const LRFDRFE_PRE3_MIDCALDIVMSB_ALLONES = @as(c_uint, 0x0000001F);
pub const LRFDRFE_PRE3_MIDCALDIVMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_SPARE15 = @as(c_uint, 0x00008000);
pub const LRFDRFE_CAL0_SPARE15_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_CAL0_SPARE15_S = @as(c_uint, 15);
pub const LRFDRFE_CAL0_SPARE15_ONE = @as(c_uint, 0x00008000);
pub const LRFDRFE_CAL0_SPARE15_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_FCSTART_W = @as(c_uint, 7);
pub const LRFDRFE_CAL0_FCSTART_M = @as(c_uint, 0x00007F00);
pub const LRFDRFE_CAL0_FCSTART_S = @as(c_uint, 8);
pub const LRFDRFE_CAL0_FCSTART_ALLONES = @as(c_uint, 0x00007F00);
pub const LRFDRFE_CAL0_FCSTART_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_CRS = @as(c_uint, 0x00000080);
pub const LRFDRFE_CAL0_CRS_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_CAL0_CRS_S = @as(c_uint, 7);
pub const LRFDRFE_CAL0_CRS_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_CAL0_CRS_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_MID = @as(c_uint, 0x00000040);
pub const LRFDRFE_CAL0_MID_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_CAL0_MID_S = @as(c_uint, 6);
pub const LRFDRFE_CAL0_MID_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_CAL0_MID_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_KTDC = @as(c_uint, 0x00000020);
pub const LRFDRFE_CAL0_KTDC_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_CAL0_KTDC_S = @as(c_uint, 5);
pub const LRFDRFE_CAL0_KTDC_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_CAL0_KTDC_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_KDCO = @as(c_uint, 0x00000010);
pub const LRFDRFE_CAL0_KDCO_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_CAL0_KDCO_S = @as(c_uint, 4);
pub const LRFDRFE_CAL0_KDCO_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_CAL0_KDCO_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_TDCAVG_W = @as(c_uint, 2);
pub const LRFDRFE_CAL0_TDCAVG_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE_CAL0_TDCAVG_S = @as(c_uint, 2);
pub const LRFDRFE_CAL0_TDCAVG_REPEAT_8_TIMES = @as(c_uint, 0x0000000C);
pub const LRFDRFE_CAL0_TDCAVG_REPEAT_4_TIMES = @as(c_uint, 0x00000008);
pub const LRFDRFE_CAL0_TDCAVG_REPEAT_2_TIMES = @as(c_uint, 0x00000004);
pub const LRFDRFE_CAL0_TDCAVG_REPEAT_1_TIME = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL0_TDC_SPARE_W = @as(c_uint, 2);
pub const LRFDRFE_CAL0_TDC_SPARE_M = @as(c_uint, 0x00000003);
pub const LRFDRFE_CAL0_TDC_SPARE_S = @as(c_uint, 0);
pub const LRFDRFE_CAL0_TDC_SPARE_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDRFE_CAL0_TDC_SPARE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL1_SPARE15 = @as(c_uint, 0x00008000);
pub const LRFDRFE_CAL1_SPARE15_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_CAL1_SPARE15_S = @as(c_uint, 15);
pub const LRFDRFE_CAL1_SPARE15_ONE = @as(c_uint, 0x00008000);
pub const LRFDRFE_CAL1_SPARE15_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL1_FCTOP_W = @as(c_uint, 7);
pub const LRFDRFE_CAL1_FCTOP_M = @as(c_uint, 0x00007F00);
pub const LRFDRFE_CAL1_FCTOP_S = @as(c_uint, 8);
pub const LRFDRFE_CAL1_FCTOP_ALLONES = @as(c_uint, 0x00007F00);
pub const LRFDRFE_CAL1_FCTOP_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL1_SPARE7 = @as(c_uint, 0x00000080);
pub const LRFDRFE_CAL1_SPARE7_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_CAL1_SPARE7_S = @as(c_uint, 7);
pub const LRFDRFE_CAL1_SPARE7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_CAL1_SPARE7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL1_FCBOT_W = @as(c_uint, 7);
pub const LRFDRFE_CAL1_FCBOT_M = @as(c_uint, 0x0000007F);
pub const LRFDRFE_CAL1_FCBOT_S = @as(c_uint, 0);
pub const LRFDRFE_CAL1_FCBOT_ALLONES = @as(c_uint, 0x0000007F);
pub const LRFDRFE_CAL1_FCBOT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL2_KTDCINV_W = @as(c_uint, 16);
pub const LRFDRFE_CAL2_KTDCINV_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CAL2_KTDCINV_S = @as(c_uint, 0);
pub const LRFDRFE_CAL2_KTDCINV_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CAL2_KTDCINV_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CAL3_DTXGAIN_W = @as(c_uint, 16);
pub const LRFDRFE_CAL3_DTXGAIN_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CAL3_DTXGAIN_S = @as(c_uint, 0);
pub const LRFDRFE_CAL3_DTXGAIN_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CAL3_DTXGAIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_PHCPT = @as(c_uint, 0x00002000);
pub const LRFDRFE_MISC0_PHCPT_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_MISC0_PHCPT_S = @as(c_uint, 13);
pub const LRFDRFE_MISC0_PHCPT_ASYNC = @as(c_uint, 0x00002000);
pub const LRFDRFE_MISC0_PHCPT_SYNC = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_TDCCALCORR = @as(c_uint, 0x00001000);
pub const LRFDRFE_MISC0_TDCCALCORR_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_MISC0_TDCCALCORR_S = @as(c_uint, 12);
pub const LRFDRFE_MISC0_TDCCALCORR_EN = @as(c_uint, 0x00001000);
pub const LRFDRFE_MISC0_TDCCALCORR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_TDCMSBCORR = @as(c_uint, 0x00000800);
pub const LRFDRFE_MISC0_TDCMSBCORR_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_MISC0_TDCMSBCORR_S = @as(c_uint, 11);
pub const LRFDRFE_MISC0_TDCMSBCORR_EN = @as(c_uint, 0x00000800);
pub const LRFDRFE_MISC0_TDCMSBCORR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_SDMDEM = @as(c_uint, 0x00000400);
pub const LRFDRFE_MISC0_SDMDEM_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_MISC0_SDMDEM_S = @as(c_uint, 10);
pub const LRFDRFE_MISC0_SDMDEM_EN = @as(c_uint, 0x00000400);
pub const LRFDRFE_MISC0_SDMDEM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_DLYSDM_W = @as(c_uint, 2);
pub const LRFDRFE_MISC0_DLYSDM_M = @as(c_uint, 0x00000300);
pub const LRFDRFE_MISC0_DLYSDM_S = @as(c_uint, 8);
pub const LRFDRFE_MISC0_DLYSDM_CKVD16_3_PER = @as(c_uint, 0x00000300);
pub const LRFDRFE_MISC0_DLYSDM_CKVD16_2_PER = @as(c_uint, 0x00000200);
pub const LRFDRFE_MISC0_DLYSDM_CKVD16_1_PER = @as(c_uint, 0x00000100);
pub const LRFDRFE_MISC0_DLYSDM_CKVD16_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_DLYPHVALID = @as(c_uint, 0x00000040);
pub const LRFDRFE_MISC0_DLYPHVALID_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_MISC0_DLYPHVALID_S = @as(c_uint, 6);
pub const LRFDRFE_MISC0_DLYPHVALID_CKVD16_1_PER = @as(c_uint, 0x00000040);
pub const LRFDRFE_MISC0_DLYPHVALID_CKVD16_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_DLYCANCRS_W = @as(c_uint, 2);
pub const LRFDRFE_MISC0_DLYCANCRS_M = @as(c_uint, 0x00000030);
pub const LRFDRFE_MISC0_DLYCANCRS_S = @as(c_uint, 4);
pub const LRFDRFE_MISC0_DLYCANCRS_CKVD64_3_PER = @as(c_uint, 0x00000030);
pub const LRFDRFE_MISC0_DLYCANCRS_CKVD64_2_PER = @as(c_uint, 0x00000020);
pub const LRFDRFE_MISC0_DLYCANCRS_CKVD64_1_PER = @as(c_uint, 0x00000010);
pub const LRFDRFE_MISC0_DLYCANCRS_CKVD64_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_DLYCANFINE_W = @as(c_uint, 2);
pub const LRFDRFE_MISC0_DLYCANFINE_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE_MISC0_DLYCANFINE_S = @as(c_uint, 2);
pub const LRFDRFE_MISC0_DLYCANFINE_CKVD16_4_PER = @as(c_uint, 0x0000000C);
pub const LRFDRFE_MISC0_DLYCANFINE_CKVD16_3_PER = @as(c_uint, 0x00000008);
pub const LRFDRFE_MISC0_DLYCANFINE_CKVD16_2_PER = @as(c_uint, 0x00000004);
pub const LRFDRFE_MISC0_DLYCANFINE_CKVD16_1_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC0_DLYADD_W = @as(c_uint, 2);
pub const LRFDRFE_MISC0_DLYADD_M = @as(c_uint, 0x00000003);
pub const LRFDRFE_MISC0_DLYADD_S = @as(c_uint, 0);
pub const LRFDRFE_MISC0_DLYADD_CKVD64_3_PER = @as(c_uint, 0x00000003);
pub const LRFDRFE_MISC0_DLYADD_CKVD64_2_PER = @as(c_uint, 0x00000002);
pub const LRFDRFE_MISC0_DLYADD_CKVD64_1_PER = @as(c_uint, 0x00000001);
pub const LRFDRFE_MISC0_DLYADD_CKVD64_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_FCDEMCLK = @as(c_uint, 0x00004000);
pub const LRFDRFE_MISC1_FCDEMCLK_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_MISC1_FCDEMCLK_S = @as(c_uint, 14);
pub const LRFDRFE_MISC1_FCDEMCLK_CKVD64 = @as(c_uint, 0x00004000);
pub const LRFDRFE_MISC1_FCDEMCLK_CKCD16 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_FCDEMUPD_W = @as(c_uint, 2);
pub const LRFDRFE_MISC1_FCDEMUPD_M = @as(c_uint, 0x00003000);
pub const LRFDRFE_MISC1_FCDEMUPD_S = @as(c_uint, 12);
pub const LRFDRFE_MISC1_FCDEMUPD_SDM_XOR_PH_ERR = @as(c_uint, 0x00003000);
pub const LRFDRFE_MISC1_FCDEMUPD_SDM = @as(c_uint, 0x00002000);
pub const LRFDRFE_MISC1_FCDEMUPD_PH_ERR = @as(c_uint, 0x00001000);
pub const LRFDRFE_MISC1_FCDEMUPD_DEFAULT = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_TDCINL_W = @as(c_uint, 6);
pub const LRFDRFE_MISC1_TDCINL_M = @as(c_uint, 0x00000FC0);
pub const LRFDRFE_MISC1_TDCINL_S = @as(c_uint, 6);
pub const LRFDRFE_MISC1_TDCINL_ONES = @as(c_uint, 0x00000FC0);
pub const LRFDRFE_MISC1_TDCINL_ZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_TDCINLCTL = @as(c_uint, 0x00000020);
pub const LRFDRFE_MISC1_TDCINLCTL_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_MISC1_TDCINLCTL_S = @as(c_uint, 5);
pub const LRFDRFE_MISC1_TDCINLCTL_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_MISC1_TDCINLCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_PHINIT = @as(c_uint, 0x00000010);
pub const LRFDRFE_MISC1_PHINIT_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_MISC1_PHINIT_S = @as(c_uint, 4);
pub const LRFDRFE_MISC1_PHINIT_UNKNOWN = @as(c_uint, 0x00000010);
pub const LRFDRFE_MISC1_PHINIT_KNOWN = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_SDMOOVRCTL = @as(c_uint, 0x00000008);
pub const LRFDRFE_MISC1_SDMOOVRCTL_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_MISC1_SDMOOVRCTL_S = @as(c_uint, 3);
pub const LRFDRFE_MISC1_SDMOOVRCTL_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_MISC1_SDMOOVRCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MISC1_SDMOOVR_W = @as(c_uint, 3);
pub const LRFDRFE_MISC1_SDMOOVR_M = @as(c_uint, 0x00000007);
pub const LRFDRFE_MISC1_SDMOOVR_S = @as(c_uint, 0);
pub const LRFDRFE_MISC1_SDMOOVR_ALLONES = @as(c_uint, 0x00000007);
pub const LRFDRFE_MISC1_SDMOOVR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_LF0_KIPREC = @as(c_uint, 0x00001000);
pub const LRFDRFE_LF0_KIPREC_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_LF0_KIPREC_S = @as(c_uint, 12);
pub const LRFDRFE_LF0_KIPREC_HIGH = @as(c_uint, 0x00001000);
pub const LRFDRFE_LF0_KIPREC_LOW = @as(c_uint, 0x00000000);
pub const LRFDRFE_LF0_KI_W = @as(c_uint, 12);
pub const LRFDRFE_LF0_KI_M = @as(c_uint, 0x00000FFF);
pub const LRFDRFE_LF0_KI_S = @as(c_uint, 0);
pub const LRFDRFE_LF0_KI_ALLONES = @as(c_uint, 0x00000FFF);
pub const LRFDRFE_LF0_KI_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_LF1_KP_W = @as(c_uint, 14);
pub const LRFDRFE_LF1_KP_M = @as(c_uint, 0x00003FFF);
pub const LRFDRFE_LF1_KP_S = @as(c_uint, 0);
pub const LRFDRFE_LF1_KP_ALLONES = @as(c_uint, 0x00003FFF);
pub const LRFDRFE_LF1_KP_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PHEDISC_CNT_W = @as(c_uint, 4);
pub const LRFDRFE_PHEDISC_CNT_M = @as(c_uint, 0x00003C00);
pub const LRFDRFE_PHEDISC_CNT_S = @as(c_uint, 10);
pub const LRFDRFE_PHEDISC_CNT_ALLONES = @as(c_uint, 0x00003C00);
pub const LRFDRFE_PHEDISC_CNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PHEDISC_THR_W = @as(c_uint, 10);
pub const LRFDRFE_PHEDISC_THR_M = @as(c_uint, 0x000003FF);
pub const LRFDRFE_PHEDISC_THR_S = @as(c_uint, 0);
pub const LRFDRFE_PHEDISC_THR_ALLONES = @as(c_uint, 0x000003FF);
pub const LRFDRFE_PHEDISC_THR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PHINIT_OFF_W = @as(c_uint, 8);
pub const LRFDRFE_PHINIT_OFF_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_PHINIT_OFF_S = @as(c_uint, 0);
pub const LRFDRFE_PHINIT_OFF_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_PHINIT_OFF_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLMON0_PHELOLCNT_W = @as(c_uint, 2);
pub const LRFDRFE_PLLMON0_PHELOLCNT_M = @as(c_uint, 0x0000C000);
pub const LRFDRFE_PLLMON0_PHELOLCNT_S = @as(c_uint, 14);
pub const LRFDRFE_PLLMON0_PHELOLCNT_REFCLK_128_PER = @as(c_uint, 0x0000C000);
pub const LRFDRFE_PLLMON0_PHELOLCNT_REFCLK_64_PER = @as(c_uint, 0x00008000);
pub const LRFDRFE_PLLMON0_PHELOLCNT_REFCLK_32_PER = @as(c_uint, 0x00004000);
pub const LRFDRFE_PLLMON0_PHELOLCNT_REFCLK_16_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLMON0_PHELOLTHR_W = @as(c_uint, 6);
pub const LRFDRFE_PLLMON0_PHELOLTHR_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_PLLMON0_PHELOLTHR_S = @as(c_uint, 8);
pub const LRFDRFE_PLLMON0_PHELOLTHR_ALLONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_PLLMON0_PHELOLTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLMON0_FCTHR_W = @as(c_uint, 7);
pub const LRFDRFE_PLLMON0_FCTHR_M = @as(c_uint, 0x0000007F);
pub const LRFDRFE_PLLMON0_FCTHR_S = @as(c_uint, 0);
pub const LRFDRFE_PLLMON0_FCTHR_ALLONES = @as(c_uint, 0x0000007F);
pub const LRFDRFE_PLLMON0_FCTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLMON1_PHELOCKCNT_W = @as(c_uint, 5);
pub const LRFDRFE_PLLMON1_PHELOCKCNT_M = @as(c_uint, 0x00001F00);
pub const LRFDRFE_PLLMON1_PHELOCKCNT_S = @as(c_uint, 8);
pub const LRFDRFE_PLLMON1_PHELOCKCNT_ALLONES = @as(c_uint, 0x00001F00);
pub const LRFDRFE_PLLMON1_PHELOCKCNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLMON1_PHELOCKTHR_W = @as(c_uint, 8);
pub const LRFDRFE_PLLMON1_PHELOCKTHR_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_PLLMON1_PHELOCKTHR_S = @as(c_uint, 0);
pub const LRFDRFE_PLLMON1_PHELOCKTHR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_PLLMON1_PHELOCKTHR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MOD0_SCHEME_W = @as(c_uint, 2);
pub const LRFDRFE_MOD0_SCHEME_M = @as(c_uint, 0x00001800);
pub const LRFDRFE_MOD0_SCHEME_S = @as(c_uint, 11);
pub const LRFDRFE_MOD0_SCHEME_TWO_POINT_MOD_FRF = @as(c_uint, 0x00001800);
pub const LRFDRFE_MOD0_SCHEME_INLOOP_MOD_FRF = @as(c_uint, 0x00001000);
pub const LRFDRFE_MOD0_SCHEME_INLOOP_MOD_FREF = @as(c_uint, 0x00000800);
pub const LRFDRFE_MOD0_SCHEME_NC = @as(c_uint, 0x00000000);
pub const LRFDRFE_MOD0_SYMSHP_W = @as(c_uint, 3);
pub const LRFDRFE_MOD0_SYMSHP_M = @as(c_uint, 0x00000700);
pub const LRFDRFE_MOD0_SYMSHP_S = @as(c_uint, 8);
pub const LRFDRFE_MOD0_SYMSHP_CHIRP = @as(c_uint, 0x00000400);
pub const LRFDRFE_MOD0_SYMSHP_SHAPEDZIGBEE = @as(c_uint, 0x00000300);
pub const LRFDRFE_MOD0_SYMSHP_PCWSPSK = @as(c_uint, 0x00000200);
pub const LRFDRFE_MOD0_SYMSHP_ZIGBEE = @as(c_uint, 0x00000100);
pub const LRFDRFE_MOD0_SYMSHP_SHAPEDFSK = @as(c_uint, 0x00000000);
pub const LRFDRFE_MOD0_CANPTHGAIN_W = @as(c_uint, 2);
pub const LRFDRFE_MOD0_CANPTHGAIN_M = @as(c_uint, 0x000000C0);
pub const LRFDRFE_MOD0_CANPTHGAIN_S = @as(c_uint, 6);
pub const LRFDRFE_MOD0_CANPTHGAIN_TWO_POW_M_18 = @as(c_uint, 0x000000C0);
pub const LRFDRFE_MOD0_CANPTHGAIN_TWO_POW_M_17 = @as(c_uint, 0x00000080);
pub const LRFDRFE_MOD0_CANPTHGAIN_TWO_POW_M_16 = @as(c_uint, 0x00000040);
pub const LRFDRFE_MOD0_CANPTHGAIN_TWO_POW_M_15 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MOD0_SHPGAIN_W = @as(c_uint, 2);
pub const LRFDRFE_MOD0_SHPGAIN_M = @as(c_uint, 0x00000030);
pub const LRFDRFE_MOD0_SHPGAIN_S = @as(c_uint, 4);
pub const LRFDRFE_MOD0_SHPGAIN_X8 = @as(c_uint, 0x00000030);
pub const LRFDRFE_MOD0_SHPGAIN_X4 = @as(c_uint, 0x00000020);
pub const LRFDRFE_MOD0_SHPGAIN_X2 = @as(c_uint, 0x00000010);
pub const LRFDRFE_MOD0_SHPGAIN_X1 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MOD0_INTPFACT_W = @as(c_uint, 2);
pub const LRFDRFE_MOD0_INTPFACT_M = @as(c_uint, 0x0000000C);
pub const LRFDRFE_MOD0_INTPFACT_S = @as(c_uint, 2);
pub const LRFDRFE_MOD0_INTPFACT_ILLEGAL1 = @as(c_uint, 0x0000000C);
pub const LRFDRFE_MOD0_INTPFACT_INTP_BY_32 = @as(c_uint, 0x00000008);
pub const LRFDRFE_MOD0_INTPFACT_INTP_BY_16 = @as(c_uint, 0x00000004);
pub const LRFDRFE_MOD0_INTPFACT_ILLEGAL0 = @as(c_uint, 0x00000000);
pub const LRFDRFE_MOD1_FOFF_W = @as(c_uint, 12);
pub const LRFDRFE_MOD1_FOFF_M = @as(c_uint, 0x00000FFF);
pub const LRFDRFE_MOD1_FOFF_S = @as(c_uint, 0);
pub const LRFDRFE_MOD1_FOFF_ALLONES = @as(c_uint, 0x00000FFF);
pub const LRFDRFE_MOD1_FOFF_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX0_SHP1_W = @as(c_uint, 8);
pub const LRFDRFE_DTX0_SHP1_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX0_SHP1_S = @as(c_uint, 8);
pub const LRFDRFE_DTX0_SHP1_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX0_SHP1_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX0_SHP0_W = @as(c_uint, 8);
pub const LRFDRFE_DTX0_SHP0_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX0_SHP0_S = @as(c_uint, 0);
pub const LRFDRFE_DTX0_SHP0_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX0_SHP0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX1_SHP3_W = @as(c_uint, 8);
pub const LRFDRFE_DTX1_SHP3_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX1_SHP3_S = @as(c_uint, 8);
pub const LRFDRFE_DTX1_SHP3_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX1_SHP3_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX1_SHP2_W = @as(c_uint, 8);
pub const LRFDRFE_DTX1_SHP2_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX1_SHP2_S = @as(c_uint, 0);
pub const LRFDRFE_DTX1_SHP2_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX1_SHP2_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX2_SHP5_W = @as(c_uint, 8);
pub const LRFDRFE_DTX2_SHP5_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX2_SHP5_S = @as(c_uint, 8);
pub const LRFDRFE_DTX2_SHP5_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX2_SHP5_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX2_SHP4_W = @as(c_uint, 8);
pub const LRFDRFE_DTX2_SHP4_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX2_SHP4_S = @as(c_uint, 0);
pub const LRFDRFE_DTX2_SHP4_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX2_SHP4_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX3_SHP7_W = @as(c_uint, 8);
pub const LRFDRFE_DTX3_SHP7_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX3_SHP7_S = @as(c_uint, 8);
pub const LRFDRFE_DTX3_SHP7_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX3_SHP7_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX3_SHP6_W = @as(c_uint, 8);
pub const LRFDRFE_DTX3_SHP6_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX3_SHP6_S = @as(c_uint, 0);
pub const LRFDRFE_DTX3_SHP6_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX3_SHP6_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX4_SHP9_W = @as(c_uint, 8);
pub const LRFDRFE_DTX4_SHP9_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX4_SHP9_S = @as(c_uint, 8);
pub const LRFDRFE_DTX4_SHP9_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX4_SHP9_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX4_SHP8_W = @as(c_uint, 8);
pub const LRFDRFE_DTX4_SHP8_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX4_SHP8_S = @as(c_uint, 0);
pub const LRFDRFE_DTX4_SHP8_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX4_SHP8_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX5_SHP11_W = @as(c_uint, 8);
pub const LRFDRFE_DTX5_SHP11_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX5_SHP11_S = @as(c_uint, 8);
pub const LRFDRFE_DTX5_SHP11_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX5_SHP11_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX5_SHP10_W = @as(c_uint, 8);
pub const LRFDRFE_DTX5_SHP10_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX5_SHP10_S = @as(c_uint, 0);
pub const LRFDRFE_DTX5_SHP10_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX5_SHP10_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX6_SHP13_W = @as(c_uint, 8);
pub const LRFDRFE_DTX6_SHP13_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX6_SHP13_S = @as(c_uint, 8);
pub const LRFDRFE_DTX6_SHP13_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX6_SHP13_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX6_SHP12_W = @as(c_uint, 8);
pub const LRFDRFE_DTX6_SHP12_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX6_SHP12_S = @as(c_uint, 0);
pub const LRFDRFE_DTX6_SHP12_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX6_SHP12_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX7_SHP15_W = @as(c_uint, 8);
pub const LRFDRFE_DTX7_SHP15_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX7_SHP15_S = @as(c_uint, 8);
pub const LRFDRFE_DTX7_SHP15_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX7_SHP15_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX7_SHP14_W = @as(c_uint, 8);
pub const LRFDRFE_DTX7_SHP14_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX7_SHP14_S = @as(c_uint, 0);
pub const LRFDRFE_DTX7_SHP14_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX7_SHP14_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX8_SHP17_W = @as(c_uint, 8);
pub const LRFDRFE_DTX8_SHP17_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX8_SHP17_S = @as(c_uint, 8);
pub const LRFDRFE_DTX8_SHP17_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX8_SHP17_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX8_SHP16_W = @as(c_uint, 8);
pub const LRFDRFE_DTX8_SHP16_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX8_SHP16_S = @as(c_uint, 0);
pub const LRFDRFE_DTX8_SHP16_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX8_SHP16_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX9_SHP19_W = @as(c_uint, 8);
pub const LRFDRFE_DTX9_SHP19_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX9_SHP19_S = @as(c_uint, 8);
pub const LRFDRFE_DTX9_SHP19_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX9_SHP19_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX9_SHP18_W = @as(c_uint, 8);
pub const LRFDRFE_DTX9_SHP18_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX9_SHP18_S = @as(c_uint, 0);
pub const LRFDRFE_DTX9_SHP18_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX9_SHP18_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX10_SHP21_W = @as(c_uint, 8);
pub const LRFDRFE_DTX10_SHP21_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX10_SHP21_S = @as(c_uint, 8);
pub const LRFDRFE_DTX10_SHP21_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX10_SHP21_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX10_SHP20_W = @as(c_uint, 8);
pub const LRFDRFE_DTX10_SHP20_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX10_SHP20_S = @as(c_uint, 0);
pub const LRFDRFE_DTX10_SHP20_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX10_SHP20_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX11_SHP23_W = @as(c_uint, 8);
pub const LRFDRFE_DTX11_SHP23_M = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX11_SHP23_S = @as(c_uint, 8);
pub const LRFDRFE_DTX11_SHP23_ALLONES = @as(c_uint, 0x0000FF00);
pub const LRFDRFE_DTX11_SHP23_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTX11_SHP22_W = @as(c_uint, 8);
pub const LRFDRFE_DTX11_SHP22_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX11_SHP22_S = @as(c_uint, 0);
pub const LRFDRFE_DTX11_SHP22_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DTX11_SHP22_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLM0L_VALLSB_W = @as(c_uint, 14);
pub const LRFDRFE_PLLM0L_VALLSB_M = @as(c_uint, 0x0000FFFC);
pub const LRFDRFE_PLLM0L_VALLSB_S = @as(c_uint, 2);
pub const LRFDRFE_PLLM0L_VALLSB_ALLONES = @as(c_uint, 0x0000FFFC);
pub const LRFDRFE_PLLM0L_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLM0L_SPARE0_W = @as(c_uint, 2);
pub const LRFDRFE_PLLM0L_SPARE0_M = @as(c_uint, 0x00000003);
pub const LRFDRFE_PLLM0L_SPARE0_S = @as(c_uint, 0);
pub const LRFDRFE_PLLM0L_SPARE0_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDRFE_PLLM0L_SPARE0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLM0H_VALMSB_W = @as(c_uint, 16);
pub const LRFDRFE_PLLM0H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PLLM0H_VALMSB_S = @as(c_uint, 0);
pub const LRFDRFE_PLLM0H_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PLLM0H_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLM1L_VALLSB_W = @as(c_uint, 14);
pub const LRFDRFE_PLLM1L_VALLSB_M = @as(c_uint, 0x0000FFFC);
pub const LRFDRFE_PLLM1L_VALLSB_S = @as(c_uint, 2);
pub const LRFDRFE_PLLM1L_VALLSB_ALLONES = @as(c_uint, 0x0000FFFC);
pub const LRFDRFE_PLLM1L_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLM1L_SPARE0_W = @as(c_uint, 2);
pub const LRFDRFE_PLLM1L_SPARE0_M = @as(c_uint, 0x00000003);
pub const LRFDRFE_PLLM1L_SPARE0_S = @as(c_uint, 0);
pub const LRFDRFE_PLLM1L_SPARE0_ALLONES = @as(c_uint, 0x00000003);
pub const LRFDRFE_PLLM1L_SPARE0_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PLLM1H_VALMSB_W = @as(c_uint, 16);
pub const LRFDRFE_PLLM1H_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PLLM1H_VALMSB_S = @as(c_uint, 0);
pub const LRFDRFE_PLLM1H_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PLLM1H_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CALMCRS_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_CALMCRS_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CALMCRS_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_CALMCRS_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CALMCRS_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CALMMID_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_CALMMID_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CALMMID_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_CALMMID_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_CALMMID_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_REFDIV_LOAD_W = @as(c_uint, 16);
pub const LRFDRFE_REFDIV_LOAD_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_REFDIV_LOAD_S = @as(c_uint, 0);
pub const LRFDRFE_REFDIV_LOAD_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_REFDIV_LOAD_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_TDCSTOP_W = @as(c_uint, 3);
pub const LRFDRFE_DLOCTL0_TDCSTOP_M = @as(c_uint, 0x00000700);
pub const LRFDRFE_DLOCTL0_TDCSTOP_S = @as(c_uint, 8);
pub const LRFDRFE_DLOCTL0_TDCSTOP_OPEN = @as(c_uint, 0x00000100);
pub const LRFDRFE_DLOCTL0_TDCSTOP_CLOSED = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_DTSTXTAL = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOCTL0_DTSTXTAL_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOCTL0_DTSTXTAL_S = @as(c_uint, 7);
pub const LRFDRFE_DLOCTL0_DTSTXTAL_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOCTL0_DTSTXTAL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_LOOPUPD_W = @as(c_uint, 3);
pub const LRFDRFE_DLOCTL0_LOOPUPD_M = @as(c_uint, 0x00000070);
pub const LRFDRFE_DLOCTL0_LOOPUPD_S = @as(c_uint, 4);
pub const LRFDRFE_DLOCTL0_LOOPUPD_ALT = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOCTL0_LOOPUPD_DEF = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_PH3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_DLOCTL0_PH3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DLOCTL0_PH3_S = @as(c_uint, 3);
pub const LRFDRFE_DLOCTL0_PH3_START = @as(c_uint, 0x00000008);
pub const LRFDRFE_DLOCTL0_PH3_HALT = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_PH2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_DLOCTL0_PH2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DLOCTL0_PH2_S = @as(c_uint, 2);
pub const LRFDRFE_DLOCTL0_PH2_START = @as(c_uint, 0x00000004);
pub const LRFDRFE_DLOCTL0_PH2_HALT = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_LOOPMODE = @as(c_uint, 0x00000002);
pub const LRFDRFE_DLOCTL0_LOOPMODE_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DLOCTL0_LOOPMODE_S = @as(c_uint, 1);
pub const LRFDRFE_DLOCTL0_LOOPMODE_OPEN = @as(c_uint, 0x00000002);
pub const LRFDRFE_DLOCTL0_LOOPMODE_CLOSED = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL0_RSTN = @as(c_uint, 0x00000001);
pub const LRFDRFE_DLOCTL0_RSTN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DLOCTL0_RSTN_S = @as(c_uint, 0);
pub const LRFDRFE_DLOCTL0_RSTN_ACTIVE = @as(c_uint, 0x00000001);
pub const LRFDRFE_DLOCTL0_RSTN_RESET = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_DCO = @as(c_uint, 0x00008000);
pub const LRFDRFE_DLOCTL1_DCO_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_DLOCTL1_DCO_S = @as(c_uint, 15);
pub const LRFDRFE_DLOCTL1_DCO_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_DLOCTL1_DCO_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_FCDEM = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOCTL1_FCDEM_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOCTL1_FCDEM_S = @as(c_uint, 7);
pub const LRFDRFE_DLOCTL1_FCDEM_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOCTL1_FCDEM_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_DTSTCKVD = @as(c_uint, 0x00000040);
pub const LRFDRFE_DLOCTL1_DTSTCKVD_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_DLOCTL1_DTSTCKVD_S = @as(c_uint, 6);
pub const LRFDRFE_DLOCTL1_DTSTCKVD_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_DLOCTL1_DTSTCKVD_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_PHEDISC = @as(c_uint, 0x00000020);
pub const LRFDRFE_DLOCTL1_PHEDISC_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_DLOCTL1_PHEDISC_S = @as(c_uint, 5);
pub const LRFDRFE_DLOCTL1_PHEDISC_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_DLOCTL1_PHEDISC_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_PLLMON = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOCTL1_PLLMON_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOCTL1_PLLMON_S = @as(c_uint, 4);
pub const LRFDRFE_DLOCTL1_PLLMON_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOCTL1_PLLMON_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_IIR = @as(c_uint, 0x00000008);
pub const LRFDRFE_DLOCTL1_IIR_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DLOCTL1_IIR_S = @as(c_uint, 3);
pub const LRFDRFE_DLOCTL1_IIR_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_DLOCTL1_IIR_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_MOD = @as(c_uint, 0x00000004);
pub const LRFDRFE_DLOCTL1_MOD_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DLOCTL1_MOD_S = @as(c_uint, 2);
pub const LRFDRFE_DLOCTL1_MOD_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_DLOCTL1_MOD_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_MODINIT = @as(c_uint, 0x00000002);
pub const LRFDRFE_DLOCTL1_MODINIT_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DLOCTL1_MODINIT_S = @as(c_uint, 1);
pub const LRFDRFE_DLOCTL1_MODINIT_ACTIVATE = @as(c_uint, 0x00000002);
pub const LRFDRFE_DLOCTL1_MODINIT_DEACTIVATE = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOCTL1_MTDCRSTN = @as(c_uint, 0x00000001);
pub const LRFDRFE_DLOCTL1_MTDCRSTN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DLOCTL1_MTDCRSTN_S = @as(c_uint, 0);
pub const LRFDRFE_DLOCTL1_MTDCRSTN_ACTIVE = @as(c_uint, 0x00000001);
pub const LRFDRFE_DLOCTL1_MTDCRSTN_RESET = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR0_MIDCODE_W = @as(c_uint, 6);
pub const LRFDRFE_DCOOVR0_MIDCODE_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_DCOOVR0_MIDCODE_S = @as(c_uint, 8);
pub const LRFDRFE_DCOOVR0_MIDCODE_ALLONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_DCOOVR0_MIDCODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR0_CRSCODE_W = @as(c_uint, 4);
pub const LRFDRFE_DCOOVR0_CRSCODE_M = @as(c_uint, 0x000000F0);
pub const LRFDRFE_DCOOVR0_CRSCODE_S = @as(c_uint, 4);
pub const LRFDRFE_DCOOVR0_CRSCODE_ALLONES = @as(c_uint, 0x000000F0);
pub const LRFDRFE_DCOOVR0_CRSCODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR0_FINECTL = @as(c_uint, 0x00000008);
pub const LRFDRFE_DCOOVR0_FINECTL_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DCOOVR0_FINECTL_S = @as(c_uint, 3);
pub const LRFDRFE_DCOOVR0_FINECTL_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_DCOOVR0_FINECTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR0_SDMICTL = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCOOVR0_SDMICTL_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCOOVR0_SDMICTL_S = @as(c_uint, 2);
pub const LRFDRFE_DCOOVR0_SDMICTL_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_DCOOVR0_SDMICTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR0_MIDCTL = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCOOVR0_MIDCTL_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCOOVR0_MIDCTL_S = @as(c_uint, 1);
pub const LRFDRFE_DCOOVR0_MIDCTL_EN = @as(c_uint, 0x00000002);
pub const LRFDRFE_DCOOVR0_MIDCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR0_CRSCTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOOVR0_CRSCTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOOVR0_CRSCTL_S = @as(c_uint, 0);
pub const LRFDRFE_DCOOVR0_CRSCTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_DCOOVR0_CRSCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR1_FINECODE_W = @as(c_uint, 7);
pub const LRFDRFE_DCOOVR1_FINECODE_M = @as(c_uint, 0x00007F00);
pub const LRFDRFE_DCOOVR1_FINECODE_S = @as(c_uint, 8);
pub const LRFDRFE_DCOOVR1_FINECODE_ALLONES = @as(c_uint, 0x00007F00);
pub const LRFDRFE_DCOOVR1_FINECODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DCOOVR1_SDMICODE_W = @as(c_uint, 8);
pub const LRFDRFE_DCOOVR1_SDMICODE_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DCOOVR1_SDMICODE_S = @as(c_uint, 0);
pub const LRFDRFE_DCOOVR1_SDMICODE_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_DCOOVR1_SDMICODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTST_SPARE11_W = @as(c_uint, 4);
pub const LRFDRFE_DTST_SPARE11_M = @as(c_uint, 0x00007800);
pub const LRFDRFE_DTST_SPARE11_S = @as(c_uint, 11);
pub const LRFDRFE_DTST_SPARE11_ALLONES = @as(c_uint, 0x00007800);
pub const LRFDRFE_DTST_SPARE11_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTST_VARTGLDLY_W = @as(c_uint, 3);
pub const LRFDRFE_DTST_VARTGLDLY_M = @as(c_uint, 0x00000700);
pub const LRFDRFE_DTST_VARTGLDLY_S = @as(c_uint, 8);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_7_PER = @as(c_uint, 0x00000700);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_6_PER = @as(c_uint, 0x00000600);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_5_PER = @as(c_uint, 0x00000500);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_4_PER = @as(c_uint, 0x00000400);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_3_PER = @as(c_uint, 0x00000300);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_2_PER = @as(c_uint, 0x00000200);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_1_PER = @as(c_uint, 0x00000100);
pub const LRFDRFE_DTST_VARTGLDLY_CLK_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTST_REFTGLDLY = @as(c_uint, 0x00000080);
pub const LRFDRFE_DTST_REFTGLDLY_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DTST_REFTGLDLY_S = @as(c_uint, 7);
pub const LRFDRFE_DTST_REFTGLDLY_CLK_1_PER = @as(c_uint, 0x00000080);
pub const LRFDRFE_DTST_REFTGLDLY_CLK_0_PER = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTST_TRNSEQ = @as(c_uint, 0x00000040);
pub const LRFDRFE_DTST_TRNSEQ_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_DTST_TRNSEQ_S = @as(c_uint, 6);
pub const LRFDRFE_DTST_TRNSEQ_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_DTST_TRNSEQ_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTST_SPARE5 = @as(c_uint, 0x00000020);
pub const LRFDRFE_DTST_SPARE5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_DTST_SPARE5_S = @as(c_uint, 5);
pub const LRFDRFE_DTST_SPARE5_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_DTST_SPARE5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTST_SIG_W = @as(c_uint, 5);
pub const LRFDRFE_DTST_SIG_M = @as(c_uint, 0x0000001F);
pub const LRFDRFE_DTST_SIG_S = @as(c_uint, 0);
pub const LRFDRFE_DTST_SIG_VAR_NC_15 = @as(c_uint, 0x0000001F);
pub const LRFDRFE_DTST_SIG_VAR_NC_14 = @as(c_uint, 0x0000001E);
pub const LRFDRFE_DTST_SIG_VAR_NC_13 = @as(c_uint, 0x0000001D);
pub const LRFDRFE_DTST_SIG_VAR_NC_12 = @as(c_uint, 0x0000001C);
pub const LRFDRFE_DTST_SIG_VAR_NC_11 = @as(c_uint, 0x0000001B);
pub const LRFDRFE_DTST_SIG_VAR_LOOP_UPD_FINECODE = @as(c_uint, 0x0000001A);
pub const LRFDRFE_DTST_SIG_VAR_LOCK_FINECODE = @as(c_uint, 0x00000019);
pub const LRFDRFE_DTST_SIG_VAR_MPX_CAN = @as(c_uint, 0x00000018);
pub const LRFDRFE_DTST_SIG_VAR_TDCSTOP_STATUS_TDC = @as(c_uint, 0x00000017);
pub const LRFDRFE_DTST_SIG_VAR_TDCSTOP_PHERR = @as(c_uint, 0x00000016);
pub const LRFDRFE_DTST_SIG_VAR_PH_COMP_PHERR_TDCSTOP = @as(c_uint, 0x00000015);
pub const LRFDRFE_DTST_SIG_VAR_PH_TDCCORR = @as(c_uint, 0x00000014);
pub const LRFDRFE_DTST_SIG_VAR_PH_RAW = @as(c_uint, 0x00000013);
pub const LRFDRFE_DTST_SIG_VAR_PHERR_LOWER = @as(c_uint, 0x00000012);
pub const LRFDRFE_DTST_SIG_VAR_PHERR_UPPER = @as(c_uint, 0x00000011);
pub const LRFDRFE_DTST_SIG_VAR_NC_0 = @as(c_uint, 0x00000010);
pub const LRFDRFE_DTST_SIG_REF_NC_15 = @as(c_uint, 0x0000000F);
pub const LRFDRFE_DTST_SIG_REF_NC_14 = @as(c_uint, 0x0000000E);
pub const LRFDRFE_DTST_SIG_REF_NC_13 = @as(c_uint, 0x0000000D);
pub const LRFDRFE_DTST_SIG_REF_NC_12 = @as(c_uint, 0x0000000C);
pub const LRFDRFE_DTST_SIG_REF_NC_11 = @as(c_uint, 0x0000000B);
pub const LRFDRFE_DTST_SIG_REF_NC_10 = @as(c_uint, 0x0000000A);
pub const LRFDRFE_DTST_SIG_REF_NC_9 = @as(c_uint, 0x00000009);
pub const LRFDRFE_DTST_SIG_REF_NC_8 = @as(c_uint, 0x00000008);
pub const LRFDRFE_DTST_SIG_REF_NC_7 = @as(c_uint, 0x00000007);
pub const LRFDRFE_DTST_SIG_REF_NC_6 = @as(c_uint, 0x00000006);
pub const LRFDRFE_DTST_SIG_REF_NC_5 = @as(c_uint, 0x00000005);
pub const LRFDRFE_DTST_SIG_REF_NC_4 = @as(c_uint, 0x00000004);
pub const LRFDRFE_DTST_SIG_REF_NC_3 = @as(c_uint, 0x00000003);
pub const LRFDRFE_DTST_SIG_REF_FERR_MAG = @as(c_uint, 0x00000002);
pub const LRFDRFE_DTST_SIG_REF_FSMCAL = @as(c_uint, 0x00000001);
pub const LRFDRFE_DTST_SIG_REF_NC_0 = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOEV_LOCK = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOEV_LOCK_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOEV_LOCK_S = @as(c_uint, 7);
pub const LRFDRFE_DLOEV_LOCK_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_DLOEV_LOCK_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOEV_LOL = @as(c_uint, 0x00000040);
pub const LRFDRFE_DLOEV_LOL_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_DLOEV_LOL_S = @as(c_uint, 6);
pub const LRFDRFE_DLOEV_LOL_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_DLOEV_LOL_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOEV_FCABVTHR = @as(c_uint, 0x00000020);
pub const LRFDRFE_DLOEV_FCABVTHR_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_DLOEV_FCABVTHR_S = @as(c_uint, 5);
pub const LRFDRFE_DLOEV_FCABVTHR_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_DLOEV_FCABVTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOEV_FCBLWTHR = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOEV_FCBLWTHR_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOEV_FCBLWTHR_S = @as(c_uint, 4);
pub const LRFDRFE_DLOEV_FCBLWTHR_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_DLOEV_FCBLWTHR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DLOEV_STATE_W = @as(c_uint, 4);
pub const LRFDRFE_DLOEV_STATE_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_DLOEV_STATE_S = @as(c_uint, 0);
pub const LRFDRFE_DLOEV_STATE_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_DLOEV_STATE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DTSTRD_DATA_W = @as(c_uint, 16);
pub const LRFDRFE_DTSTRD_DATA_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DTSTRD_DATA_S = @as(c_uint, 0);
pub const LRFDRFE_DTSTRD_DATA_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DTSTRD_DATA_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_FDCOSPANLSB_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_FDCOSPANLSB_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_FDCOSPANLSB_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_FDCOSPANLSB_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_FDCOSPANLSB_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_FDCOSPANMSB_VAL_W = @as(c_uint, 3);
pub const LRFDRFE_FDCOSPANMSB_VAL_M = @as(c_uint, 0x00000007);
pub const LRFDRFE_FDCOSPANMSB_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_FDCOSPANMSB_VAL_ALLONES = @as(c_uint, 0x00000007);
pub const LRFDRFE_FDCOSPANMSB_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TDCCAL_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_TDCCAL_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TDCCAL_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_TDCCAL_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TDCCAL_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CALRES_MIDCODE_W = @as(c_uint, 6);
pub const LRFDRFE_CALRES_MIDCODE_M = @as(c_uint, 0x000003F0);
pub const LRFDRFE_CALRES_MIDCODE_S = @as(c_uint, 4);
pub const LRFDRFE_CALRES_MIDCODE_ALLONES = @as(c_uint, 0x000003F0);
pub const LRFDRFE_CALRES_MIDCODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_CALRES_CRSCODE_W = @as(c_uint, 4);
pub const LRFDRFE_CALRES_CRSCODE_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_CALRES_CRSCODE_S = @as(c_uint, 0);
pub const LRFDRFE_CALRES_CRSCODE_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_CALRES_CRSCODE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI7 = @as(c_uint, 0x00000080);
pub const LRFDRFE_GPI_GPI7_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_GPI_GPI7_S = @as(c_uint, 7);
pub const LRFDRFE_GPI_GPI7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_GPI_GPI7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI6 = @as(c_uint, 0x00000040);
pub const LRFDRFE_GPI_GPI6_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_GPI_GPI6_S = @as(c_uint, 6);
pub const LRFDRFE_GPI_GPI6_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_GPI_GPI6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI5 = @as(c_uint, 0x00000020);
pub const LRFDRFE_GPI_GPI5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_GPI_GPI5_S = @as(c_uint, 5);
pub const LRFDRFE_GPI_GPI5_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_GPI_GPI5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI4 = @as(c_uint, 0x00000010);
pub const LRFDRFE_GPI_GPI4_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_GPI_GPI4_S = @as(c_uint, 4);
pub const LRFDRFE_GPI_GPI4_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_GPI_GPI4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_GPI_GPI3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_GPI_GPI3_S = @as(c_uint, 3);
pub const LRFDRFE_GPI_GPI3_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_GPI_GPI3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_GPI_GPI2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_GPI_GPI2_S = @as(c_uint, 2);
pub const LRFDRFE_GPI_GPI2_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_GPI_GPI2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_GPI_GPI1_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_GPI_GPI1_S = @as(c_uint, 1);
pub const LRFDRFE_GPI_GPI1_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_GPI_GPI1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPI_GPI0 = @as(c_uint, 0x00000001);
pub const LRFDRFE_GPI_GPI0_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_GPI_GPI0_S = @as(c_uint, 0);
pub const LRFDRFE_GPI_GPI0_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_GPI_GPI0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_MATHACCELIN_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_MATHACCELIN_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MATHACCELIN_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MATHACCELIN_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MATHACCELIN_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_LIN2LOGOUT_LOGVAL_W = @as(c_uint, 7);
pub const LRFDRFE_LIN2LOGOUT_LOGVAL_M = @as(c_uint, 0x0000007F);
pub const LRFDRFE_LIN2LOGOUT_LOGVAL_S = @as(c_uint, 0);
pub const LRFDRFE_LIN2LOGOUT_LOGVAL_ALLONES = @as(c_uint, 0x0000007F);
pub const LRFDRFE_LIN2LOGOUT_LOGVAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVBY3OUT_DIV3_W = @as(c_uint, 4);
pub const LRFDRFE_DIVBY3OUT_DIV3_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_DIVBY3OUT_DIV3_S = @as(c_uint, 0);
pub const LRFDRFE_DIVBY3OUT_DIV3_ALLONES = @as(c_uint, 0x0000000F);
pub const LRFDRFE_DIVBY3OUT_DIV3_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_CPTSRC_W = @as(c_uint, 6);
pub const LRFDRFE_TIMCTL_CPTSRC_M = @as(c_uint, 0x00003F00);
pub const LRFDRFE_TIMCTL_CPTSRC_S = @as(c_uint, 8);
pub const LRFDRFE_TIMCTL_CPTSRC_ALLONES = @as(c_uint, 0x00003F00);
pub const LRFDRFE_TIMCTL_CPTSRC_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_CPTCTL = @as(c_uint, 0x00000080);
pub const LRFDRFE_TIMCTL_CPTCTL_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_TIMCTL_CPTCTL_S = @as(c_uint, 7);
pub const LRFDRFE_TIMCTL_CPTCTL_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_TIMCTL_CPTCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_CNTRSRC_W = @as(c_uint, 2);
pub const LRFDRFE_TIMCTL_CNTRSRC_M = @as(c_uint, 0x00000060);
pub const LRFDRFE_TIMCTL_CNTRSRC_S = @as(c_uint, 5);
pub const LRFDRFE_TIMCTL_CNTRSRC_FREF = @as(c_uint, 0x00000060);
pub const LRFDRFE_TIMCTL_CNTRSRC_MAGN1 = @as(c_uint, 0x00000040);
pub const LRFDRFE_TIMCTL_CNTRSRC_MAGN0 = @as(c_uint, 0x00000020);
pub const LRFDRFE_TIMCTL_CNTRSRC_CLK = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_CNTRCLR = @as(c_uint, 0x00000010);
pub const LRFDRFE_TIMCTL_CNTRCLR_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_TIMCTL_CNTRCLR_S = @as(c_uint, 4);
pub const LRFDRFE_TIMCTL_CNTRCLR_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_TIMCTL_CNTRCLR_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_CNTRCTL = @as(c_uint, 0x00000008);
pub const LRFDRFE_TIMCTL_CNTRCTL_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_TIMCTL_CNTRCTL_S = @as(c_uint, 3);
pub const LRFDRFE_TIMCTL_CNTRCTL_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_TIMCTL_CNTRCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_TIMSRC_W = @as(c_uint, 2);
pub const LRFDRFE_TIMCTL_TIMSRC_M = @as(c_uint, 0x00000006);
pub const LRFDRFE_TIMCTL_TIMSRC_S = @as(c_uint, 1);
pub const LRFDRFE_TIMCTL_TIMSRC_FREF = @as(c_uint, 0x00000006);
pub const LRFDRFE_TIMCTL_TIMSRC_MAGN1 = @as(c_uint, 0x00000004);
pub const LRFDRFE_TIMCTL_TIMSRC_MAGN0 = @as(c_uint, 0x00000002);
pub const LRFDRFE_TIMCTL_TIMSRC_CLK = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCTL_TIMCTL = @as(c_uint, 0x00000001);
pub const LRFDRFE_TIMCTL_TIMCTL_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_TIMCTL_TIMCTL_S = @as(c_uint, 0);
pub const LRFDRFE_TIMCTL_TIMCTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_TIMCTL_TIMCTL_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMINC_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_TIMINC_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMINC_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_TIMINC_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMINC_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMPER_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_TIMPER_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMPER_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_TIMPER_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMPER_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCNT_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_TIMCNT_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMCNT_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_TIMCNT_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMCNT_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TIMCAPT_VALUE_W = @as(c_uint, 16);
pub const LRFDRFE_TIMCAPT_VALUE_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMCAPT_VALUE_S = @as(c_uint, 0);
pub const LRFDRFE_TIMCAPT_VALUE_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TIMCAPT_VALUE_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TRCCTRL_SEND = @as(c_uint, 0x00000001);
pub const LRFDRFE_TRCCTRL_SEND_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_TRCCTRL_SEND_S = @as(c_uint, 0);
pub const LRFDRFE_TRCCTRL_SEND_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_TRCCTRL_SEND_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_TRCSTAT_BUSY = @as(c_uint, 0x00000001);
pub const LRFDRFE_TRCSTAT_BUSY_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_TRCSTAT_BUSY_S = @as(c_uint, 0);
pub const LRFDRFE_TRCSTAT_BUSY_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_TRCSTAT_BUSY_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_TRCCMD_PARCNT_W = @as(c_uint, 2);
pub const LRFDRFE_TRCCMD_PARCNT_M = @as(c_uint, 0x00000300);
pub const LRFDRFE_TRCCMD_PARCNT_S = @as(c_uint, 8);
pub const LRFDRFE_TRCCMD_PARCNT_ALLONES = @as(c_uint, 0x00000300);
pub const LRFDRFE_TRCCMD_PARCNT_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TRCCMD_PKTHDR_W = @as(c_uint, 8);
pub const LRFDRFE_TRCCMD_PKTHDR_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_TRCCMD_PKTHDR_S = @as(c_uint, 0);
pub const LRFDRFE_TRCCMD_PKTHDR_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_TRCCMD_PKTHDR_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TRCPAR0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_TRCPAR0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TRCPAR0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_TRCPAR0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TRCPAR0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_TRCPAR1_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_TRCPAR1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TRCPAR1_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_TRCPAR1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_TRCPAR1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL7 = @as(c_uint, 0x00008000);
pub const LRFDRFE_GPOCTL_SEL7_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_GPOCTL_SEL7_S = @as(c_uint, 15);
pub const LRFDRFE_GPOCTL_SEL7_HW = @as(c_uint, 0x00008000);
pub const LRFDRFE_GPOCTL_SEL7_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL6 = @as(c_uint, 0x00004000);
pub const LRFDRFE_GPOCTL_SEL6_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_GPOCTL_SEL6_S = @as(c_uint, 14);
pub const LRFDRFE_GPOCTL_SEL6_HW = @as(c_uint, 0x00004000);
pub const LRFDRFE_GPOCTL_SEL6_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL5 = @as(c_uint, 0x00002000);
pub const LRFDRFE_GPOCTL_SEL5_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_GPOCTL_SEL5_S = @as(c_uint, 13);
pub const LRFDRFE_GPOCTL_SEL5_HW = @as(c_uint, 0x00002000);
pub const LRFDRFE_GPOCTL_SEL5_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL4 = @as(c_uint, 0x00001000);
pub const LRFDRFE_GPOCTL_SEL4_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_GPOCTL_SEL4_S = @as(c_uint, 12);
pub const LRFDRFE_GPOCTL_SEL4_HW = @as(c_uint, 0x00001000);
pub const LRFDRFE_GPOCTL_SEL4_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL3 = @as(c_uint, 0x00000800);
pub const LRFDRFE_GPOCTL_SEL3_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_GPOCTL_SEL3_S = @as(c_uint, 11);
pub const LRFDRFE_GPOCTL_SEL3_HW = @as(c_uint, 0x00000800);
pub const LRFDRFE_GPOCTL_SEL3_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL2 = @as(c_uint, 0x00000400);
pub const LRFDRFE_GPOCTL_SEL2_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_GPOCTL_SEL2_S = @as(c_uint, 10);
pub const LRFDRFE_GPOCTL_SEL2_HW = @as(c_uint, 0x00000400);
pub const LRFDRFE_GPOCTL_SEL2_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL1 = @as(c_uint, 0x00000200);
pub const LRFDRFE_GPOCTL_SEL1_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_GPOCTL_SEL1_S = @as(c_uint, 9);
pub const LRFDRFE_GPOCTL_SEL1_HW = @as(c_uint, 0x00000200);
pub const LRFDRFE_GPOCTL_SEL1_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_SEL0 = @as(c_uint, 0x00000100);
pub const LRFDRFE_GPOCTL_SEL0_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_GPOCTL_SEL0_S = @as(c_uint, 8);
pub const LRFDRFE_GPOCTL_SEL0_HW = @as(c_uint, 0x00000100);
pub const LRFDRFE_GPOCTL_SEL0_SW = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO7 = @as(c_uint, 0x00000080);
pub const LRFDRFE_GPOCTL_GPO7_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_GPOCTL_GPO7_S = @as(c_uint, 7);
pub const LRFDRFE_GPOCTL_GPO7_ONE = @as(c_uint, 0x00000080);
pub const LRFDRFE_GPOCTL_GPO7_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO6 = @as(c_uint, 0x00000040);
pub const LRFDRFE_GPOCTL_GPO6_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_GPOCTL_GPO6_S = @as(c_uint, 6);
pub const LRFDRFE_GPOCTL_GPO6_ONE = @as(c_uint, 0x00000040);
pub const LRFDRFE_GPOCTL_GPO6_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO5 = @as(c_uint, 0x00000020);
pub const LRFDRFE_GPOCTL_GPO5_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_GPOCTL_GPO5_S = @as(c_uint, 5);
pub const LRFDRFE_GPOCTL_GPO5_ONE = @as(c_uint, 0x00000020);
pub const LRFDRFE_GPOCTL_GPO5_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO4 = @as(c_uint, 0x00000010);
pub const LRFDRFE_GPOCTL_GPO4_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_GPOCTL_GPO4_S = @as(c_uint, 4);
pub const LRFDRFE_GPOCTL_GPO4_ONE = @as(c_uint, 0x00000010);
pub const LRFDRFE_GPOCTL_GPO4_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO3 = @as(c_uint, 0x00000008);
pub const LRFDRFE_GPOCTL_GPO3_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_GPOCTL_GPO3_S = @as(c_uint, 3);
pub const LRFDRFE_GPOCTL_GPO3_ONE = @as(c_uint, 0x00000008);
pub const LRFDRFE_GPOCTL_GPO3_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO2 = @as(c_uint, 0x00000004);
pub const LRFDRFE_GPOCTL_GPO2_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_GPOCTL_GPO2_S = @as(c_uint, 2);
pub const LRFDRFE_GPOCTL_GPO2_ONE = @as(c_uint, 0x00000004);
pub const LRFDRFE_GPOCTL_GPO2_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_GPOCTL_GPO1_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_GPOCTL_GPO1_S = @as(c_uint, 1);
pub const LRFDRFE_GPOCTL_GPO1_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_GPOCTL_GPO1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_GPOCTL_GPO0 = @as(c_uint, 0x00000001);
pub const LRFDRFE_GPOCTL_GPO0_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_GPOCTL_GPO0_S = @as(c_uint, 0);
pub const LRFDRFE_GPOCTL_GPO0_ONE = @as(c_uint, 0x00000001);
pub const LRFDRFE_GPOCTL_GPO0_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_ANAISOCTL_ADCDIGRSTN = @as(c_uint, 0x00000010);
pub const LRFDRFE_ANAISOCTL_ADCDIGRSTN_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_ANAISOCTL_ADCDIGRSTN_S = @as(c_uint, 4);
pub const LRFDRFE_ANAISOCTL_ADCDIGRSTN_ACTIVE = @as(c_uint, 0x00000010);
pub const LRFDRFE_ANAISOCTL_ADCDIGRSTN_RESET = @as(c_uint, 0x00000000);
pub const LRFDRFE_ANAISOCTL_IFADC2SVTISO = @as(c_uint, 0x00000008);
pub const LRFDRFE_ANAISOCTL_IFADC2SVTISO_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_ANAISOCTL_IFADC2SVTISO_S = @as(c_uint, 3);
pub const LRFDRFE_ANAISOCTL_IFADC2SVTISO_ISOLATE = @as(c_uint, 0x00000008);
pub const LRFDRFE_ANAISOCTL_IFADC2SVTISO_CONNECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_ANAISOCTL_DIV2IFADCISO = @as(c_uint, 0x00000004);
pub const LRFDRFE_ANAISOCTL_DIV2IFADCISO_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_ANAISOCTL_DIV2IFADCISO_S = @as(c_uint, 2);
pub const LRFDRFE_ANAISOCTL_DIV2IFADCISO_ISOLATE = @as(c_uint, 0x00000004);
pub const LRFDRFE_ANAISOCTL_DIV2IFADCISO_CONNECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_ANAISOCTL_MTDC2SVTISO = @as(c_uint, 0x00000002);
pub const LRFDRFE_ANAISOCTL_MTDC2SVTISO_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_ANAISOCTL_MTDC2SVTISO_S = @as(c_uint, 1);
pub const LRFDRFE_ANAISOCTL_MTDC2SVTISO_ISOLATE = @as(c_uint, 0x00000002);
pub const LRFDRFE_ANAISOCTL_MTDC2SVTISO_CONNECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_ANAISOCTL_DIV2MTDCISO = @as(c_uint, 0x00000001);
pub const LRFDRFE_ANAISOCTL_DIV2MTDCISO_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_ANAISOCTL_DIV2MTDCISO_S = @as(c_uint, 0);
pub const LRFDRFE_ANAISOCTL_DIV2MTDCISO_ISOLATE = @as(c_uint, 0x00000001);
pub const LRFDRFE_ANAISOCTL_DIV2MTDCISO_CONNECT = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_DIV2PH180 = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIVCTL_DIV2PH180_M = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIVCTL_DIV2PH180_S = @as(c_uint, 15);
pub const LRFDRFE_DIVCTL_DIV2PH180_EN = @as(c_uint, 0x00008000);
pub const LRFDRFE_DIVCTL_DIV2PH180_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_DIV2PH0 = @as(c_uint, 0x00004000);
pub const LRFDRFE_DIVCTL_DIV2PH0_M = @as(c_uint, 0x00004000);
pub const LRFDRFE_DIVCTL_DIV2PH0_S = @as(c_uint, 14);
pub const LRFDRFE_DIVCTL_DIV2PH0_EN = @as(c_uint, 0x00004000);
pub const LRFDRFE_DIVCTL_DIV2PH0_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_DIV2PH270 = @as(c_uint, 0x00002000);
pub const LRFDRFE_DIVCTL_DIV2PH270_M = @as(c_uint, 0x00002000);
pub const LRFDRFE_DIVCTL_DIV2PH270_S = @as(c_uint, 13);
pub const LRFDRFE_DIVCTL_DIV2PH270_EN = @as(c_uint, 0x00002000);
pub const LRFDRFE_DIVCTL_DIV2PH270_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_DIV2PH90 = @as(c_uint, 0x00001000);
pub const LRFDRFE_DIVCTL_DIV2PH90_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_DIVCTL_DIV2PH90_S = @as(c_uint, 12);
pub const LRFDRFE_DIVCTL_DIV2PH90_EN = @as(c_uint, 0x00001000);
pub const LRFDRFE_DIVCTL_DIV2PH90_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_SPARE11 = @as(c_uint, 0x00000800);
pub const LRFDRFE_DIVCTL_SPARE11_M = @as(c_uint, 0x00000800);
pub const LRFDRFE_DIVCTL_SPARE11_S = @as(c_uint, 11);
pub const LRFDRFE_DIVCTL_SPARE11_ONE = @as(c_uint, 0x00000800);
pub const LRFDRFE_DIVCTL_SPARE11_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_S1G20DBMMUX = @as(c_uint, 0x00000400);
pub const LRFDRFE_DIVCTL_S1G20DBMMUX_M = @as(c_uint, 0x00000400);
pub const LRFDRFE_DIVCTL_S1G20DBMMUX_S = @as(c_uint, 10);
pub const LRFDRFE_DIVCTL_S1G20DBMMUX_DISABLE = @as(c_uint, 0x00000400);
pub const LRFDRFE_DIVCTL_S1G20DBMMUX_ENABLEN = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_ADCDIV = @as(c_uint, 0x00000200);
pub const LRFDRFE_DIVCTL_ADCDIV_M = @as(c_uint, 0x00000200);
pub const LRFDRFE_DIVCTL_ADCDIV_S = @as(c_uint, 9);
pub const LRFDRFE_DIVCTL_ADCDIV_EN = @as(c_uint, 0x00000200);
pub const LRFDRFE_DIVCTL_ADCDIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_ENSYNTH = @as(c_uint, 0x00000100);
pub const LRFDRFE_DIVCTL_ENSYNTH_M = @as(c_uint, 0x00000100);
pub const LRFDRFE_DIVCTL_ENSYNTH_S = @as(c_uint, 8);
pub const LRFDRFE_DIVCTL_ENSYNTH_EN = @as(c_uint, 0x00000100);
pub const LRFDRFE_DIVCTL_ENSYNTH_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_TXPH18020DBMDIV = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIVCTL_TXPH18020DBMDIV_M = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIVCTL_TXPH18020DBMDIV_S = @as(c_uint, 7);
pub const LRFDRFE_DIVCTL_TXPH18020DBMDIV_EN = @as(c_uint, 0x00000080);
pub const LRFDRFE_DIVCTL_TXPH18020DBMDIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_TXPH020DBMDIV = @as(c_uint, 0x00000040);
pub const LRFDRFE_DIVCTL_TXPH020DBMDIV_M = @as(c_uint, 0x00000040);
pub const LRFDRFE_DIVCTL_TXPH020DBMDIV_S = @as(c_uint, 6);
pub const LRFDRFE_DIVCTL_TXPH020DBMDIV_EN = @as(c_uint, 0x00000040);
pub const LRFDRFE_DIVCTL_TXPH020DBMDIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_TXPH180DIV = @as(c_uint, 0x00000020);
pub const LRFDRFE_DIVCTL_TXPH180DIV_M = @as(c_uint, 0x00000020);
pub const LRFDRFE_DIVCTL_TXPH180DIV_S = @as(c_uint, 5);
pub const LRFDRFE_DIVCTL_TXPH180DIV_EN = @as(c_uint, 0x00000020);
pub const LRFDRFE_DIVCTL_TXPH180DIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_TXPH0DIV = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIVCTL_TXPH0DIV_M = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIVCTL_TXPH0DIV_S = @as(c_uint, 4);
pub const LRFDRFE_DIVCTL_TXPH0DIV_EN = @as(c_uint, 0x00000010);
pub const LRFDRFE_DIVCTL_TXPH0DIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_RXPH90DIV = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIVCTL_RXPH90DIV_M = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIVCTL_RXPH90DIV_S = @as(c_uint, 3);
pub const LRFDRFE_DIVCTL_RXPH90DIV_EN = @as(c_uint, 0x00000008);
pub const LRFDRFE_DIVCTL_RXPH90DIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_RXPH0DIV = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIVCTL_RXPH0DIV_M = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIVCTL_RXPH0DIV_S = @as(c_uint, 2);
pub const LRFDRFE_DIVCTL_RXPH0DIV_EN = @as(c_uint, 0x00000004);
pub const LRFDRFE_DIVCTL_RXPH0DIV_DIS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_SPARE1 = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIVCTL_SPARE1_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIVCTL_SPARE1_S = @as(c_uint, 1);
pub const LRFDRFE_DIVCTL_SPARE1_ONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_DIVCTL_SPARE1_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVCTL_EN = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVCTL_EN_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVCTL_EN_S = @as(c_uint, 0);
pub const LRFDRFE_DIVCTL_EN_ON = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVCTL_EN_OFF = @as(c_uint, 0x00000000);
pub const LRFDRFE_RXCTRL_SPARE = @as(c_uint, 0x00001000);
pub const LRFDRFE_RXCTRL_SPARE_M = @as(c_uint, 0x00001000);
pub const LRFDRFE_RXCTRL_SPARE_S = @as(c_uint, 12);
pub const LRFDRFE_RXCTRL_SPARE_ONE = @as(c_uint, 0x00001000);
pub const LRFDRFE_RXCTRL_SPARE_ZERO = @as(c_uint, 0x00000000);
pub const LRFDRFE_RXCTRL_ATTN_W = @as(c_uint, 3);
pub const LRFDRFE_RXCTRL_ATTN_M = @as(c_uint, 0x00000E00);
pub const LRFDRFE_RXCTRL_ATTN_S = @as(c_uint, 9);
pub const LRFDRFE_RXCTRL_ATTN__21DB = @as(c_uint, 0x00000E00);
pub const LRFDRFE_RXCTRL_ATTN__18DB = @as(c_uint, 0x00000C00);
pub const LRFDRFE_RXCTRL_ATTN__15DB = @as(c_uint, 0x00000A00);
pub const LRFDRFE_RXCTRL_ATTN__12DB = @as(c_uint, 0x00000800);
pub const LRFDRFE_RXCTRL_ATTN__9DB = @as(c_uint, 0x00000600);
pub const LRFDRFE_RXCTRL_ATTN__6DB = @as(c_uint, 0x00000400);
pub const LRFDRFE_RXCTRL_ATTN__3DB = @as(c_uint, 0x00000200);
pub const LRFDRFE_RXCTRL_ATTN_NOATT = @as(c_uint, 0x00000000);
pub const LRFDRFE_RXCTRL_IFAMPGC_W = @as(c_uint, 5);
pub const LRFDRFE_RXCTRL_IFAMPGC_M = @as(c_uint, 0x000001F0);
pub const LRFDRFE_RXCTRL_IFAMPGC_S = @as(c_uint, 4);
pub const LRFDRFE_RXCTRL_IFAMPGC_MAX = @as(c_uint, 0x000001F0);
pub const LRFDRFE_RXCTRL_IFAMPGC_MIN3DB = @as(c_uint, 0x000000F0);
pub const LRFDRFE_RXCTRL_IFAMPGC_MIN6DB = @as(c_uint, 0x00000070);
pub const LRFDRFE_RXCTRL_IFAMPGC_MIN9DB = @as(c_uint, 0x00000030);
pub const LRFDRFE_RXCTRL_IFAMPGC_MIN12DB = @as(c_uint, 0x00000010);
pub const LRFDRFE_RXCTRL_IFAMPGC_MIN15DB = @as(c_uint, 0x00000000);
pub const LRFDRFE_RXCTRL_LNAGAIN_W = @as(c_uint, 4);
pub const LRFDRFE_RXCTRL_LNAGAIN_M = @as(c_uint, 0x0000000F);
pub const LRFDRFE_RXCTRL_LNAGAIN_S = @as(c_uint, 0);
pub const LRFDRFE_RXCTRL_LNAGAIN_MAX = @as(c_uint, 0x0000000F);
pub const LRFDRFE_RXCTRL_LNAGAIN_MIN3DB = @as(c_uint, 0x00000007);
pub const LRFDRFE_RXCTRL_LNAGAIN_MIN6DB = @as(c_uint, 0x00000003);
pub const LRFDRFE_RXCTRL_LNAGAIN_MIN9DB = @as(c_uint, 0x00000001);
pub const LRFDRFE_RXCTRL_LNAGAIN_MIN12DB = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNACC0_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_MAGNACC0_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MAGNACC0_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MAGNACC0_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MAGNACC0_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MAGNACC1_VAL_W = @as(c_uint, 16);
pub const LRFDRFE_MAGNACC1_VAL_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MAGNACC1_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_MAGNACC1_VAL_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_MAGNACC1_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_RSSI_VAL_W = @as(c_uint, 8);
pub const LRFDRFE_RSSI_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RSSI_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_RSSI_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RSSI_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_RSSIMAX_VAL_W = @as(c_uint, 8);
pub const LRFDRFE_RSSIMAX_VAL_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RSSIMAX_VAL_S = @as(c_uint, 0);
pub const LRFDRFE_RSSIMAX_VAL_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RSSIMAX_VAL_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_RFGAIN_DBGAIN_W = @as(c_uint, 8);
pub const LRFDRFE_RFGAIN_DBGAIN_M = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RFGAIN_DBGAIN_S = @as(c_uint, 0);
pub const LRFDRFE_RFGAIN_DBGAIN_ALLONES = @as(c_uint, 0x000000FF);
pub const LRFDRFE_RFGAIN_DBGAIN_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCSTAT_QUANTCALVAL_W = @as(c_uint, 5);
pub const LRFDRFE_IFADCSTAT_QUANTCALVAL_M = @as(c_uint, 0x0000007C);
pub const LRFDRFE_IFADCSTAT_QUANTCALVAL_S = @as(c_uint, 2);
pub const LRFDRFE_IFADCSTAT_QUANTCALVAL_COMP1 = @as(c_uint, 0x00000004);
pub const LRFDRFE_IFADCSTAT_QUANTCALVAL_COMP0 = @as(c_uint, 0x00000000);
pub const LRFDRFE_IFADCSTAT_QUANTCALDONE = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCSTAT_QUANTCALDONE_M = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCSTAT_QUANTCALDONE_S = @as(c_uint, 1);
pub const LRFDRFE_IFADCSTAT_QUANTCALDONE_READY = @as(c_uint, 0x00000002);
pub const LRFDRFE_IFADCSTAT_QUANTCALDONE_NOT_READY = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVSTA_STAT = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVSTA_STAT_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVSTA_STAT_S = @as(c_uint, 0);
pub const LRFDRFE_DIVSTA_STAT_BUSY = @as(c_uint, 0x00000001);
pub const LRFDRFE_DIVSTA_STAT_IDLE = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVIDENDL_VALLSB_W = @as(c_uint, 16);
pub const LRFDRFE_DIVIDENDL_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVIDENDL_VALLSB_S = @as(c_uint, 0);
pub const LRFDRFE_DIVIDENDL_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVIDENDL_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVIDENDH_VALMSB_W = @as(c_uint, 16);
pub const LRFDRFE_DIVIDENDH_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVIDENDH_VALMSB_S = @as(c_uint, 0);
pub const LRFDRFE_DIVIDENDH_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVIDENDH_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVISORL_VALLSB_W = @as(c_uint, 16);
pub const LRFDRFE_DIVISORL_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVISORL_VALLSB_S = @as(c_uint, 0);
pub const LRFDRFE_DIVISORL_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVISORL_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_DIVISORH_VALMSB_W = @as(c_uint, 16);
pub const LRFDRFE_DIVISORH_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVISORH_VALMSB_S = @as(c_uint, 0);
pub const LRFDRFE_DIVISORH_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_DIVISORH_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_QUOTIENTL_VALLSB_W = @as(c_uint, 16);
pub const LRFDRFE_QUOTIENTL_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_QUOTIENTL_VALLSB_S = @as(c_uint, 0);
pub const LRFDRFE_QUOTIENTL_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_QUOTIENTL_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_QUOTIENTH_VALMSB_W = @as(c_uint, 16);
pub const LRFDRFE_QUOTIENTH_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_QUOTIENTH_VALMSB_S = @as(c_uint, 0);
pub const LRFDRFE_QUOTIENTH_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_QUOTIENTH_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRODUCTL_VALLSB_W = @as(c_uint, 16);
pub const LRFDRFE_PRODUCTL_VALLSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PRODUCTL_VALLSB_S = @as(c_uint, 0);
pub const LRFDRFE_PRODUCTL_VALLSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PRODUCTL_VALLSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_PRODUCTH_VALMSB_W = @as(c_uint, 16);
pub const LRFDRFE_PRODUCTH_VALMSB_M = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PRODUCTH_VALMSB_S = @as(c_uint, 0);
pub const LRFDRFE_PRODUCTH_VALMSB_ALLONES = @as(c_uint, 0x0000FFFF);
pub const LRFDRFE_PRODUCTH_VALMSB_ALLZEROS = @as(c_uint, 0x00000000);
pub const LRFDRFE_MULTSTA_STAT = @as(c_uint, 0x00000001);
pub const LRFDRFE_MULTSTA_STAT_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_MULTSTA_STAT_S = @as(c_uint, 0);
pub const LRFDRFE_MULTSTA_STAT_BUSY = @as(c_uint, 0x00000001);
pub const LRFDRFE_MULTSTA_STAT_IDLE = @as(c_uint, 0x00000000);
pub const LRFDRFE_MULTCFG_MODE = @as(c_uint, 0x00000001);
pub const LRFDRFE_MULTCFG_MODE_M = @as(c_uint, 0x00000001);
pub const LRFDRFE_MULTCFG_MODE_S = @as(c_uint, 0);
pub const LRFDRFE_MULTCFG_MODE_SIGNED = @as(c_uint, 0x00000001);
pub const LRFDRFE_MULTCFG_MODE_UNSIGNED = @as(c_uint, 0x00000000);
pub const __HW_RTC_H__ = "";
pub const RTC_O_DESC = @as(c_uint, 0x00000000);
pub const RTC_O_CTL = @as(c_uint, 0x00000004);
pub const RTC_O_ARMSET = @as(c_uint, 0x00000008);
pub const RTC_O_ARMCLR = @as(c_uint, 0x0000000C);
pub const RTC_O_TIME8U = @as(c_uint, 0x00000018);
pub const RTC_O_TIME524M = @as(c_uint, 0x0000001C);
pub const RTC_O_CH0CC8U = @as(c_uint, 0x00000028);
pub const RTC_O_CH1CC8U = @as(c_uint, 0x00000038);
pub const RTC_O_CH1CFG = @as(c_uint, 0x0000003C);
pub const RTC_O_IMASK = @as(c_uint, 0x00000044);
pub const RTC_O_RIS = @as(c_uint, 0x00000048);
pub const RTC_O_MIS = @as(c_uint, 0x0000004C);
pub const RTC_O_ISET = @as(c_uint, 0x00000050);
pub const RTC_O_ICLR = @as(c_uint, 0x00000054);
pub const RTC_O_IMSET = @as(c_uint, 0x00000058);
pub const RTC_O_IMCLR = @as(c_uint, 0x0000005C);
pub const RTC_O_EMU = @as(c_uint, 0x00000060);
pub const RTC_O_DTB = @as(c_uint, 0x00000064);
pub const RTC_DESC_MODID_W = @as(c_uint, 16);
pub const RTC_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const RTC_DESC_MODID_S = @as(c_uint, 16);
pub const RTC_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const RTC_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const RTC_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const RTC_DESC_INSTIDX_W = @as(c_uint, 4);
pub const RTC_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const RTC_DESC_INSTIDX_S = @as(c_uint, 8);
pub const RTC_DESC_MAJREV_W = @as(c_uint, 4);
pub const RTC_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const RTC_DESC_MAJREV_S = @as(c_uint, 4);
pub const RTC_DESC_MINREV_W = @as(c_uint, 4);
pub const RTC_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const RTC_DESC_MINREV_S = @as(c_uint, 0);
pub const RTC_CTL_RST = @as(c_uint, 0x00000001);
pub const RTC_CTL_RST_M = @as(c_uint, 0x00000001);
pub const RTC_CTL_RST_S = @as(c_uint, 0);
pub const RTC_CTL_RST_CLR = @as(c_uint, 0x00000001);
pub const RTC_CTL_RST_NOEFF = @as(c_uint, 0x00000000);
pub const RTC_ARMSET_CH1 = @as(c_uint, 0x00000002);
pub const RTC_ARMSET_CH1_M = @as(c_uint, 0x00000002);
pub const RTC_ARMSET_CH1_S = @as(c_uint, 1);
pub const RTC_ARMSET_CH1_SET = @as(c_uint, 0x00000002);
pub const RTC_ARMSET_CH1_NOEFF = @as(c_uint, 0x00000000);
pub const RTC_ARMSET_CH0 = @as(c_uint, 0x00000001);
pub const RTC_ARMSET_CH0_M = @as(c_uint, 0x00000001);
pub const RTC_ARMSET_CH0_S = @as(c_uint, 0);
pub const RTC_ARMSET_CH0_SET = @as(c_uint, 0x00000001);
pub const RTC_ARMSET_CH0_NOEFF = @as(c_uint, 0x00000000);
pub const RTC_ARMCLR_CH1 = @as(c_uint, 0x00000002);
pub const RTC_ARMCLR_CH1_M = @as(c_uint, 0x00000002);
pub const RTC_ARMCLR_CH1_S = @as(c_uint, 1);
pub const RTC_ARMCLR_CH1_CLR = @as(c_uint, 0x00000002);
pub const RTC_ARMCLR_CH1_NOEFF = @as(c_uint, 0x00000000);
pub const RTC_ARMCLR_CH0 = @as(c_uint, 0x00000001);
pub const RTC_ARMCLR_CH0_M = @as(c_uint, 0x00000001);
pub const RTC_ARMCLR_CH0_S = @as(c_uint, 0);
pub const RTC_ARMCLR_CH0_CLR = @as(c_uint, 0x00000001);
pub const RTC_ARMCLR_CH0_NOEFF = @as(c_uint, 0x00000000);
pub const RTC_TIME8U_VAL_W = @as(c_uint, 32);
pub const RTC_TIME8U_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const RTC_TIME8U_VAL_S = @as(c_uint, 0);
pub const RTC_TIME524M_VAL_W = @as(c_uint, 32);
pub const RTC_TIME524M_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const RTC_TIME524M_VAL_S = @as(c_uint, 0);
pub const RTC_CH0CC8U_VAL_W = @as(c_uint, 32);
pub const RTC_CH0CC8U_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const RTC_CH0CC8U_VAL_S = @as(c_uint, 0);
pub const RTC_CH1CC8U_VAL_W = @as(c_uint, 21);
pub const RTC_CH1CC8U_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x001FFFFF, .hex);
pub const RTC_CH1CC8U_VAL_S = @as(c_uint, 0);
pub const RTC_CH1CFG_EDGE = @as(c_uint, 0x00000001);
pub const RTC_CH1CFG_EDGE_M = @as(c_uint, 0x00000001);
pub const RTC_CH1CFG_EDGE_S = @as(c_uint, 0);
pub const RTC_CH1CFG_EDGE_FALL = @as(c_uint, 0x00000001);
pub const RTC_CH1CFG_EDGE_RISE = @as(c_uint, 0x00000000);
pub const RTC_IMASK_EV1 = @as(c_uint, 0x00000002);
pub const RTC_IMASK_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_IMASK_EV1_S = @as(c_uint, 1);
pub const RTC_IMASK_EV1_EN = @as(c_uint, 0x00000002);
pub const RTC_IMASK_EV1_DIS = @as(c_uint, 0x00000000);
pub const RTC_IMASK_EV0 = @as(c_uint, 0x00000001);
pub const RTC_IMASK_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_IMASK_EV0_S = @as(c_uint, 0);
pub const RTC_IMASK_EV0_EN = @as(c_uint, 0x00000001);
pub const RTC_IMASK_EV0_DIS = @as(c_uint, 0x00000000);
pub const RTC_RIS_EV1 = @as(c_uint, 0x00000002);
pub const RTC_RIS_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_RIS_EV1_S = @as(c_uint, 1);
pub const RTC_RIS_EV1_SET = @as(c_uint, 0x00000002);
pub const RTC_RIS_EV1_CLR = @as(c_uint, 0x00000000);
pub const RTC_RIS_EV0 = @as(c_uint, 0x00000001);
pub const RTC_RIS_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_RIS_EV0_S = @as(c_uint, 0);
pub const RTC_RIS_EV0_SET = @as(c_uint, 0x00000001);
pub const RTC_RIS_EV0_CLR = @as(c_uint, 0x00000000);
pub const RTC_MIS_EV1 = @as(c_uint, 0x00000002);
pub const RTC_MIS_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_MIS_EV1_S = @as(c_uint, 1);
pub const RTC_MIS_EV1_SET = @as(c_uint, 0x00000002);
pub const RTC_MIS_EV1_CLR = @as(c_uint, 0x00000000);
pub const RTC_MIS_EV0 = @as(c_uint, 0x00000001);
pub const RTC_MIS_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_MIS_EV0_S = @as(c_uint, 0);
pub const RTC_MIS_EV0_SET = @as(c_uint, 0x00000001);
pub const RTC_MIS_EV0_CLR = @as(c_uint, 0x00000000);
pub const RTC_ISET_EV1 = @as(c_uint, 0x00000002);
pub const RTC_ISET_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_ISET_EV1_S = @as(c_uint, 1);
pub const RTC_ISET_EV1_SET = @as(c_uint, 0x00000002);
pub const RTC_ISET_EV1_NO_EFFECT = @as(c_uint, 0x00000000);
pub const RTC_ISET_EV0 = @as(c_uint, 0x00000001);
pub const RTC_ISET_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_ISET_EV0_S = @as(c_uint, 0);
pub const RTC_ISET_EV0_SET = @as(c_uint, 0x00000001);
pub const RTC_ISET_EV0_NO_EFFECT = @as(c_uint, 0x00000000);
pub const RTC_ICLR_EV1 = @as(c_uint, 0x00000002);
pub const RTC_ICLR_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_ICLR_EV1_S = @as(c_uint, 1);
pub const RTC_ICLR_EV1_CLR = @as(c_uint, 0x00000002);
pub const RTC_ICLR_EV1_NO_EFF = @as(c_uint, 0x00000000);
pub const RTC_ICLR_EV0 = @as(c_uint, 0x00000001);
pub const RTC_ICLR_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_ICLR_EV0_S = @as(c_uint, 0);
pub const RTC_ICLR_EV0_CLR = @as(c_uint, 0x00000001);
pub const RTC_ICLR_EV0_NO_EFF = @as(c_uint, 0x00000000);
pub const RTC_IMSET_EV1 = @as(c_uint, 0x00000002);
pub const RTC_IMSET_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_IMSET_EV1_S = @as(c_uint, 1);
pub const RTC_IMSET_EV1_SET = @as(c_uint, 0x00000002);
pub const RTC_IMSET_EV1_NO_EFF = @as(c_uint, 0x00000000);
pub const RTC_IMSET_EV0 = @as(c_uint, 0x00000001);
pub const RTC_IMSET_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_IMSET_EV0_S = @as(c_uint, 0);
pub const RTC_IMSET_EV0_SET = @as(c_uint, 0x00000001);
pub const RTC_IMSET_EV0_NO_EFF = @as(c_uint, 0x00000000);
pub const RTC_IMCLR_EV1 = @as(c_uint, 0x00000002);
pub const RTC_IMCLR_EV1_M = @as(c_uint, 0x00000002);
pub const RTC_IMCLR_EV1_S = @as(c_uint, 1);
pub const RTC_IMCLR_EV1_CLR = @as(c_uint, 0x00000002);
pub const RTC_IMCLR_EV1_NO_EFF = @as(c_uint, 0x00000000);
pub const RTC_IMCLR_EV0 = @as(c_uint, 0x00000001);
pub const RTC_IMCLR_EV0_M = @as(c_uint, 0x00000001);
pub const RTC_IMCLR_EV0_S = @as(c_uint, 0);
pub const RTC_IMCLR_EV0_CLR = @as(c_uint, 0x00000001);
pub const RTC_IMCLR_EV0_NO_EFF = @as(c_uint, 0x00000000);
pub const RTC_EMU_HALT = @as(c_uint, 0x00000001);
pub const RTC_EMU_HALT_M = @as(c_uint, 0x00000001);
pub const RTC_EMU_HALT_S = @as(c_uint, 0);
pub const RTC_EMU_HALT_STOP = @as(c_uint, 0x00000001);
pub const RTC_EMU_HALT_RUN = @as(c_uint, 0x00000000);
pub const RTC_DTB_SEL_W = @as(c_uint, 4);
pub const RTC_DTB_SEL_M = @as(c_uint, 0x0000000F);
pub const RTC_DTB_SEL_S = @as(c_uint, 0);
pub const RTC_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const __HW_SYSTICK_H__ = "";
pub const SYSTICK_O_CSR = @as(c_uint, 0x00000000);
pub const SYSTICK_O_RVR = @as(c_uint, 0x00000004);
pub const SYSTICK_O_CVR = @as(c_uint, 0x00000008);
pub const SYSTICK_O_CALIB = @as(c_uint, 0x0000000C);
pub const SYSTICK_CSR_COUNTFLAG = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const SYSTICK_CSR_COUNTFLAG_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00010000, .hex);
pub const SYSTICK_CSR_COUNTFLAG_S = @as(c_uint, 16);
pub const SYSTICK_CSR_CLKSOURCE = @as(c_uint, 0x00000004);
pub const SYSTICK_CSR_CLKSOURCE_M = @as(c_uint, 0x00000004);
pub const SYSTICK_CSR_CLKSOURCE_S = @as(c_uint, 2);
pub const SYSTICK_CSR_TICKINT = @as(c_uint, 0x00000002);
pub const SYSTICK_CSR_TICKINT_M = @as(c_uint, 0x00000002);
pub const SYSTICK_CSR_TICKINT_S = @as(c_uint, 1);
pub const SYSTICK_CSR_ENABLE = @as(c_uint, 0x00000001);
pub const SYSTICK_CSR_ENABLE_M = @as(c_uint, 0x00000001);
pub const SYSTICK_CSR_ENABLE_S = @as(c_uint, 0);
pub const SYSTICK_RVR_RELOAD_W = @as(c_uint, 24);
pub const SYSTICK_RVR_RELOAD_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const SYSTICK_RVR_RELOAD_S = @as(c_uint, 0);
pub const SYSTICK_CVR_CURRENT_W = @as(c_uint, 24);
pub const SYSTICK_CVR_CURRENT_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const SYSTICK_CVR_CURRENT_S = @as(c_uint, 0);
pub const SYSTICK_CALIB_NOREF = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const SYSTICK_CALIB_NOREF_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hex);
pub const SYSTICK_CALIB_NOREF_S = @as(c_uint, 31);
pub const SYSTICK_CALIB_SKEW = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const SYSTICK_CALIB_SKEW_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x40000000, .hex);
pub const SYSTICK_CALIB_SKEW_S = @as(c_uint, 30);
pub const SYSTICK_CALIB_TENMS_W = @as(c_uint, 24);
pub const SYSTICK_CALIB_TENMS_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00FFFFFF, .hex);
pub const SYSTICK_CALIB_TENMS_S = @as(c_uint, 0);
pub const __HW_TYPES_H__ = "";
pub const __STDBOOL_H = "";
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const __HW_UART_H__ = "";
pub const UART_O_DR = @as(c_uint, 0x00000000);
pub const UART_O_RSR_ECR = @as(c_uint, 0x00000004);
pub const UART_O_FR = @as(c_uint, 0x00000018);
pub const UART_O_UARTILPR = @as(c_uint, 0x00000020);
pub const UART_O_IBRD = @as(c_uint, 0x00000024);
pub const UART_O_FBRD = @as(c_uint, 0x00000028);
pub const UART_O_LCRH = @as(c_uint, 0x0000002C);
pub const UART_O_CTL = @as(c_uint, 0x00000030);
pub const UART_O_IFLS = @as(c_uint, 0x00000034);
pub const UART_O_IMSC = @as(c_uint, 0x00000038);
pub const UART_O_RIS = @as(c_uint, 0x0000003C);
pub const UART_O_MIS = @as(c_uint, 0x00000040);
pub const UART_O_ICR = @as(c_uint, 0x00000044);
pub const UART_O_DMACTL = @as(c_uint, 0x00000048);
pub const UART_DR_OE = @as(c_uint, 0x00000800);
pub const UART_DR_OE_M = @as(c_uint, 0x00000800);
pub const UART_DR_OE_S = @as(c_uint, 11);
pub const UART_DR_BE = @as(c_uint, 0x00000400);
pub const UART_DR_BE_M = @as(c_uint, 0x00000400);
pub const UART_DR_BE_S = @as(c_uint, 10);
pub const UART_DR_PE = @as(c_uint, 0x00000200);
pub const UART_DR_PE_M = @as(c_uint, 0x00000200);
pub const UART_DR_PE_S = @as(c_uint, 9);
pub const UART_DR_FE = @as(c_uint, 0x00000100);
pub const UART_DR_FE_M = @as(c_uint, 0x00000100);
pub const UART_DR_FE_S = @as(c_uint, 8);
pub const UART_DR_DATA_W = @as(c_uint, 8);
pub const UART_DR_DATA_M = @as(c_uint, 0x000000FF);
pub const UART_DR_DATA_S = @as(c_uint, 0);
pub const UART_RSR_ECR_OE = @as(c_uint, 0x00000008);
pub const UART_RSR_ECR_OE_M = @as(c_uint, 0x00000008);
pub const UART_RSR_ECR_OE_S = @as(c_uint, 3);
pub const UART_RSR_ECR_OE_CLEAR_ERROR_1 = @as(c_uint, 0x00000008);
pub const UART_RSR_ECR_OE_ERROR_NOTSET = @as(c_uint, 0x00000000);
pub const UART_RSR_ECR_BE = @as(c_uint, 0x00000004);
pub const UART_RSR_ECR_BE_M = @as(c_uint, 0x00000004);
pub const UART_RSR_ECR_BE_S = @as(c_uint, 2);
pub const UART_RSR_ECR_BE_CLEAR_ERROR_1 = @as(c_uint, 0x00000004);
pub const UART_RSR_ECR_BE_ERROR_NOTSET = @as(c_uint, 0x00000000);
pub const UART_RSR_ECR_PE = @as(c_uint, 0x00000002);
pub const UART_RSR_ECR_PE_M = @as(c_uint, 0x00000002);
pub const UART_RSR_ECR_PE_S = @as(c_uint, 1);
pub const UART_RSR_ECR_PE_CLEAR_ERROR_1 = @as(c_uint, 0x00000002);
pub const UART_RSR_ECR_PE_ERROR_NOTSET = @as(c_uint, 0x00000000);
pub const UART_RSR_ECR_FE = @as(c_uint, 0x00000001);
pub const UART_RSR_ECR_FE_M = @as(c_uint, 0x00000001);
pub const UART_RSR_ECR_FE_S = @as(c_uint, 0);
pub const UART_RSR_ECR_FE_CLEAR_ERROR_1 = @as(c_uint, 0x00000001);
pub const UART_RSR_ECR_FE_ERROR_NOTSET = @as(c_uint, 0x00000000);
pub const UART_FR_TXFE = @as(c_uint, 0x00000080);
pub const UART_FR_TXFE_M = @as(c_uint, 0x00000080);
pub const UART_FR_TXFE_S = @as(c_uint, 7);
pub const UART_FR_RXFF = @as(c_uint, 0x00000040);
pub const UART_FR_RXFF_M = @as(c_uint, 0x00000040);
pub const UART_FR_RXFF_S = @as(c_uint, 6);
pub const UART_FR_TXFF = @as(c_uint, 0x00000020);
pub const UART_FR_TXFF_M = @as(c_uint, 0x00000020);
pub const UART_FR_TXFF_S = @as(c_uint, 5);
pub const UART_FR_RXFE = @as(c_uint, 0x00000010);
pub const UART_FR_RXFE_M = @as(c_uint, 0x00000010);
pub const UART_FR_RXFE_S = @as(c_uint, 4);
pub const UART_FR_BUSY = @as(c_uint, 0x00000008);
pub const UART_FR_BUSY_M = @as(c_uint, 0x00000008);
pub const UART_FR_BUSY_S = @as(c_uint, 3);
pub const UART_FR_CTS = @as(c_uint, 0x00000001);
pub const UART_FR_CTS_M = @as(c_uint, 0x00000001);
pub const UART_FR_CTS_S = @as(c_uint, 0);
pub const UART_UARTILPR_ILPDVSR_W = @as(c_uint, 8);
pub const UART_UARTILPR_ILPDVSR_M = @as(c_uint, 0x000000FF);
pub const UART_UARTILPR_ILPDVSR_S = @as(c_uint, 0);
pub const UART_IBRD_DIVINT_W = @as(c_uint, 16);
pub const UART_IBRD_DIVINT_M = @as(c_uint, 0x0000FFFF);
pub const UART_IBRD_DIVINT_S = @as(c_uint, 0);
pub const UART_FBRD_DIVFRAC_W = @as(c_uint, 6);
pub const UART_FBRD_DIVFRAC_M = @as(c_uint, 0x0000003F);
pub const UART_FBRD_DIVFRAC_S = @as(c_uint, 0);
pub const UART_LCRH_SPS = @as(c_uint, 0x00000080);
pub const UART_LCRH_SPS_M = @as(c_uint, 0x00000080);
pub const UART_LCRH_SPS_S = @as(c_uint, 7);
pub const UART_LCRH_WLEN_W = @as(c_uint, 2);
pub const UART_LCRH_WLEN_M = @as(c_uint, 0x00000060);
pub const UART_LCRH_WLEN_S = @as(c_uint, 5);
pub const UART_LCRH_WLEN_BITL8 = @as(c_uint, 0x00000060);
pub const UART_LCRH_WLEN_BITL7 = @as(c_uint, 0x00000040);
pub const UART_LCRH_WLEN_BITL6 = @as(c_uint, 0x00000020);
pub const UART_LCRH_WLEN_BITL5 = @as(c_uint, 0x00000000);
pub const UART_LCRH_FEN = @as(c_uint, 0x00000010);
pub const UART_LCRH_FEN_M = @as(c_uint, 0x00000010);
pub const UART_LCRH_FEN_S = @as(c_uint, 4);
pub const UART_LCRH_FEN_EN = @as(c_uint, 0x00000010);
pub const UART_LCRH_FEN_DIS = @as(c_uint, 0x00000000);
pub const UART_LCRH_STP2 = @as(c_uint, 0x00000008);
pub const UART_LCRH_STP2_M = @as(c_uint, 0x00000008);
pub const UART_LCRH_STP2_S = @as(c_uint, 3);
pub const UART_LCRH_EPS = @as(c_uint, 0x00000004);
pub const UART_LCRH_EPS_M = @as(c_uint, 0x00000004);
pub const UART_LCRH_EPS_S = @as(c_uint, 2);
pub const UART_LCRH_EPS_EVEN = @as(c_uint, 0x00000004);
pub const UART_LCRH_EPS_ODD = @as(c_uint, 0x00000000);
pub const UART_LCRH_PEN = @as(c_uint, 0x00000002);
pub const UART_LCRH_PEN_M = @as(c_uint, 0x00000002);
pub const UART_LCRH_PEN_S = @as(c_uint, 1);
pub const UART_LCRH_PEN_EN = @as(c_uint, 0x00000002);
pub const UART_LCRH_PEN_DIS = @as(c_uint, 0x00000000);
pub const UART_LCRH_BRK = @as(c_uint, 0x00000001);
pub const UART_LCRH_BRK_M = @as(c_uint, 0x00000001);
pub const UART_LCRH_BRK_S = @as(c_uint, 0);
pub const UART_CTL_CTSEN = @as(c_uint, 0x00008000);
pub const UART_CTL_CTSEN_M = @as(c_uint, 0x00008000);
pub const UART_CTL_CTSEN_S = @as(c_uint, 15);
pub const UART_CTL_CTSEN_EN = @as(c_uint, 0x00008000);
pub const UART_CTL_CTSEN_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_RTSEN = @as(c_uint, 0x00004000);
pub const UART_CTL_RTSEN_M = @as(c_uint, 0x00004000);
pub const UART_CTL_RTSEN_S = @as(c_uint, 14);
pub const UART_CTL_RTSEN_EN = @as(c_uint, 0x00004000);
pub const UART_CTL_RTSEN_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_RTS = @as(c_uint, 0x00000800);
pub const UART_CTL_RTS_M = @as(c_uint, 0x00000800);
pub const UART_CTL_RTS_S = @as(c_uint, 11);
pub const UART_CTL_RXE = @as(c_uint, 0x00000200);
pub const UART_CTL_RXE_M = @as(c_uint, 0x00000200);
pub const UART_CTL_RXE_S = @as(c_uint, 9);
pub const UART_CTL_RXE_EN = @as(c_uint, 0x00000200);
pub const UART_CTL_RXE_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_TXE = @as(c_uint, 0x00000100);
pub const UART_CTL_TXE_M = @as(c_uint, 0x00000100);
pub const UART_CTL_TXE_S = @as(c_uint, 8);
pub const UART_CTL_TXE_EN = @as(c_uint, 0x00000100);
pub const UART_CTL_TXE_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_LBE = @as(c_uint, 0x00000080);
pub const UART_CTL_LBE_M = @as(c_uint, 0x00000080);
pub const UART_CTL_LBE_S = @as(c_uint, 7);
pub const UART_CTL_LBE_EN = @as(c_uint, 0x00000080);
pub const UART_CTL_LBE_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_FCEN = @as(c_uint, 0x00000040);
pub const UART_CTL_FCEN_M = @as(c_uint, 0x00000040);
pub const UART_CTL_FCEN_S = @as(c_uint, 6);
pub const UART_CTL_FCEN_EN = @as(c_uint, 0x00000040);
pub const UART_CTL_FCEN_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_SIRLP = @as(c_uint, 0x00000004);
pub const UART_CTL_SIRLP_M = @as(c_uint, 0x00000004);
pub const UART_CTL_SIRLP_S = @as(c_uint, 2);
pub const UART_CTL_SIRLP_EN = @as(c_uint, 0x00000004);
pub const UART_CTL_SIRLP_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_SIREN = @as(c_uint, 0x00000002);
pub const UART_CTL_SIREN_M = @as(c_uint, 0x00000002);
pub const UART_CTL_SIREN_S = @as(c_uint, 1);
pub const UART_CTL_SIREN_EN = @as(c_uint, 0x00000002);
pub const UART_CTL_SIREN_DIS = @as(c_uint, 0x00000000);
pub const UART_CTL_UARTEN = @as(c_uint, 0x00000001);
pub const UART_CTL_UARTEN_M = @as(c_uint, 0x00000001);
pub const UART_CTL_UARTEN_S = @as(c_uint, 0);
pub const UART_CTL_UARTEN_EN = @as(c_uint, 0x00000001);
pub const UART_CTL_UARTEN_DIS = @as(c_uint, 0x00000000);
pub const UART_IFLS_RXSEL_W = @as(c_uint, 3);
pub const UART_IFLS_RXSEL_M = @as(c_uint, 0x00000038);
pub const UART_IFLS_RXSEL_S = @as(c_uint, 3);
pub const UART_IFLS_RXSEL_THREEQU = @as(c_uint, 0x00000018);
pub const UART_IFLS_RXSEL_HALF = @as(c_uint, 0x00000010);
pub const UART_IFLS_RXSEL_QUARTER = @as(c_uint, 0x00000008);
pub const UART_IFLS_TXSEL_W = @as(c_uint, 3);
pub const UART_IFLS_TXSEL_M = @as(c_uint, 0x00000007);
pub const UART_IFLS_TXSEL_S = @as(c_uint, 0);
pub const UART_IFLS_TXSEL_THREEQU = @as(c_uint, 0x00000003);
pub const UART_IFLS_TXSEL_HALF = @as(c_uint, 0x00000002);
pub const UART_IFLS_TXSEL_QUARTER = @as(c_uint, 0x00000001);
pub const UART_IMSC_RXDMADONEIM = @as(c_uint, 0x00002000);
pub const UART_IMSC_RXDMADONEIM_M = @as(c_uint, 0x00002000);
pub const UART_IMSC_RXDMADONEIM_S = @as(c_uint, 13);
pub const UART_IMSC_TXDMADONEIM = @as(c_uint, 0x00001000);
pub const UART_IMSC_TXDMADONEIM_M = @as(c_uint, 0x00001000);
pub const UART_IMSC_TXDMADONEIM_S = @as(c_uint, 12);
pub const UART_IMSC_EOTIM = @as(c_uint, 0x00000800);
pub const UART_IMSC_EOTIM_M = @as(c_uint, 0x00000800);
pub const UART_IMSC_EOTIM_S = @as(c_uint, 11);
pub const UART_IMSC_OEIM = @as(c_uint, 0x00000400);
pub const UART_IMSC_OEIM_M = @as(c_uint, 0x00000400);
pub const UART_IMSC_OEIM_S = @as(c_uint, 10);
pub const UART_IMSC_BEIM = @as(c_uint, 0x00000200);
pub const UART_IMSC_BEIM_M = @as(c_uint, 0x00000200);
pub const UART_IMSC_BEIM_S = @as(c_uint, 9);
pub const UART_IMSC_PEIM = @as(c_uint, 0x00000100);
pub const UART_IMSC_PEIM_M = @as(c_uint, 0x00000100);
pub const UART_IMSC_PEIM_S = @as(c_uint, 8);
pub const UART_IMSC_FEIM = @as(c_uint, 0x00000080);
pub const UART_IMSC_FEIM_M = @as(c_uint, 0x00000080);
pub const UART_IMSC_FEIM_S = @as(c_uint, 7);
pub const UART_IMSC_RTIM = @as(c_uint, 0x00000040);
pub const UART_IMSC_RTIM_M = @as(c_uint, 0x00000040);
pub const UART_IMSC_RTIM_S = @as(c_uint, 6);
pub const UART_IMSC_TXIM = @as(c_uint, 0x00000020);
pub const UART_IMSC_TXIM_M = @as(c_uint, 0x00000020);
pub const UART_IMSC_TXIM_S = @as(c_uint, 5);
pub const UART_IMSC_RXIM = @as(c_uint, 0x00000010);
pub const UART_IMSC_RXIM_M = @as(c_uint, 0x00000010);
pub const UART_IMSC_RXIM_S = @as(c_uint, 4);
pub const UART_IMSC_CTSMIM = @as(c_uint, 0x00000002);
pub const UART_IMSC_CTSMIM_M = @as(c_uint, 0x00000002);
pub const UART_IMSC_CTSMIM_S = @as(c_uint, 1);
pub const UART_RIS_RXDMADONERIS = @as(c_uint, 0x00002000);
pub const UART_RIS_RXDMADONERIS_M = @as(c_uint, 0x00002000);
pub const UART_RIS_RXDMADONERIS_S = @as(c_uint, 13);
pub const UART_RIS_TXDMADONERIS = @as(c_uint, 0x00001000);
pub const UART_RIS_TXDMADONERIS_M = @as(c_uint, 0x00001000);
pub const UART_RIS_TXDMADONERIS_S = @as(c_uint, 12);
pub const UART_RIS_EOTRIS = @as(c_uint, 0x00000800);
pub const UART_RIS_EOTRIS_M = @as(c_uint, 0x00000800);
pub const UART_RIS_EOTRIS_S = @as(c_uint, 11);
pub const UART_RIS_OERIS = @as(c_uint, 0x00000400);
pub const UART_RIS_OERIS_M = @as(c_uint, 0x00000400);
pub const UART_RIS_OERIS_S = @as(c_uint, 10);
pub const UART_RIS_BERIS = @as(c_uint, 0x00000200);
pub const UART_RIS_BERIS_M = @as(c_uint, 0x00000200);
pub const UART_RIS_BERIS_S = @as(c_uint, 9);
pub const UART_RIS_PERIS = @as(c_uint, 0x00000100);
pub const UART_RIS_PERIS_M = @as(c_uint, 0x00000100);
pub const UART_RIS_PERIS_S = @as(c_uint, 8);
pub const UART_RIS_FERIS = @as(c_uint, 0x00000080);
pub const UART_RIS_FERIS_M = @as(c_uint, 0x00000080);
pub const UART_RIS_FERIS_S = @as(c_uint, 7);
pub const UART_RIS_RTRIS = @as(c_uint, 0x00000040);
pub const UART_RIS_RTRIS_M = @as(c_uint, 0x00000040);
pub const UART_RIS_RTRIS_S = @as(c_uint, 6);
pub const UART_RIS_TXRIS = @as(c_uint, 0x00000020);
pub const UART_RIS_TXRIS_M = @as(c_uint, 0x00000020);
pub const UART_RIS_TXRIS_S = @as(c_uint, 5);
pub const UART_RIS_RXRIS = @as(c_uint, 0x00000010);
pub const UART_RIS_RXRIS_M = @as(c_uint, 0x00000010);
pub const UART_RIS_RXRIS_S = @as(c_uint, 4);
pub const UART_RIS_CTSRMIS = @as(c_uint, 0x00000002);
pub const UART_RIS_CTSRMIS_M = @as(c_uint, 0x00000002);
pub const UART_RIS_CTSRMIS_S = @as(c_uint, 1);
pub const UART_MIS_RXDMADONE = @as(c_uint, 0x00002000);
pub const UART_MIS_RXDMADONE_M = @as(c_uint, 0x00002000);
pub const UART_MIS_RXDMADONE_S = @as(c_uint, 13);
pub const UART_MIS_TXDMADONEMIS = @as(c_uint, 0x00001000);
pub const UART_MIS_TXDMADONEMIS_M = @as(c_uint, 0x00001000);
pub const UART_MIS_TXDMADONEMIS_S = @as(c_uint, 12);
pub const UART_MIS_EOTMIS = @as(c_uint, 0x00000800);
pub const UART_MIS_EOTMIS_M = @as(c_uint, 0x00000800);
pub const UART_MIS_EOTMIS_S = @as(c_uint, 11);
pub const UART_MIS_OEMIS = @as(c_uint, 0x00000400);
pub const UART_MIS_OEMIS_M = @as(c_uint, 0x00000400);
pub const UART_MIS_OEMIS_S = @as(c_uint, 10);
pub const UART_MIS_BEMIS = @as(c_uint, 0x00000200);
pub const UART_MIS_BEMIS_M = @as(c_uint, 0x00000200);
pub const UART_MIS_BEMIS_S = @as(c_uint, 9);
pub const UART_MIS_PEMIS = @as(c_uint, 0x00000100);
pub const UART_MIS_PEMIS_M = @as(c_uint, 0x00000100);
pub const UART_MIS_PEMIS_S = @as(c_uint, 8);
pub const UART_MIS_FEMIS = @as(c_uint, 0x00000080);
pub const UART_MIS_FEMIS_M = @as(c_uint, 0x00000080);
pub const UART_MIS_FEMIS_S = @as(c_uint, 7);
pub const UART_MIS_RTMIS = @as(c_uint, 0x00000040);
pub const UART_MIS_RTMIS_M = @as(c_uint, 0x00000040);
pub const UART_MIS_RTMIS_S = @as(c_uint, 6);
pub const UART_MIS_TXMIS = @as(c_uint, 0x00000020);
pub const UART_MIS_TXMIS_M = @as(c_uint, 0x00000020);
pub const UART_MIS_TXMIS_S = @as(c_uint, 5);
pub const UART_MIS_RXMIS = @as(c_uint, 0x00000010);
pub const UART_MIS_RXMIS_M = @as(c_uint, 0x00000010);
pub const UART_MIS_RXMIS_S = @as(c_uint, 4);
pub const UART_MIS_CTSMMIS = @as(c_uint, 0x00000002);
pub const UART_MIS_CTSMMIS_M = @as(c_uint, 0x00000002);
pub const UART_MIS_CTSMMIS_S = @as(c_uint, 1);
pub const UART_ICR_RXDMADONEIC = @as(c_uint, 0x00002000);
pub const UART_ICR_RXDMADONEIC_M = @as(c_uint, 0x00002000);
pub const UART_ICR_RXDMADONEIC_S = @as(c_uint, 13);
pub const UART_ICR_TXDMADONEIC = @as(c_uint, 0x00001000);
pub const UART_ICR_TXDMADONEIC_M = @as(c_uint, 0x00001000);
pub const UART_ICR_TXDMADONEIC_S = @as(c_uint, 12);
pub const UART_ICR_EOTIC = @as(c_uint, 0x00000800);
pub const UART_ICR_EOTIC_M = @as(c_uint, 0x00000800);
pub const UART_ICR_EOTIC_S = @as(c_uint, 11);
pub const UART_ICR_OEIC = @as(c_uint, 0x00000400);
pub const UART_ICR_OEIC_M = @as(c_uint, 0x00000400);
pub const UART_ICR_OEIC_S = @as(c_uint, 10);
pub const UART_ICR_BEIC = @as(c_uint, 0x00000200);
pub const UART_ICR_BEIC_M = @as(c_uint, 0x00000200);
pub const UART_ICR_BEIC_S = @as(c_uint, 9);
pub const UART_ICR_PEIC = @as(c_uint, 0x00000100);
pub const UART_ICR_PEIC_M = @as(c_uint, 0x00000100);
pub const UART_ICR_PEIC_S = @as(c_uint, 8);
pub const UART_ICR_FEIC = @as(c_uint, 0x00000080);
pub const UART_ICR_FEIC_M = @as(c_uint, 0x00000080);
pub const UART_ICR_FEIC_S = @as(c_uint, 7);
pub const UART_ICR_RTIC = @as(c_uint, 0x00000040);
pub const UART_ICR_RTIC_M = @as(c_uint, 0x00000040);
pub const UART_ICR_RTIC_S = @as(c_uint, 6);
pub const UART_ICR_TXIC = @as(c_uint, 0x00000020);
pub const UART_ICR_TXIC_M = @as(c_uint, 0x00000020);
pub const UART_ICR_TXIC_S = @as(c_uint, 5);
pub const UART_ICR_RXIC = @as(c_uint, 0x00000010);
pub const UART_ICR_RXIC_M = @as(c_uint, 0x00000010);
pub const UART_ICR_RXIC_S = @as(c_uint, 4);
pub const UART_ICR_CTSMIC = @as(c_uint, 0x00000002);
pub const UART_ICR_CTSMIC_M = @as(c_uint, 0x00000002);
pub const UART_ICR_CTSMIC_S = @as(c_uint, 1);
pub const UART_DMACTL_DMAONERR = @as(c_uint, 0x00000004);
pub const UART_DMACTL_DMAONERR_M = @as(c_uint, 0x00000004);
pub const UART_DMACTL_DMAONERR_S = @as(c_uint, 2);
pub const UART_DMACTL_TXDMAE = @as(c_uint, 0x00000002);
pub const UART_DMACTL_TXDMAE_M = @as(c_uint, 0x00000002);
pub const UART_DMACTL_TXDMAE_S = @as(c_uint, 1);
pub const UART_DMACTL_RXDMAE = @as(c_uint, 0x00000001);
pub const UART_DMACTL_RXDMAE_M = @as(c_uint, 0x00000001);
pub const UART_DMACTL_RXDMAE_S = @as(c_uint, 0);
pub const __HW_VIMS_H__ = "";
pub const VIMS_O_DESC = @as(c_uint, 0x00000000);
pub const VIMS_O_DESCEX = @as(c_uint, 0x00000004);
pub const VIMS_O_FLWS1T = @as(c_uint, 0x00000008);
pub const VIMS_O_FLWS2T = @as(c_uint, 0x0000000C);
pub const VIMS_O_PTRMC0 = @as(c_uint, 0x00000018);
pub const VIMS_O_B0TRMC1 = @as(c_uint, 0x0000001C);
pub const VIMS_O_B0TRMC0 = @as(c_uint, 0x00000020);
pub const VIMS_O_FLBLCK = @as(c_uint, 0x00000100);
pub const VIMS_O_CFG = @as(c_uint, 0x000003FC);
pub const VIMS_O_RDPRMN = @as(c_uint, 0x00000400);
pub const VIMS_O_RDPRNMN = @as(c_uint, 0x00000404);
pub const VIMS_O_RDPRTRM = @as(c_uint, 0x00000408);
pub const VIMS_O_RDPREGR = @as(c_uint, 0x0000040C);
pub const VIMS_O_WEPRA = @as(c_uint, 0x00000410);
pub const VIMS_O_WEPRB = @as(c_uint, 0x00000414);
pub const VIMS_O_WEPRAUX = @as(c_uint, 0x0000041C);
pub const VIMS_O_FLBSTAT = @as(c_uint, 0x00000420);
pub const VIMS_O_CCHCTRL = @as(c_uint, 0x00000424);
pub const VIMS_O_DTB = @as(c_uint, 0x00000800);
pub const VIMS_DESC_MODID_W = @as(c_uint, 16);
pub const VIMS_DESC_MODID_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFF0000, .hex);
pub const VIMS_DESC_MODID_S = @as(c_uint, 16);
pub const VIMS_DESC_STDIPOFF_W = @as(c_uint, 4);
pub const VIMS_DESC_STDIPOFF_M = @as(c_uint, 0x0000F000);
pub const VIMS_DESC_STDIPOFF_S = @as(c_uint, 12);
pub const VIMS_DESC_INSTIDX_W = @as(c_uint, 4);
pub const VIMS_DESC_INSTIDX_M = @as(c_uint, 0x00000F00);
pub const VIMS_DESC_INSTIDX_S = @as(c_uint, 8);
pub const VIMS_DESC_MAJREV_W = @as(c_uint, 4);
pub const VIMS_DESC_MAJREV_M = @as(c_uint, 0x000000F0);
pub const VIMS_DESC_MAJREV_S = @as(c_uint, 4);
pub const VIMS_DESC_MINREV_W = @as(c_uint, 4);
pub const VIMS_DESC_MINREV_M = @as(c_uint, 0x0000000F);
pub const VIMS_DESC_MINREV_S = @as(c_uint, 0);
pub const VIMS_DESCEX_NBANK = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const VIMS_DESCEX_NBANK_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x08000000, .hex);
pub const VIMS_DESCEX_NBANK_S = @as(c_uint, 27);
pub const VIMS_DESCEX_FLSZ_W = @as(c_uint, 12);
pub const VIMS_DESCEX_FLSZ_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x07FF8000, .hex);
pub const VIMS_DESCEX_FLSZ_S = @as(c_uint, 15);
pub const VIMS_DESCEX_ROMSZ_W = @as(c_uint, 15);
pub const VIMS_DESCEX_ROMSZ_M = @as(c_uint, 0x00007FFF);
pub const VIMS_DESCEX_ROMSZ_S = @as(c_uint, 0);
pub const VIMS_FLWS1T_VAL_W = @as(c_uint, 3);
pub const VIMS_FLWS1T_VAL_M = @as(c_uint, 0x00000007);
pub const VIMS_FLWS1T_VAL_S = @as(c_uint, 0);
pub const VIMS_FLWS1T_VAL_WS7 = @as(c_uint, 0x00000007);
pub const VIMS_FLWS1T_VAL_WS6 = @as(c_uint, 0x00000006);
pub const VIMS_FLWS1T_VAL_WS5 = @as(c_uint, 0x00000005);
pub const VIMS_FLWS1T_VAL_WS4 = @as(c_uint, 0x00000004);
pub const VIMS_FLWS1T_VAL_WS3 = @as(c_uint, 0x00000003);
pub const VIMS_FLWS1T_VAL_WS2 = @as(c_uint, 0x00000002);
pub const VIMS_FLWS1T_VAL_WS1 = @as(c_uint, 0x00000001);
pub const VIMS_FLWS1T_VAL_WS0 = @as(c_uint, 0x00000000);
pub const VIMS_FLWS2T_VAL_W = @as(c_uint, 3);
pub const VIMS_FLWS2T_VAL_M = @as(c_uint, 0x00000007);
pub const VIMS_FLWS2T_VAL_S = @as(c_uint, 0);
pub const VIMS_FLWS2T_VAL_WS7 = @as(c_uint, 0x00000007);
pub const VIMS_FLWS2T_VAL_WS6 = @as(c_uint, 0x00000006);
pub const VIMS_FLWS2T_VAL_WS5 = @as(c_uint, 0x00000005);
pub const VIMS_FLWS2T_VAL_WS4 = @as(c_uint, 0x00000004);
pub const VIMS_FLWS2T_VAL_WS3 = @as(c_uint, 0x00000003);
pub const VIMS_FLWS2T_VAL_WS2 = @as(c_uint, 0x00000002);
pub const VIMS_FLWS2T_VAL_WS1 = @as(c_uint, 0x00000001);
pub const VIMS_FLWS2T_VAL_WS0 = @as(c_uint, 0x00000000);
pub const VIMS_PTRMC0_VAL_W = @as(c_uint, 32);
pub const VIMS_PTRMC0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const VIMS_PTRMC0_VAL_S = @as(c_uint, 0);
pub const VIMS_B0TRMC1_VAL_W = @as(c_uint, 32);
pub const VIMS_B0TRMC1_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const VIMS_B0TRMC1_VAL_S = @as(c_uint, 0);
pub const VIMS_B0TRMC0_VAL_W = @as(c_uint, 32);
pub const VIMS_B0TRMC0_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const VIMS_B0TRMC0_VAL_S = @as(c_uint, 0);
pub const VIMS_FLBLCK_VAL = @as(c_uint, 0x00000001);
pub const VIMS_FLBLCK_VAL_M = @as(c_uint, 0x00000001);
pub const VIMS_FLBLCK_VAL_S = @as(c_uint, 0);
pub const VIMS_FLBLCK_VAL_BLOCK = @as(c_uint, 0x00000001);
pub const VIMS_FLBLCK_VAL_ALLOW = @as(c_uint, 0x00000000);
pub const VIMS_CFG_TRMVLID = @as(c_uint, 0x00000002);
pub const VIMS_CFG_TRMVLID_M = @as(c_uint, 0x00000002);
pub const VIMS_CFG_TRMVLID_S = @as(c_uint, 1);
pub const VIMS_CFG_WEPRTRM = @as(c_uint, 0x00000001);
pub const VIMS_CFG_WEPRTRM_M = @as(c_uint, 0x00000001);
pub const VIMS_CFG_WEPRTRM_S = @as(c_uint, 0);
pub const VIMS_CFG_WEPRTRM_ALLOW = @as(c_uint, 0x00000001);
pub const VIMS_CFG_WEPRTRM_RESTRICT = @as(c_uint, 0x00000000);
pub const VIMS_RDPRMN_VAL_W = @as(c_uint, 3);
pub const VIMS_RDPRMN_VAL_M = @as(c_uint, 0x00000007);
pub const VIMS_RDPRMN_VAL_S = @as(c_uint, 0);
pub const VIMS_RDPRNMN_VAL_W = @as(c_uint, 6);
pub const VIMS_RDPRNMN_VAL_M = @as(c_uint, 0x0000003F);
pub const VIMS_RDPRNMN_VAL_S = @as(c_uint, 0);
pub const VIMS_RDPRTRM_VAL_W = @as(c_uint, 6);
pub const VIMS_RDPRTRM_VAL_M = @as(c_uint, 0x0000003F);
pub const VIMS_RDPRTRM_VAL_S = @as(c_uint, 0);
pub const VIMS_RDPREGR_VAL = @as(c_uint, 0x00000001);
pub const VIMS_RDPREGR_VAL_M = @as(c_uint, 0x00000001);
pub const VIMS_RDPREGR_VAL_S = @as(c_uint, 0);
pub const VIMS_WEPRA_VAL_W = @as(c_uint, 32);
pub const VIMS_WEPRA_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const VIMS_WEPRA_VAL_S = @as(c_uint, 0);
pub const VIMS_WEPRB_VAL_W = @as(c_uint, 28);
pub const VIMS_WEPRB_VAL_M = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x0FFFFFFF, .hex);
pub const VIMS_WEPRB_VAL_S = @as(c_uint, 0);
pub const VIMS_WEPRAUX_WEPREGR = @as(c_uint, 0x00000004);
pub const VIMS_WEPRAUX_WEPREGR_M = @as(c_uint, 0x00000004);
pub const VIMS_WEPRAUX_WEPREGR_S = @as(c_uint, 2);
pub const VIMS_WEPRAUX_WEPRTRM = @as(c_uint, 0x00000002);
pub const VIMS_WEPRAUX_WEPRTRM_M = @as(c_uint, 0x00000002);
pub const VIMS_WEPRAUX_WEPRTRM_S = @as(c_uint, 1);
pub const VIMS_WEPRAUX_WEPRNMN = @as(c_uint, 0x00000001);
pub const VIMS_WEPRAUX_WEPRNMN_M = @as(c_uint, 0x00000001);
pub const VIMS_WEPRAUX_WEPRNMN_S = @as(c_uint, 0);
pub const VIMS_FLBSTAT_PARERR = @as(c_uint, 0x00000008);
pub const VIMS_FLBSTAT_PARERR_M = @as(c_uint, 0x00000008);
pub const VIMS_FLBSTAT_PARERR_S = @as(c_uint, 3);
pub const VIMS_FLBSTAT_PARERR_ERROR = @as(c_uint, 0x00000008);
pub const VIMS_FLBSTAT_PARERR_NOERROR = @as(c_uint, 0x00000000);
pub const VIMS_FLBSTAT_B0BSY = @as(c_uint, 0x00000004);
pub const VIMS_FLBSTAT_B0BSY_M = @as(c_uint, 0x00000004);
pub const VIMS_FLBSTAT_B0BSY_S = @as(c_uint, 2);
pub const VIMS_FLBSTAT_B0BSY_BUSY = @as(c_uint, 0x00000004);
pub const VIMS_FLBSTAT_B0BSY_IDLE = @as(c_uint, 0x00000000);
pub const VIMS_FLBSTAT_B2TRDY = @as(c_uint, 0x00000002);
pub const VIMS_FLBSTAT_B2TRDY_M = @as(c_uint, 0x00000002);
pub const VIMS_FLBSTAT_B2TRDY_S = @as(c_uint, 1);
pub const VIMS_FLBSTAT_B2TRDY_READY = @as(c_uint, 0x00000002);
pub const VIMS_FLBSTAT_B2TRDY_NOTREADY = @as(c_uint, 0x00000000);
pub const VIMS_FLBSTAT_B1TRDY = @as(c_uint, 0x00000001);
pub const VIMS_FLBSTAT_B1TRDY_M = @as(c_uint, 0x00000001);
pub const VIMS_FLBSTAT_B1TRDY_S = @as(c_uint, 0);
pub const VIMS_FLBSTAT_B1TRDY_READY = @as(c_uint, 0x00000001);
pub const VIMS_FLBSTAT_B1TRDY_NOTREADY = @as(c_uint, 0x00000000);
pub const VIMS_CCHCTRL_CCHMPEN = @as(c_uint, 0x00000004);
pub const VIMS_CCHCTRL_CCHMPEN_M = @as(c_uint, 0x00000004);
pub const VIMS_CCHCTRL_CCHMPEN_S = @as(c_uint, 2);
pub const VIMS_CCHCTRL_CCHMPEN_EN = @as(c_uint, 0x00000004);
pub const VIMS_CCHCTRL_CCHMPEN_DIS = @as(c_uint, 0x00000000);
pub const VIMS_CCHCTRL_CCHPFEN = @as(c_uint, 0x00000002);
pub const VIMS_CCHCTRL_CCHPFEN_M = @as(c_uint, 0x00000002);
pub const VIMS_CCHCTRL_CCHPFEN_S = @as(c_uint, 1);
pub const VIMS_CCHCTRL_CCHPFEN_EN = @as(c_uint, 0x00000002);
pub const VIMS_CCHCTRL_CCHPFEN_DIS = @as(c_uint, 0x00000000);
pub const VIMS_CCHCTRL_CCHEN = @as(c_uint, 0x00000001);
pub const VIMS_CCHCTRL_CCHEN_M = @as(c_uint, 0x00000001);
pub const VIMS_CCHCTRL_CCHEN_S = @as(c_uint, 0);
pub const VIMS_CCHCTRL_CCHEN_EN = @as(c_uint, 0x00000001);
pub const VIMS_CCHCTRL_CCHEN_DIS = @as(c_uint, 0x00000000);
pub const VIMS_DTB_SEL_W = @as(c_uint, 4);
pub const VIMS_DTB_SEL_M = @as(c_uint, 0x0000000F);
pub const VIMS_DTB_SEL_S = @as(c_uint, 0);
pub const VIMS_DTB_SEL_DIS = @as(c_uint, 0x00000000);
pub const __PBE_COMMON_RAM_REGS_H = "";
pub const PBE_COMMON_RAM_O_CMDPAR0 = @as(c_uint, 0x00000000);
pub const PBE_COMMON_RAM_O_CMDPAR1 = @as(c_uint, 0x00000002);
pub const PBE_COMMON_RAM_O_MSGBOX = @as(c_uint, 0x00000004);
pub const PBE_COMMON_RAM_O_ENDCAUSE = @as(c_uint, 0x00000006);
pub const PBE_COMMON_RAM_O_FIFOCMDADD = @as(c_uint, 0x00000008);
pub const PBE_COMMON_RAM_CMDPAR0_VAL_W = @as(c_uint, 16);
pub const PBE_COMMON_RAM_CMDPAR0_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_COMMON_RAM_CMDPAR0_VAL_S = @as(c_uint, 0);
pub const PBE_COMMON_RAM_CMDPAR1_VAL_W = @as(c_uint, 16);
pub const PBE_COMMON_RAM_CMDPAR1_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_COMMON_RAM_CMDPAR1_VAL_S = @as(c_uint, 0);
pub const PBE_COMMON_RAM_MSGBOX_VAL_W = @as(c_uint, 16);
pub const PBE_COMMON_RAM_MSGBOX_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_COMMON_RAM_MSGBOX_VAL_S = @as(c_uint, 0);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_W = @as(c_uint, 8);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_M = @as(c_uint, 0x00FF);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_S = @as(c_uint, 0);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ENDOK = @as(c_uint, 0x0000);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_RXTIMEOUT = @as(c_uint, 0x0001);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_NOSYNC = @as(c_uint, 0x0002);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_RXERR = @as(c_uint, 0x0003);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_CONNECT = @as(c_uint, 0x0004);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_SCANRSP = @as(c_uint, 0x0006);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_MAXNAK = @as(c_uint, 0x0006);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_EOPSTOP = @as(c_uint, 0x0007);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_RXF = @as(c_uint, 0x00F9);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_TXF = @as(c_uint, 0x00FA);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_SYNTH = @as(c_uint, 0x00FB);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_STOP = @as(c_uint, 0x00FC);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_PAR = @as(c_uint, 0x00FD);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_BADOP = @as(c_uint, 0x00FE);
pub const PBE_COMMON_RAM_ENDCAUSE_STAT_ERR_INTERNAL = @as(c_uint, 0x00FF);
pub const PBE_COMMON_RAM_FIFOCMDADD_VAL_W = @as(c_uint, 16);
pub const PBE_COMMON_RAM_FIFOCMDADD_VAL_M = @as(c_uint, 0xFFFF);
pub const PBE_COMMON_RAM_FIFOCMDADD_VAL_S = @as(c_uint, 0);
pub const IRQn = enum_IRQn;
pub const T_UINT32 = struct_T_UINT32;
pub const T_UINT16_WRITE = struct_T_UINT16_WRITE;
pub const T_UINT16_READ = struct_T_UINT16_READ;
pub const T_UINT32_WRITE = struct_T_UINT32_WRITE;
pub const T_UINT32_READ = struct_T_UINT32_READ;
